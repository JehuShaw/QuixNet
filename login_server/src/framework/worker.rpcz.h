// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker.proto

#ifndef RPCZ_worker_2eproto__INCLUDED
#define RPCZ_worker_2eproto__INCLUDED

#include <string>
#include <rpcz/service.hpp>

namespace google {
namespace protobuf {
class ServiceDescriptor;
class MethodDescriptor;
}  // namespace protobuf
}  // namespace google
namespace rpcz {
class rpc_controller;
class closure;
class rpc_channel;
}  //namesacpe rpcz
#include "void_packet.pb.h"
#include "interest_packet.pb.h"
#include "data_packet.pb.h"
#include "worker.pb.h"

namespace node {
void rpcz_protobuf_AssignDesc_worker_2eproto();
void rpcz_protobuf_ShutdownFile_worker_2eproto();

class WorkerService_Stub;

class WorkerService : public rpcz::service {
 protected:
  // This class should be treated as an abstract interface.
  inline WorkerService() {};
 public:
  virtual ~WorkerService();

  typedef WorkerService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void HandleProtocol(const ::node::DataPacket& request,
                       ::rpcz::reply< ::node::DataPacket> response);
  virtual void HandleNotification(const ::node::DataPacket& request,
                       ::rpcz::reply< ::node::DataPacket> response);
  virtual void ListProtocolInterests(const ::node::VoidPacket& request,
                       ::rpcz::reply< ::node::InterestPacket> response);
  virtual void ListNotificationInterests(const ::node::VoidPacket& request,
                       ::rpcz::reply< ::node::InterestPacket> response);
  virtual void SendToClient(const ::node::DataPacket& request,
                       ::rpcz::reply< ::node::DataPacket> response);
  virtual void CloseClient(const ::node::DataPacket& request,
                       ::rpcz::reply< ::node::DataPacket> response);
  virtual void SendToWorker(const ::node::DataPacket& request,
                       ::rpcz::reply< ::node::DataPacket> response);
  virtual void KickLogged(const ::node::DataPacket& request,
                       ::rpcz::reply< ::node::DataPacket> response);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void call_method(const ::google::protobuf::MethodDescriptor* method,
                  const ::google::protobuf::Message& request,
                  ::rpcz::server_channel* channel);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(WorkerService);
};

class WorkerService_Stub {
 public:
  WorkerService_Stub(::rpcz::rpc_channel* channel, 
                   bool owns_channel=false);
  WorkerService_Stub(::rpcz::rpc_channel* channel, 
                   const ::std::string& service_name,
                   bool owns_channel=false);
  ~WorkerService_Stub();

  inline ::rpcz::rpc_channel* channel() { return channel_; }


  void HandleProtocol(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void HandleProtocol(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       long deadline_ms = -1);
  void HandleNotification(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void HandleNotification(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       long deadline_ms = -1);
  void ListProtocolInterests(const ::node::VoidPacket& request,
                       ::node::InterestPacket* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void ListProtocolInterests(const ::node::VoidPacket& request,
                       ::node::InterestPacket* response,
                       long deadline_ms = -1);
  void ListNotificationInterests(const ::node::VoidPacket& request,
                       ::node::InterestPacket* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void ListNotificationInterests(const ::node::VoidPacket& request,
                       ::node::InterestPacket* response,
                       long deadline_ms = -1);
  void SendToClient(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void SendToClient(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       long deadline_ms = -1);
  void CloseClient(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void CloseClient(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       long deadline_ms = -1);
  void SendToWorker(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void SendToWorker(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       long deadline_ms = -1);
  void KickLogged(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void KickLogged(const ::node::DataPacket& request,
                       ::node::DataPacket* response,
                       long deadline_ms = -1);
 private:
  ::rpcz::rpc_channel* channel_;
  ::std::string service_name_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(WorkerService_Stub);
};


}  // namespace node
#endif  // RPCZ_worker_2eproto__INCLUDED
