// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5flogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5flogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "msg_login_character.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5flogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5flogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5flogin_2eproto;
namespace login {
class CreateRequest;
class CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResponse;
class CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class EnterRequest;
class EnterRequestDefaultTypeInternal;
extern EnterRequestDefaultTypeInternal _EnterRequest_default_instance_;
class EnterResponse;
class EnterResponseDefaultTypeInternal;
extern EnterResponseDefaultTypeInternal _EnterResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class ReloginResponse;
class ReloginResponseDefaultTypeInternal;
extern ReloginResponseDefaultTypeInternal _ReloginResponse_default_instance_;
}  // namespace login
PROTOBUF_NAMESPACE_OPEN
template<> ::login::CreateRequest* Arena::CreateMaybeMessage<::login::CreateRequest>(Arena*);
template<> ::login::CreateResponse* Arena::CreateMaybeMessage<::login::CreateResponse>(Arena*);
template<> ::login::EnterRequest* Arena::CreateMaybeMessage<::login::EnterRequest>(Arena*);
template<> ::login::EnterResponse* Arena::CreateMaybeMessage<::login::EnterResponse>(Arena*);
template<> ::login::LoginRequest* Arena::CreateMaybeMessage<::login::LoginRequest>(Arena*);
template<> ::login::LoginResponse* Arena::CreateMaybeMessage<::login::LoginResponse>(Arena*);
template<> ::login::ReloginResponse* Arena::CreateMaybeMessage<::login::ReloginResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace login {

// ===================================================================

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5flogin_2eproto);
    return ::descriptor_table_msg_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionkeyFieldNumber = 2,
    kAccountFieldNumber = 1,
  };
  // string sessionkey = 2;
  void clear_sessionkey();
  const std::string& sessionkey() const;
  void set_sessionkey(const std::string& value);
  void set_sessionkey(std::string&& value);
  void set_sessionkey(const char* value);
  void set_sessionkey(const char* value, size_t size);
  std::string* mutable_sessionkey();
  std::string* release_sessionkey();
  void set_allocated_sessionkey(std::string* sessionkey);
  private:
  const std::string& _internal_sessionkey() const;
  void _internal_set_sessionkey(const std::string& value);
  std::string* _internal_mutable_sessionkey();
  public:

  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionkey_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5flogin_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login.LoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5flogin_2eproto);
    return ::descriptor_table_msg_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharasetFieldNumber = 2,
    kAccountFieldNumber = 1,
  };
  // repeated .login.Character charaset = 2;
  int charaset_size() const;
  private:
  int _internal_charaset_size() const;
  public:
  void clear_charaset();
  ::login::Character* mutable_charaset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login::Character >*
      mutable_charaset();
  private:
  const ::login::Character& _internal_charaset(int index) const;
  ::login::Character* _internal_add_charaset();
  public:
  const ::login::Character& charaset(int index) const;
  ::login::Character* add_charaset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login::Character >&
      charaset() const;

  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login.LoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login::Character > charaset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login.CreateRequest) */ {
 public:
  CreateRequest();
  virtual ~CreateRequest();

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const final {
    return CreateMaybeMessage<CreateRequest>(nullptr);
  }

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRequest& from);
  void MergeFrom(const CreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login.CreateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5flogin_2eproto);
    return ::descriptor_table_msg_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInfoFieldNumber = 3,
    kCfgidFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes info = 3;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const void* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // uint32 cfgid = 2;
  void clear_cfgid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cfgid() const;
  void set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cfgid() const;
  void _internal_set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:login.CreateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cfgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login.CreateResponse) */ {
 public:
  CreateResponse();
  virtual ~CreateResponse();

  CreateResponse(const CreateResponse& from);
  CreateResponse(CreateResponse&& from) noexcept
    : CreateResponse() {
    *this = ::std::move(from);
  }

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
               &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateResponse& a, CreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateResponse* New() const final {
    return CreateMaybeMessage<CreateResponse>(nullptr);
  }

  CreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateResponse& from);
  void MergeFrom(const CreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login.CreateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5flogin_2eproto);
    return ::descriptor_table_msg_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharaFieldNumber = 2,
    kAccountFieldNumber = 1,
  };
  // .login.Character chara = 2;
  bool has_chara() const;
  private:
  bool _internal_has_chara() const;
  public:
  void clear_chara();
  const ::login::Character& chara() const;
  ::login::Character* release_chara();
  ::login::Character* mutable_chara();
  void set_allocated_chara(::login::Character* chara);
  private:
  const ::login::Character& _internal_chara() const;
  ::login::Character* _internal_mutable_chara();
  public:

  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login.CreateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::login::Character* chara_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5flogin_2eproto;
};
// -------------------------------------------------------------------

class EnterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login.EnterRequest) */ {
 public:
  EnterRequest();
  virtual ~EnterRequest();

  EnterRequest(const EnterRequest& from);
  EnterRequest(EnterRequest&& from) noexcept
    : EnterRequest() {
    *this = ::std::move(from);
  }

  inline EnterRequest& operator=(const EnterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterRequest& operator=(EnterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterRequest* internal_default_instance() {
    return reinterpret_cast<const EnterRequest*>(
               &_EnterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EnterRequest& a, EnterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterRequest* New() const final {
    return CreateMaybeMessage<EnterRequest>(nullptr);
  }

  EnterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterRequest& from);
  void MergeFrom(const EnterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login.EnterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5flogin_2eproto);
    return ::descriptor_table_msg_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // uint64 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login.EnterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5flogin_2eproto;
};
// -------------------------------------------------------------------

class EnterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login.EnterResponse) */ {
 public:
  EnterResponse();
  virtual ~EnterResponse();

  EnterResponse(const EnterResponse& from);
  EnterResponse(EnterResponse&& from) noexcept
    : EnterResponse() {
    *this = ::std::move(from);
  }

  inline EnterResponse& operator=(const EnterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterResponse& operator=(EnterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterResponse* internal_default_instance() {
    return reinterpret_cast<const EnterResponse*>(
               &_EnterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EnterResponse& a, EnterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterResponse* New() const final {
    return CreateMaybeMessage<EnterResponse>(nullptr);
  }

  EnterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterResponse& from);
  void MergeFrom(const EnterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login.EnterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5flogin_2eproto);
    return ::descriptor_table_msg_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionkeyFieldNumber = 3,
    kEndpointFieldNumber = 4,
    kAccountFieldNumber = 1,
    kUseridFieldNumber = 2,
  };
  // string sessionkey = 3;
  void clear_sessionkey();
  const std::string& sessionkey() const;
  void set_sessionkey(const std::string& value);
  void set_sessionkey(std::string&& value);
  void set_sessionkey(const char* value);
  void set_sessionkey(const char* value, size_t size);
  std::string* mutable_sessionkey();
  std::string* release_sessionkey();
  void set_allocated_sessionkey(std::string* sessionkey);
  private:
  const std::string& _internal_sessionkey() const;
  void _internal_set_sessionkey(const std::string& value);
  std::string* _internal_mutable_sessionkey();
  public:

  // string endpoint = 4;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 userid = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login.EnterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5flogin_2eproto;
};
// -------------------------------------------------------------------

class ReloginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login.ReloginResponse) */ {
 public:
  ReloginResponse();
  virtual ~ReloginResponse();

  ReloginResponse(const ReloginResponse& from);
  ReloginResponse(ReloginResponse&& from) noexcept
    : ReloginResponse() {
    *this = ::std::move(from);
  }

  inline ReloginResponse& operator=(const ReloginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloginResponse& operator=(ReloginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReloginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReloginResponse* internal_default_instance() {
    return reinterpret_cast<const ReloginResponse*>(
               &_ReloginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReloginResponse& a, ReloginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReloginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReloginResponse* New() const final {
    return CreateMaybeMessage<ReloginResponse>(nullptr);
  }

  ReloginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReloginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReloginResponse& from);
  void MergeFrom(const ReloginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReloginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login.ReloginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5flogin_2eproto);
    return ::descriptor_table_msg_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharasetFieldNumber = 2,
    kAccountFieldNumber = 1,
  };
  // repeated .login.Character charaset = 2;
  int charaset_size() const;
  private:
  int _internal_charaset_size() const;
  public:
  void clear_charaset();
  ::login::Character* mutable_charaset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login::Character >*
      mutable_charaset();
  private:
  const ::login::Character& _internal_charaset(int index) const;
  ::login::Character* _internal_add_charaset();
  public:
  const ::login::Character& charaset(int index) const;
  ::login::Character* add_charaset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login::Character >&
      charaset() const;

  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:login.ReloginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login::Character > charaset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5flogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// uint64 account = 1;
inline void LoginRequest::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginRequest::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginRequest::account() const {
  // @@protoc_insertion_point(field_get:login.LoginRequest.account)
  return _internal_account();
}
inline void LoginRequest::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void LoginRequest::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:login.LoginRequest.account)
}

// string sessionkey = 2;
inline void LoginRequest::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::sessionkey() const {
  // @@protoc_insertion_point(field_get:login.LoginRequest.sessionkey)
  return _internal_sessionkey();
}
inline void LoginRequest::set_sessionkey(const std::string& value) {
  _internal_set_sessionkey(value);
  // @@protoc_insertion_point(field_set:login.LoginRequest.sessionkey)
}
inline std::string* LoginRequest::mutable_sessionkey() {
  // @@protoc_insertion_point(field_mutable:login.LoginRequest.sessionkey)
  return _internal_mutable_sessionkey();
}
inline const std::string& LoginRequest::_internal_sessionkey() const {
  return sessionkey_.GetNoArena();
}
inline void LoginRequest::_internal_set_sessionkey(const std::string& value) {
  
  sessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_sessionkey(std::string&& value) {
  
  sessionkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.LoginRequest.sessionkey)
}
inline void LoginRequest::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.LoginRequest.sessionkey)
}
inline void LoginRequest::set_sessionkey(const char* value, size_t size) {
  
  sessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.LoginRequest.sessionkey)
}
inline std::string* LoginRequest::_internal_mutable_sessionkey() {
  
  return sessionkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_sessionkey() {
  // @@protoc_insertion_point(field_release:login.LoginRequest.sessionkey)
  
  return sessionkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_sessionkey(std::string* sessionkey) {
  if (sessionkey != nullptr) {
    
  } else {
    
  }
  sessionkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:login.LoginRequest.sessionkey)
}

// -------------------------------------------------------------------

// LoginResponse

// uint64 account = 1;
inline void LoginResponse::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginResponse::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginResponse::account() const {
  // @@protoc_insertion_point(field_get:login.LoginResponse.account)
  return _internal_account();
}
inline void LoginResponse::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void LoginResponse::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:login.LoginResponse.account)
}

// repeated .login.Character charaset = 2;
inline int LoginResponse::_internal_charaset_size() const {
  return charaset_.size();
}
inline int LoginResponse::charaset_size() const {
  return _internal_charaset_size();
}
inline ::login::Character* LoginResponse::mutable_charaset(int index) {
  // @@protoc_insertion_point(field_mutable:login.LoginResponse.charaset)
  return charaset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login::Character >*
LoginResponse::mutable_charaset() {
  // @@protoc_insertion_point(field_mutable_list:login.LoginResponse.charaset)
  return &charaset_;
}
inline const ::login::Character& LoginResponse::_internal_charaset(int index) const {
  return charaset_.Get(index);
}
inline const ::login::Character& LoginResponse::charaset(int index) const {
  // @@protoc_insertion_point(field_get:login.LoginResponse.charaset)
  return _internal_charaset(index);
}
inline ::login::Character* LoginResponse::_internal_add_charaset() {
  return charaset_.Add();
}
inline ::login::Character* LoginResponse::add_charaset() {
  // @@protoc_insertion_point(field_add:login.LoginResponse.charaset)
  return _internal_add_charaset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login::Character >&
LoginResponse::charaset() const {
  // @@protoc_insertion_point(field_list:login.LoginResponse.charaset)
  return charaset_;
}

// -------------------------------------------------------------------

// CreateRequest

// string name = 1;
inline void CreateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRequest::name() const {
  // @@protoc_insertion_point(field_get:login.CreateRequest.name)
  return _internal_name();
}
inline void CreateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:login.CreateRequest.name)
}
inline std::string* CreateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:login.CreateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void CreateRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.CreateRequest.name)
}
inline void CreateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.CreateRequest.name)
}
inline void CreateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.CreateRequest.name)
}
inline std::string* CreateRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRequest::release_name() {
  // @@protoc_insertion_point(field_release:login.CreateRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:login.CreateRequest.name)
}

// uint32 cfgid = 2;
inline void CreateRequest::clear_cfgid() {
  cfgid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRequest::_internal_cfgid() const {
  return cfgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRequest::cfgid() const {
  // @@protoc_insertion_point(field_get:login.CreateRequest.cfgid)
  return _internal_cfgid();
}
inline void CreateRequest::_internal_set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cfgid_ = value;
}
inline void CreateRequest::set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cfgid(value);
  // @@protoc_insertion_point(field_set:login.CreateRequest.cfgid)
}

// bytes info = 3;
inline void CreateRequest::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRequest::info() const {
  // @@protoc_insertion_point(field_get:login.CreateRequest.info)
  return _internal_info();
}
inline void CreateRequest::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:login.CreateRequest.info)
}
inline std::string* CreateRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable:login.CreateRequest.info)
  return _internal_mutable_info();
}
inline const std::string& CreateRequest::_internal_info() const {
  return info_.GetNoArena();
}
inline void CreateRequest::_internal_set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRequest::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.CreateRequest.info)
}
inline void CreateRequest::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.CreateRequest.info)
}
inline void CreateRequest::set_info(const void* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.CreateRequest.info)
}
inline std::string* CreateRequest::_internal_mutable_info() {
  
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRequest::release_info() {
  // @@protoc_insertion_point(field_release:login.CreateRequest.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:login.CreateRequest.info)
}

// -------------------------------------------------------------------

// CreateResponse

// uint64 account = 1;
inline void CreateResponse::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateResponse::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateResponse::account() const {
  // @@protoc_insertion_point(field_get:login.CreateResponse.account)
  return _internal_account();
}
inline void CreateResponse::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void CreateResponse::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:login.CreateResponse.account)
}

// .login.Character chara = 2;
inline bool CreateResponse::_internal_has_chara() const {
  return this != internal_default_instance() && chara_ != nullptr;
}
inline bool CreateResponse::has_chara() const {
  return _internal_has_chara();
}
inline const ::login::Character& CreateResponse::_internal_chara() const {
  const ::login::Character* p = chara_;
  return p != nullptr ? *p : *reinterpret_cast<const ::login::Character*>(
      &::login::_Character_default_instance_);
}
inline const ::login::Character& CreateResponse::chara() const {
  // @@protoc_insertion_point(field_get:login.CreateResponse.chara)
  return _internal_chara();
}
inline ::login::Character* CreateResponse::release_chara() {
  // @@protoc_insertion_point(field_release:login.CreateResponse.chara)
  
  ::login::Character* temp = chara_;
  chara_ = nullptr;
  return temp;
}
inline ::login::Character* CreateResponse::_internal_mutable_chara() {
  
  if (chara_ == nullptr) {
    auto* p = CreateMaybeMessage<::login::Character>(GetArenaNoVirtual());
    chara_ = p;
  }
  return chara_;
}
inline ::login::Character* CreateResponse::mutable_chara() {
  // @@protoc_insertion_point(field_mutable:login.CreateResponse.chara)
  return _internal_mutable_chara();
}
inline void CreateResponse::set_allocated_chara(::login::Character* chara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chara_);
  }
  if (chara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chara, submessage_arena);
    }
    
  } else {
    
  }
  chara_ = chara;
  // @@protoc_insertion_point(field_set_allocated:login.CreateResponse.chara)
}

// -------------------------------------------------------------------

// EnterRequest

// uint64 userid = 1;
inline void EnterRequest::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterRequest::userid() const {
  // @@protoc_insertion_point(field_get:login.EnterRequest.userid)
  return _internal_userid();
}
inline void EnterRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void EnterRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:login.EnterRequest.userid)
}

// -------------------------------------------------------------------

// EnterResponse

// uint64 account = 1;
inline void EnterResponse::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterResponse::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterResponse::account() const {
  // @@protoc_insertion_point(field_get:login.EnterResponse.account)
  return _internal_account();
}
inline void EnterResponse::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void EnterResponse::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:login.EnterResponse.account)
}

// uint64 userid = 2;
inline void EnterResponse::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterResponse::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterResponse::userid() const {
  // @@protoc_insertion_point(field_get:login.EnterResponse.userid)
  return _internal_userid();
}
inline void EnterResponse::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void EnterResponse::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:login.EnterResponse.userid)
}

// string sessionkey = 3;
inline void EnterResponse::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnterResponse::sessionkey() const {
  // @@protoc_insertion_point(field_get:login.EnterResponse.sessionkey)
  return _internal_sessionkey();
}
inline void EnterResponse::set_sessionkey(const std::string& value) {
  _internal_set_sessionkey(value);
  // @@protoc_insertion_point(field_set:login.EnterResponse.sessionkey)
}
inline std::string* EnterResponse::mutable_sessionkey() {
  // @@protoc_insertion_point(field_mutable:login.EnterResponse.sessionkey)
  return _internal_mutable_sessionkey();
}
inline const std::string& EnterResponse::_internal_sessionkey() const {
  return sessionkey_.GetNoArena();
}
inline void EnterResponse::_internal_set_sessionkey(const std::string& value) {
  
  sessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnterResponse::set_sessionkey(std::string&& value) {
  
  sessionkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.EnterResponse.sessionkey)
}
inline void EnterResponse::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.EnterResponse.sessionkey)
}
inline void EnterResponse::set_sessionkey(const char* value, size_t size) {
  
  sessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.EnterResponse.sessionkey)
}
inline std::string* EnterResponse::_internal_mutable_sessionkey() {
  
  return sessionkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnterResponse::release_sessionkey() {
  // @@protoc_insertion_point(field_release:login.EnterResponse.sessionkey)
  
  return sessionkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnterResponse::set_allocated_sessionkey(std::string* sessionkey) {
  if (sessionkey != nullptr) {
    
  } else {
    
  }
  sessionkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:login.EnterResponse.sessionkey)
}

// string endpoint = 4;
inline void EnterResponse::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnterResponse::endpoint() const {
  // @@protoc_insertion_point(field_get:login.EnterResponse.endpoint)
  return _internal_endpoint();
}
inline void EnterResponse::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:login.EnterResponse.endpoint)
}
inline std::string* EnterResponse::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:login.EnterResponse.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& EnterResponse::_internal_endpoint() const {
  return endpoint_.GetNoArena();
}
inline void EnterResponse::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnterResponse::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.EnterResponse.endpoint)
}
inline void EnterResponse::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.EnterResponse.endpoint)
}
inline void EnterResponse::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.EnterResponse.endpoint)
}
inline std::string* EnterResponse::_internal_mutable_endpoint() {
  
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnterResponse::release_endpoint() {
  // @@protoc_insertion_point(field_release:login.EnterResponse.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnterResponse::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:login.EnterResponse.endpoint)
}

// -------------------------------------------------------------------

// ReloginResponse

// uint64 account = 1;
inline void ReloginResponse::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReloginResponse::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReloginResponse::account() const {
  // @@protoc_insertion_point(field_get:login.ReloginResponse.account)
  return _internal_account();
}
inline void ReloginResponse::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void ReloginResponse::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:login.ReloginResponse.account)
}

// repeated .login.Character charaset = 2;
inline int ReloginResponse::_internal_charaset_size() const {
  return charaset_.size();
}
inline int ReloginResponse::charaset_size() const {
  return _internal_charaset_size();
}
inline ::login::Character* ReloginResponse::mutable_charaset(int index) {
  // @@protoc_insertion_point(field_mutable:login.ReloginResponse.charaset)
  return charaset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login::Character >*
ReloginResponse::mutable_charaset() {
  // @@protoc_insertion_point(field_mutable_list:login.ReloginResponse.charaset)
  return &charaset_;
}
inline const ::login::Character& ReloginResponse::_internal_charaset(int index) const {
  return charaset_.Get(index);
}
inline const ::login::Character& ReloginResponse::charaset(int index) const {
  // @@protoc_insertion_point(field_get:login.ReloginResponse.charaset)
  return _internal_charaset(index);
}
inline ::login::Character* ReloginResponse::_internal_add_charaset() {
  return charaset_.Add();
}
inline ::login::Character* ReloginResponse::add_charaset() {
  // @@protoc_insertion_point(field_add:login.ReloginResponse.charaset)
  return _internal_add_charaset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login::Character >&
ReloginResponse::charaset() const {
  // @@protoc_insertion_point(field_list:login.ReloginResponse.charaset)
  return charaset_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace login

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5flogin_2eproto
