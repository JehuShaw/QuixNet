// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controlcentre.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_controlcentre_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_controlcentre_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_controlcentre_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_controlcentre_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[34]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_controlcentre_2eproto;
namespace node {
class CheckUserRequest;
class CheckUserRequestDefaultTypeInternal;
extern CheckUserRequestDefaultTypeInternal _CheckUserRequest_default_instance_;
class CheckUserResponse;
class CheckUserResponseDefaultTypeInternal;
extern CheckUserResponseDefaultTypeInternal _CheckUserResponse_default_instance_;
class ControlCentreVoid;
class ControlCentreVoidDefaultTypeInternal;
extern ControlCentreVoidDefaultTypeInternal _ControlCentreVoid_default_instance_;
class CreateUserRequest;
class CreateUserRequestDefaultTypeInternal;
extern CreateUserRequestDefaultTypeInternal _CreateUserRequest_default_instance_;
class CreateUserResponse;
class CreateUserResponseDefaultTypeInternal;
extern CreateUserResponseDefaultTypeInternal _CreateUserResponse_default_instance_;
class DeleteUserRequest;
class DeleteUserRequestDefaultTypeInternal;
extern DeleteUserRequestDefaultTypeInternal _DeleteUserRequest_default_instance_;
class DeleteUserResponse;
class DeleteUserResponseDefaultTypeInternal;
extern DeleteUserResponseDefaultTypeInternal _DeleteUserResponse_default_instance_;
class EndPointRequest;
class EndPointRequestDefaultTypeInternal;
extern EndPointRequestDefaultTypeInternal _EndPointRequest_default_instance_;
class EndPointResponse;
class EndPointResponseDefaultTypeInternal;
extern EndPointResponseDefaultTypeInternal _EndPointResponse_default_instance_;
class FreeRequest;
class FreeRequestDefaultTypeInternal;
extern FreeRequestDefaultTypeInternal _FreeRequest_default_instance_;
class FreeResponse;
class FreeResponseDefaultTypeInternal;
extern FreeResponseDefaultTypeInternal _FreeResponse_default_instance_;
class GetUserRequest;
class GetUserRequestDefaultTypeInternal;
extern GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
class GetUserResponse;
class GetUserResponseDefaultTypeInternal;
extern GetUserResponseDefaultTypeInternal _GetUserResponse_default_instance_;
class GuidResponse;
class GuidResponseDefaultTypeInternal;
extern GuidResponseDefaultTypeInternal _GuidResponse_default_instance_;
class KeepRegisterRequest;
class KeepRegisterRequestDefaultTypeInternal;
extern KeepRegisterRequestDefaultTypeInternal _KeepRegisterRequest_default_instance_;
class KeepRegisterResponse;
class KeepRegisterResponseDefaultTypeInternal;
extern KeepRegisterResponseDefaultTypeInternal _KeepRegisterResponse_default_instance_;
class LowLoadNodeRequest;
class LowLoadNodeRequestDefaultTypeInternal;
extern LowLoadNodeRequestDefaultTypeInternal _LowLoadNodeRequest_default_instance_;
class LowLoadNodeResponse;
class LowLoadNodeResponseDefaultTypeInternal;
extern LowLoadNodeResponseDefaultTypeInternal _LowLoadNodeResponse_default_instance_;
class NodeDetail;
class NodeDetailDefaultTypeInternal;
extern NodeDetailDefaultTypeInternal _NodeDetail_default_instance_;
class NodeListRequest;
class NodeListRequestDefaultTypeInternal;
extern NodeListRequestDefaultTypeInternal _NodeListRequest_default_instance_;
class NodeListResponse;
class NodeListResponseDefaultTypeInternal;
extern NodeListResponseDefaultTypeInternal _NodeListResponse_default_instance_;
class RegionLowLoadRequest;
class RegionLowLoadRequestDefaultTypeInternal;
extern RegionLowLoadRequestDefaultTypeInternal _RegionLowLoadRequest_default_instance_;
class RegionLowLoadResponse;
class RegionLowLoadResponseDefaultTypeInternal;
extern RegionLowLoadResponseDefaultTypeInternal _RegionLowLoadResponse_default_instance_;
class RegisterRequest;
class RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
class RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class RemoveRequest;
class RemoveRequestDefaultTypeInternal;
extern RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
class RemoveResponse;
class RemoveResponseDefaultTypeInternal;
extern RemoveResponseDefaultTypeInternal _RemoveResponse_default_instance_;
class SeizeRequest;
class SeizeRequestDefaultTypeInternal;
extern SeizeRequestDefaultTypeInternal _SeizeRequest_default_instance_;
class SeizeResponse;
class SeizeResponseDefaultTypeInternal;
extern SeizeResponseDefaultTypeInternal _SeizeResponse_default_instance_;
class UpdateUserRequest;
class UpdateUserRequestDefaultTypeInternal;
extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class UpdateUserResponse;
class UpdateUserResponseDefaultTypeInternal;
extern UpdateUserResponseDefaultTypeInternal _UpdateUserResponse_default_instance_;
class UserLoginRequest;
class UserLoginRequestDefaultTypeInternal;
extern UserLoginRequestDefaultTypeInternal _UserLoginRequest_default_instance_;
class UserLogoutRequest;
class UserLogoutRequestDefaultTypeInternal;
extern UserLogoutRequestDefaultTypeInternal _UserLogoutRequest_default_instance_;
class UserPacket;
class UserPacketDefaultTypeInternal;
extern UserPacketDefaultTypeInternal _UserPacket_default_instance_;
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> ::node::CheckUserRequest* Arena::CreateMaybeMessage<::node::CheckUserRequest>(Arena*);
template<> ::node::CheckUserResponse* Arena::CreateMaybeMessage<::node::CheckUserResponse>(Arena*);
template<> ::node::ControlCentreVoid* Arena::CreateMaybeMessage<::node::ControlCentreVoid>(Arena*);
template<> ::node::CreateUserRequest* Arena::CreateMaybeMessage<::node::CreateUserRequest>(Arena*);
template<> ::node::CreateUserResponse* Arena::CreateMaybeMessage<::node::CreateUserResponse>(Arena*);
template<> ::node::DeleteUserRequest* Arena::CreateMaybeMessage<::node::DeleteUserRequest>(Arena*);
template<> ::node::DeleteUserResponse* Arena::CreateMaybeMessage<::node::DeleteUserResponse>(Arena*);
template<> ::node::EndPointRequest* Arena::CreateMaybeMessage<::node::EndPointRequest>(Arena*);
template<> ::node::EndPointResponse* Arena::CreateMaybeMessage<::node::EndPointResponse>(Arena*);
template<> ::node::FreeRequest* Arena::CreateMaybeMessage<::node::FreeRequest>(Arena*);
template<> ::node::FreeResponse* Arena::CreateMaybeMessage<::node::FreeResponse>(Arena*);
template<> ::node::GetUserRequest* Arena::CreateMaybeMessage<::node::GetUserRequest>(Arena*);
template<> ::node::GetUserResponse* Arena::CreateMaybeMessage<::node::GetUserResponse>(Arena*);
template<> ::node::GuidResponse* Arena::CreateMaybeMessage<::node::GuidResponse>(Arena*);
template<> ::node::KeepRegisterRequest* Arena::CreateMaybeMessage<::node::KeepRegisterRequest>(Arena*);
template<> ::node::KeepRegisterResponse* Arena::CreateMaybeMessage<::node::KeepRegisterResponse>(Arena*);
template<> ::node::LowLoadNodeRequest* Arena::CreateMaybeMessage<::node::LowLoadNodeRequest>(Arena*);
template<> ::node::LowLoadNodeResponse* Arena::CreateMaybeMessage<::node::LowLoadNodeResponse>(Arena*);
template<> ::node::NodeDetail* Arena::CreateMaybeMessage<::node::NodeDetail>(Arena*);
template<> ::node::NodeListRequest* Arena::CreateMaybeMessage<::node::NodeListRequest>(Arena*);
template<> ::node::NodeListResponse* Arena::CreateMaybeMessage<::node::NodeListResponse>(Arena*);
template<> ::node::RegionLowLoadRequest* Arena::CreateMaybeMessage<::node::RegionLowLoadRequest>(Arena*);
template<> ::node::RegionLowLoadResponse* Arena::CreateMaybeMessage<::node::RegionLowLoadResponse>(Arena*);
template<> ::node::RegisterRequest* Arena::CreateMaybeMessage<::node::RegisterRequest>(Arena*);
template<> ::node::RegisterResponse* Arena::CreateMaybeMessage<::node::RegisterResponse>(Arena*);
template<> ::node::RemoveRequest* Arena::CreateMaybeMessage<::node::RemoveRequest>(Arena*);
template<> ::node::RemoveResponse* Arena::CreateMaybeMessage<::node::RemoveResponse>(Arena*);
template<> ::node::SeizeRequest* Arena::CreateMaybeMessage<::node::SeizeRequest>(Arena*);
template<> ::node::SeizeResponse* Arena::CreateMaybeMessage<::node::SeizeResponse>(Arena*);
template<> ::node::UpdateUserRequest* Arena::CreateMaybeMessage<::node::UpdateUserRequest>(Arena*);
template<> ::node::UpdateUserResponse* Arena::CreateMaybeMessage<::node::UpdateUserResponse>(Arena*);
template<> ::node::UserLoginRequest* Arena::CreateMaybeMessage<::node::UserLoginRequest>(Arena*);
template<> ::node::UserLogoutRequest* Arena::CreateMaybeMessage<::node::UserLogoutRequest>(Arena*);
template<> ::node::UserPacket* Arena::CreateMaybeMessage<::node::UserPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace node {

// ===================================================================

class ControlCentreVoid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.ControlCentreVoid) */ {
 public:
  ControlCentreVoid();
  virtual ~ControlCentreVoid();

  ControlCentreVoid(const ControlCentreVoid& from);
  ControlCentreVoid(ControlCentreVoid&& from) noexcept
    : ControlCentreVoid() {
    *this = ::std::move(from);
  }

  inline ControlCentreVoid& operator=(const ControlCentreVoid& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCentreVoid& operator=(ControlCentreVoid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlCentreVoid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCentreVoid* internal_default_instance() {
    return reinterpret_cast<const ControlCentreVoid*>(
               &_ControlCentreVoid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlCentreVoid& a, ControlCentreVoid& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCentreVoid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlCentreVoid* New() const final {
    return CreateMaybeMessage<ControlCentreVoid>(nullptr);
  }

  ControlCentreVoid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlCentreVoid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlCentreVoid& from);
  void MergeFrom(const ControlCentreVoid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCentreVoid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.ControlCentreVoid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:node.ControlCentreVoid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.RegisterRequest) */ {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterRequest>(nullptr);
  }

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.RegisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteuseridsFieldNumber = 13,
    kEndpointFieldNumber = 2,
    kServernameFieldNumber = 3,
    kProjectnameFieldNumber = 6,
    kAcceptaddressFieldNumber = 7,
    kProcesspathFieldNumber = 8,
    kServertypeFieldNumber = 1,
    kServeridFieldNumber = 4,
    kServerregionFieldNumber = 5,
    kServantidFieldNumber = 9,
    kAgentsizeFieldNumber = 10,
    kRouteserverFieldNumber = 11,
    kRouteaddressidFieldNumber = 12,
  };
  // repeated uint64 routeuserids = 13;
  int routeuserids_size() const;
  private:
  int _internal_routeuserids_size() const;
  public:
  void clear_routeuserids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_routeuserids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_routeuserids() const;
  void _internal_add_routeuserids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_routeuserids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 routeuserids(int index) const;
  void set_routeuserids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_routeuserids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      routeuserids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_routeuserids();

  // string endpoint = 2;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // bytes servername = 3;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // bytes projectname = 6;
  void clear_projectname();
  const std::string& projectname() const;
  void set_projectname(const std::string& value);
  void set_projectname(std::string&& value);
  void set_projectname(const char* value);
  void set_projectname(const void* value, size_t size);
  std::string* mutable_projectname();
  std::string* release_projectname();
  void set_allocated_projectname(std::string* projectname);
  private:
  const std::string& _internal_projectname() const;
  void _internal_set_projectname(const std::string& value);
  std::string* _internal_mutable_projectname();
  public:

  // string acceptaddress = 7;
  void clear_acceptaddress();
  const std::string& acceptaddress() const;
  void set_acceptaddress(const std::string& value);
  void set_acceptaddress(std::string&& value);
  void set_acceptaddress(const char* value);
  void set_acceptaddress(const char* value, size_t size);
  std::string* mutable_acceptaddress();
  std::string* release_acceptaddress();
  void set_allocated_acceptaddress(std::string* acceptaddress);
  private:
  const std::string& _internal_acceptaddress() const;
  void _internal_set_acceptaddress(const std::string& value);
  std::string* _internal_mutable_acceptaddress();
  public:

  // bytes processpath = 8;
  void clear_processpath();
  const std::string& processpath() const;
  void set_processpath(const std::string& value);
  void set_processpath(std::string&& value);
  void set_processpath(const char* value);
  void set_processpath(const void* value, size_t size);
  std::string* mutable_processpath();
  std::string* release_processpath();
  void set_allocated_processpath(std::string* processpath);
  private:
  const std::string& _internal_processpath() const;
  void _internal_set_processpath(const std::string& value);
  std::string* _internal_mutable_processpath();
  public:

  // int32 servertype = 1;
  void clear_servertype();
  ::PROTOBUF_NAMESPACE_ID::int32 servertype() const;
  void set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servertype() const;
  void _internal_set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 serverid = 4;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serverregion = 5;
  void clear_serverregion();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion() const;
  void set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverregion() const;
  void _internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 servantid = 9;
  void clear_servantid();
  ::PROTOBUF_NAMESPACE_ID::uint32 servantid() const;
  void set_servantid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servantid() const;
  void _internal_set_servantid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 agentsize = 10;
  void clear_agentsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 agentsize() const;
  void set_agentsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_agentsize() const;
  void _internal_set_agentsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool routeserver = 11;
  void clear_routeserver();
  bool routeserver() const;
  void set_routeserver(bool value);
  private:
  bool _internal_routeserver() const;
  void _internal_set_routeserver(bool value);
  public:

  // uint64 routeaddressid = 12;
  void clear_routeaddressid();
  ::PROTOBUF_NAMESPACE_ID::uint64 routeaddressid() const;
  void set_routeaddressid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_routeaddressid() const;
  void _internal_set_routeaddressid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:node.RegisterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > routeuserids_;
  mutable std::atomic<int> _routeuserids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceptaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processpath_;
  ::PROTOBUF_NAMESPACE_ID::int32 servertype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servantid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 agentsize_;
  bool routeserver_;
  ::PROTOBUF_NAMESPACE_ID::uint64 routeaddressid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.RegisterResponse) */ {
 public:
  RegisterResponse();
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const final {
    return CreateMaybeMessage<RegisterResponse>(nullptr);
  }

  RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.RegisterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentidsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated uint32 agentids = 2;
  int agentids_size() const;
  private:
  int _internal_agentids_size() const;
  public:
  void clear_agentids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_agentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_agentids() const;
  void _internal_add_agentids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_agentids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 agentids(int index) const;
  void set_agentids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_agentids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      agentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_agentids();

  // sint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.RegisterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > agentids_;
  mutable std::atomic<int> _agentids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class RemoveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.RemoveRequest) */ {
 public:
  RemoveRequest();
  virtual ~RemoveRequest();

  RemoveRequest(const RemoveRequest& from);
  RemoveRequest(RemoveRequest&& from) noexcept
    : RemoveRequest() {
    *this = ::std::move(from);
  }

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRequest& operator=(RemoveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveRequest*>(
               &_RemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoveRequest& a, RemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRequest* New() const final {
    return CreateMaybeMessage<RemoveRequest>(nullptr);
  }

  RemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRequest& from);
  void MergeFrom(const RemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.RemoveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServernameFieldNumber = 1,
    kServeridFieldNumber = 2,
    kServertypeFieldNumber = 3,
  };
  // bytes servername = 1;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // uint32 serverid = 2;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 servertype = 3;
  void clear_servertype();
  ::PROTOBUF_NAMESPACE_ID::int32 servertype() const;
  void set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servertype() const;
  void _internal_set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.RemoveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::int32 servertype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class RemoveResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.RemoveResponse) */ {
 public:
  RemoveResponse();
  virtual ~RemoveResponse();

  RemoveResponse(const RemoveResponse& from);
  RemoveResponse(RemoveResponse&& from) noexcept
    : RemoveResponse() {
    *this = ::std::move(from);
  }

  inline RemoveResponse& operator=(const RemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveResponse& operator=(RemoveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveResponse*>(
               &_RemoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RemoveResponse& a, RemoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveResponse* New() const final {
    return CreateMaybeMessage<RemoveResponse>(nullptr);
  }

  RemoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveResponse& from);
  void MergeFrom(const RemoveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.RemoveResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // sint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.RemoveResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class KeepRegisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.KeepRegisterRequest) */ {
 public:
  KeepRegisterRequest();
  virtual ~KeepRegisterRequest();

  KeepRegisterRequest(const KeepRegisterRequest& from);
  KeepRegisterRequest(KeepRegisterRequest&& from) noexcept
    : KeepRegisterRequest() {
    *this = ::std::move(from);
  }

  inline KeepRegisterRequest& operator=(const KeepRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepRegisterRequest& operator=(KeepRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeepRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeepRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const KeepRegisterRequest*>(
               &_KeepRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KeepRegisterRequest& a, KeepRegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepRegisterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeepRegisterRequest* New() const final {
    return CreateMaybeMessage<KeepRegisterRequest>(nullptr);
  }

  KeepRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeepRegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeepRegisterRequest& from);
  void MergeFrom(const KeepRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.KeepRegisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServernameFieldNumber = 2,
    kEndpointFieldNumber = 3,
    kServerstateFieldNumber = 7,
    kServeridFieldNumber = 1,
    kServertypeFieldNumber = 4,
    kServerloadFieldNumber = 5,
    kServerstatusFieldNumber = 6,
    kAgentsizeFieldNumber = 8,
  };
  // bytes servername = 2;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // string endpoint = 3;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // bytes serverstate = 7;
  void clear_serverstate();
  const std::string& serverstate() const;
  void set_serverstate(const std::string& value);
  void set_serverstate(std::string&& value);
  void set_serverstate(const char* value);
  void set_serverstate(const void* value, size_t size);
  std::string* mutable_serverstate();
  std::string* release_serverstate();
  void set_allocated_serverstate(std::string* serverstate);
  private:
  const std::string& _internal_serverstate() const;
  void _internal_set_serverstate(const std::string& value);
  std::string* _internal_mutable_serverstate();
  public:

  // uint32 serverid = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 servertype = 4;
  void clear_servertype();
  ::PROTOBUF_NAMESPACE_ID::int32 servertype() const;
  void set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servertype() const;
  void _internal_set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 serverload = 5;
  void clear_serverload();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverload() const;
  void set_serverload(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverload() const;
  void _internal_set_serverload(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 serverstatus = 6;
  void clear_serverstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 serverstatus() const;
  void set_serverstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverstatus() const;
  void _internal_set_serverstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 agentsize = 8;
  void clear_agentsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 agentsize() const;
  void set_agentsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_agentsize() const;
  void _internal_set_agentsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.KeepRegisterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverstate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::int32 servertype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverload_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 agentsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class KeepRegisterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.KeepRegisterResponse) */ {
 public:
  KeepRegisterResponse();
  virtual ~KeepRegisterResponse();

  KeepRegisterResponse(const KeepRegisterResponse& from);
  KeepRegisterResponse(KeepRegisterResponse&& from) noexcept
    : KeepRegisterResponse() {
    *this = ::std::move(from);
  }

  inline KeepRegisterResponse& operator=(const KeepRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepRegisterResponse& operator=(KeepRegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeepRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeepRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const KeepRegisterResponse*>(
               &_KeepRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KeepRegisterResponse& a, KeepRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepRegisterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeepRegisterResponse* New() const final {
    return CreateMaybeMessage<KeepRegisterResponse>(nullptr);
  }

  KeepRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeepRegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeepRegisterResponse& from);
  void MergeFrom(const KeepRegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepRegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.KeepRegisterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentidsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated uint32 agentids = 2;
  int agentids_size() const;
  private:
  int _internal_agentids_size() const;
  public:
  void clear_agentids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_agentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_agentids() const;
  void _internal_add_agentids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_agentids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 agentids(int index) const;
  void set_agentids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_agentids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      agentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_agentids();

  // sint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.KeepRegisterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > agentids_;
  mutable std::atomic<int> _agentids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class UserLoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.UserLoginRequest) */ {
 public:
  UserLoginRequest();
  virtual ~UserLoginRequest();

  UserLoginRequest(const UserLoginRequest& from);
  UserLoginRequest(UserLoginRequest&& from) noexcept
    : UserLoginRequest() {
    *this = ::std::move(from);
  }

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginRequest& operator=(UserLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginRequest* internal_default_instance() {
    return reinterpret_cast<const UserLoginRequest*>(
               &_UserLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserLoginRequest& a, UserLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginRequest* New() const final {
    return CreateMaybeMessage<UserLoginRequest>(nullptr);
  }

  UserLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginRequest& from);
  void MergeFrom(const UserLoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.UserLoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServernameFieldNumber = 1,
    kUseridFieldNumber = 3,
    kServeridFieldNumber = 2,
  };
  // bytes servername = 1;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // uint64 userid = 3;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 serverid = 2;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.UserLoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class UserLogoutRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.UserLogoutRequest) */ {
 public:
  UserLogoutRequest();
  virtual ~UserLogoutRequest();

  UserLogoutRequest(const UserLogoutRequest& from);
  UserLogoutRequest(UserLogoutRequest&& from) noexcept
    : UserLogoutRequest() {
    *this = ::std::move(from);
  }

  inline UserLogoutRequest& operator=(const UserLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogoutRequest& operator=(UserLogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLogoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLogoutRequest* internal_default_instance() {
    return reinterpret_cast<const UserLogoutRequest*>(
               &_UserLogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UserLogoutRequest& a, UserLogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogoutRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLogoutRequest* New() const final {
    return CreateMaybeMessage<UserLogoutRequest>(nullptr);
  }

  UserLogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLogoutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLogoutRequest& from);
  void MergeFrom(const UserLogoutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogoutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.UserLogoutRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServernameFieldNumber = 1,
    kUseridFieldNumber = 2,
  };
  // bytes servername = 1;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // uint64 userid = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:node.UserLogoutRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class LowLoadNodeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.LowLoadNodeRequest) */ {
 public:
  LowLoadNodeRequest();
  virtual ~LowLoadNodeRequest();

  LowLoadNodeRequest(const LowLoadNodeRequest& from);
  LowLoadNodeRequest(LowLoadNodeRequest&& from) noexcept
    : LowLoadNodeRequest() {
    *this = ::std::move(from);
  }

  inline LowLoadNodeRequest& operator=(const LowLoadNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LowLoadNodeRequest& operator=(LowLoadNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LowLoadNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LowLoadNodeRequest* internal_default_instance() {
    return reinterpret_cast<const LowLoadNodeRequest*>(
               &_LowLoadNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LowLoadNodeRequest& a, LowLoadNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LowLoadNodeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LowLoadNodeRequest* New() const final {
    return CreateMaybeMessage<LowLoadNodeRequest>(nullptr);
  }

  LowLoadNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LowLoadNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LowLoadNodeRequest& from);
  void MergeFrom(const LowLoadNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LowLoadNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.LowLoadNodeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServernameFieldNumber = 1,
  };
  // bytes servername = 1;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // @@protoc_insertion_point(class_scope:node.LowLoadNodeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class LowLoadNodeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.LowLoadNodeResponse) */ {
 public:
  LowLoadNodeResponse();
  virtual ~LowLoadNodeResponse();

  LowLoadNodeResponse(const LowLoadNodeResponse& from);
  LowLoadNodeResponse(LowLoadNodeResponse&& from) noexcept
    : LowLoadNodeResponse() {
    *this = ::std::move(from);
  }

  inline LowLoadNodeResponse& operator=(const LowLoadNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LowLoadNodeResponse& operator=(LowLoadNodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LowLoadNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LowLoadNodeResponse* internal_default_instance() {
    return reinterpret_cast<const LowLoadNodeResponse*>(
               &_LowLoadNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LowLoadNodeResponse& a, LowLoadNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LowLoadNodeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LowLoadNodeResponse* New() const final {
    return CreateMaybeMessage<LowLoadNodeResponse>(nullptr);
  }

  LowLoadNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LowLoadNodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LowLoadNodeResponse& from);
  void MergeFrom(const LowLoadNodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LowLoadNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.LowLoadNodeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptaddressFieldNumber = 1,
    kEndpointFieldNumber = 2,
    kServerregionFieldNumber = 3,
  };
  // string acceptaddress = 1;
  void clear_acceptaddress();
  const std::string& acceptaddress() const;
  void set_acceptaddress(const std::string& value);
  void set_acceptaddress(std::string&& value);
  void set_acceptaddress(const char* value);
  void set_acceptaddress(const char* value, size_t size);
  std::string* mutable_acceptaddress();
  std::string* release_acceptaddress();
  void set_allocated_acceptaddress(std::string* acceptaddress);
  private:
  const std::string& _internal_acceptaddress() const;
  void _internal_set_acceptaddress(const std::string& value);
  std::string* _internal_mutable_acceptaddress();
  public:

  // string endpoint = 2;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // uint32 serverregion = 3;
  void clear_serverregion();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion() const;
  void set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverregion() const;
  void _internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.LowLoadNodeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceptaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class RegionLowLoadRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.RegionLowLoadRequest) */ {
 public:
  RegionLowLoadRequest();
  virtual ~RegionLowLoadRequest();

  RegionLowLoadRequest(const RegionLowLoadRequest& from);
  RegionLowLoadRequest(RegionLowLoadRequest&& from) noexcept
    : RegionLowLoadRequest() {
    *this = ::std::move(from);
  }

  inline RegionLowLoadRequest& operator=(const RegionLowLoadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionLowLoadRequest& operator=(RegionLowLoadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegionLowLoadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionLowLoadRequest* internal_default_instance() {
    return reinterpret_cast<const RegionLowLoadRequest*>(
               &_RegionLowLoadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RegionLowLoadRequest& a, RegionLowLoadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionLowLoadRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionLowLoadRequest* New() const final {
    return CreateMaybeMessage<RegionLowLoadRequest>(nullptr);
  }

  RegionLowLoadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionLowLoadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionLowLoadRequest& from);
  void MergeFrom(const RegionLowLoadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionLowLoadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.RegionLowLoadRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServernameFieldNumber = 1,
    kServerregionFieldNumber = 2,
  };
  // bytes servername = 1;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // uint32 serverregion = 2;
  void clear_serverregion();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion() const;
  void set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverregion() const;
  void _internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.RegionLowLoadRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class RegionLowLoadResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.RegionLowLoadResponse) */ {
 public:
  RegionLowLoadResponse();
  virtual ~RegionLowLoadResponse();

  RegionLowLoadResponse(const RegionLowLoadResponse& from);
  RegionLowLoadResponse(RegionLowLoadResponse&& from) noexcept
    : RegionLowLoadResponse() {
    *this = ::std::move(from);
  }

  inline RegionLowLoadResponse& operator=(const RegionLowLoadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionLowLoadResponse& operator=(RegionLowLoadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegionLowLoadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionLowLoadResponse* internal_default_instance() {
    return reinterpret_cast<const RegionLowLoadResponse*>(
               &_RegionLowLoadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RegionLowLoadResponse& a, RegionLowLoadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionLowLoadResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionLowLoadResponse* New() const final {
    return CreateMaybeMessage<RegionLowLoadResponse>(nullptr);
  }

  RegionLowLoadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionLowLoadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionLowLoadResponse& from);
  void MergeFrom(const RegionLowLoadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionLowLoadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.RegionLowLoadResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptaddressFieldNumber = 1,
    kEndpointFieldNumber = 2,
  };
  // string acceptaddress = 1;
  void clear_acceptaddress();
  const std::string& acceptaddress() const;
  void set_acceptaddress(const std::string& value);
  void set_acceptaddress(std::string&& value);
  void set_acceptaddress(const char* value);
  void set_acceptaddress(const char* value, size_t size);
  std::string* mutable_acceptaddress();
  std::string* release_acceptaddress();
  void set_allocated_acceptaddress(std::string* acceptaddress);
  private:
  const std::string& _internal_acceptaddress() const;
  void _internal_set_acceptaddress(const std::string& value);
  std::string* _internal_mutable_acceptaddress();
  public:

  // string endpoint = 2;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // @@protoc_insertion_point(class_scope:node.RegionLowLoadResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceptaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class NodeListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.NodeListRequest) */ {
 public:
  NodeListRequest();
  virtual ~NodeListRequest();

  NodeListRequest(const NodeListRequest& from);
  NodeListRequest(NodeListRequest&& from) noexcept
    : NodeListRequest() {
    *this = ::std::move(from);
  }

  inline NodeListRequest& operator=(const NodeListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeListRequest& operator=(NodeListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeListRequest* internal_default_instance() {
    return reinterpret_cast<const NodeListRequest*>(
               &_NodeListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NodeListRequest& a, NodeListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeListRequest* New() const final {
    return CreateMaybeMessage<NodeListRequest>(nullptr);
  }

  NodeListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeListRequest& from);
  void MergeFrom(const NodeListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.NodeListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServernameFieldNumber = 1,
  };
  // bytes servername = 1;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // @@protoc_insertion_point(class_scope:node.NodeListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class NodeDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.NodeDetail) */ {
 public:
  NodeDetail();
  virtual ~NodeDetail();

  NodeDetail(const NodeDetail& from);
  NodeDetail(NodeDetail&& from) noexcept
    : NodeDetail() {
    *this = ::std::move(from);
  }

  inline NodeDetail& operator=(const NodeDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeDetail& operator=(NodeDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeDetail* internal_default_instance() {
    return reinterpret_cast<const NodeDetail*>(
               &_NodeDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NodeDetail& a, NodeDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeDetail* New() const final {
    return CreateMaybeMessage<NodeDetail>(nullptr);
  }

  NodeDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeDetail& from);
  void MergeFrom(const NodeDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.NodeDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptaddressFieldNumber = 2,
    kServerregionFieldNumber = 1,
    kServerloadFieldNumber = 3,
  };
  // string acceptaddress = 2;
  void clear_acceptaddress();
  const std::string& acceptaddress() const;
  void set_acceptaddress(const std::string& value);
  void set_acceptaddress(std::string&& value);
  void set_acceptaddress(const char* value);
  void set_acceptaddress(const char* value, size_t size);
  std::string* mutable_acceptaddress();
  std::string* release_acceptaddress();
  void set_allocated_acceptaddress(std::string* acceptaddress);
  private:
  const std::string& _internal_acceptaddress() const;
  void _internal_set_acceptaddress(const std::string& value);
  std::string* _internal_mutable_acceptaddress();
  public:

  // uint32 serverregion = 1;
  void clear_serverregion();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion() const;
  void set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverregion() const;
  void _internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 serverload = 3;
  void clear_serverload();
  ::PROTOBUF_NAMESPACE_ID::int32 serverload() const;
  void set_serverload(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverload() const;
  void _internal_set_serverload(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.NodeDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceptaddress_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class NodeListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.NodeListResponse) */ {
 public:
  NodeListResponse();
  virtual ~NodeListResponse();

  NodeListResponse(const NodeListResponse& from);
  NodeListResponse(NodeListResponse&& from) noexcept
    : NodeListResponse() {
    *this = ::std::move(from);
  }

  inline NodeListResponse& operator=(const NodeListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeListResponse& operator=(NodeListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeListResponse* internal_default_instance() {
    return reinterpret_cast<const NodeListResponse*>(
               &_NodeListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(NodeListResponse& a, NodeListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeListResponse* New() const final {
    return CreateMaybeMessage<NodeListResponse>(nullptr);
  }

  NodeListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeListResponse& from);
  void MergeFrom(const NodeListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.NodeListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .node.NodeDetail nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::node::NodeDetail* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeDetail >*
      mutable_nodes();
  private:
  const ::node::NodeDetail& _internal_nodes(int index) const;
  ::node::NodeDetail* _internal_add_nodes();
  public:
  const ::node::NodeDetail& nodes(int index) const;
  ::node::NodeDetail* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeDetail >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:node.NodeListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeDetail > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class GetUserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.GetUserRequest) */ {
 public:
  GetUserRequest();
  virtual ~GetUserRequest();

  GetUserRequest(const GetUserRequest& from);
  GetUserRequest(GetUserRequest&& from) noexcept
    : GetUserRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRequest& operator=(const GetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRequest& operator=(GetUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRequest*>(
               &_GetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetUserRequest& a, GetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserRequest* New() const final {
    return CreateMaybeMessage<GetUserRequest>(nullptr);
  }

  GetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserRequest& from);
  void MergeFrom(const GetUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.GetUserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:node.GetUserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class UserPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.UserPacket) */ {
 public:
  UserPacket();
  virtual ~UserPacket();

  UserPacket(const UserPacket& from);
  UserPacket(UserPacket&& from) noexcept
    : UserPacket() {
    *this = ::std::move(from);
  }

  inline UserPacket& operator=(const UserPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPacket& operator=(UserPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPacket* internal_default_instance() {
    return reinterpret_cast<const UserPacket*>(
               &_UserPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UserPacket& a, UserPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserPacket* New() const final {
    return CreateMaybeMessage<UserPacket>(nullptr);
  }

  UserPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserPacket& from);
  void MergeFrom(const UserPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.UserPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatetimeFieldNumber = 3,
    kUseridFieldNumber = 1,
    kServerregionFieldNumber = 2,
    kLogincountFieldNumber = 4,
    kMapidFieldNumber = 5,
  };
  // string createtime = 3;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // uint64 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 serverregion = 2;
  void clear_serverregion();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion() const;
  void set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverregion() const;
  void _internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 logincount = 4;
  void clear_logincount();
  ::PROTOBUF_NAMESPACE_ID::uint32 logincount() const;
  void set_logincount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_logincount() const;
  void _internal_set_logincount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mapid = 5;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.UserPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 logincount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class GetUserResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.GetUserResponse) */ {
 public:
  GetUserResponse();
  virtual ~GetUserResponse();

  GetUserResponse(const GetUserResponse& from);
  GetUserResponse(GetUserResponse&& from) noexcept
    : GetUserResponse() {
    *this = ::std::move(from);
  }

  inline GetUserResponse& operator=(const GetUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserResponse& operator=(GetUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserResponse*>(
               &_GetUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetUserResponse& a, GetUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserResponse* New() const final {
    return CreateMaybeMessage<GetUserResponse>(nullptr);
  }

  GetUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserResponse& from);
  void MergeFrom(const GetUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.GetUserResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .node.UserPacket rows = 2;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::node::UserPacket* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::UserPacket >*
      mutable_rows();
  private:
  const ::node::UserPacket& _internal_rows(int index) const;
  ::node::UserPacket* _internal_add_rows();
  public:
  const ::node::UserPacket& rows(int index) const;
  ::node::UserPacket* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::UserPacket >&
      rows() const;

  // sint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.GetUserResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::UserPacket > rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class CreateUserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CreateUserRequest) */ {
 public:
  CreateUserRequest();
  virtual ~CreateUserRequest();

  CreateUserRequest(const CreateUserRequest& from);
  CreateUserRequest(CreateUserRequest&& from) noexcept
    : CreateUserRequest() {
    *this = ::std::move(from);
  }

  inline CreateUserRequest& operator=(const CreateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserRequest& operator=(CreateUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateUserRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUserRequest*>(
               &_CreateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CreateUserRequest& a, CreateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateUserRequest* New() const final {
    return CreateMaybeMessage<CreateUserRequest>(nullptr);
  }

  CreateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateUserRequest& from);
  void MergeFrom(const CreateUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CreateUserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kMaxsizeFieldNumber = 2,
    kMapidFieldNumber = 3,
  };
  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 maxsize = 2;
  void clear_maxsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxsize() const;
  void set_maxsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxsize() const;
  void _internal_set_maxsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mapid = 3;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.CreateUserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class CreateUserResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CreateUserResponse) */ {
 public:
  CreateUserResponse();
  virtual ~CreateUserResponse();

  CreateUserResponse(const CreateUserResponse& from);
  CreateUserResponse(CreateUserResponse&& from) noexcept
    : CreateUserResponse() {
    *this = ::std::move(from);
  }

  inline CreateUserResponse& operator=(const CreateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserResponse& operator=(CreateUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateUserResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUserResponse*>(
               &_CreateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CreateUserResponse& a, CreateUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateUserResponse* New() const final {
    return CreateMaybeMessage<CreateUserResponse>(nullptr);
  }

  CreateUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateUserResponse& from);
  void MergeFrom(const CreateUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CreateUserResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // .node.UserPacket row = 2;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  const ::node::UserPacket& row() const;
  ::node::UserPacket* release_row();
  ::node::UserPacket* mutable_row();
  void set_allocated_row(::node::UserPacket* row);
  private:
  const ::node::UserPacket& _internal_row() const;
  ::node::UserPacket* _internal_mutable_row();
  public:

  // sint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.CreateUserResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::node::UserPacket* row_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class CheckUserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CheckUserRequest) */ {
 public:
  CheckUserRequest();
  virtual ~CheckUserRequest();

  CheckUserRequest(const CheckUserRequest& from);
  CheckUserRequest(CheckUserRequest&& from) noexcept
    : CheckUserRequest() {
    *this = ::std::move(from);
  }

  inline CheckUserRequest& operator=(const CheckUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUserRequest& operator=(CheckUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserRequest* internal_default_instance() {
    return reinterpret_cast<const CheckUserRequest*>(
               &_CheckUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CheckUserRequest& a, CheckUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckUserRequest* New() const final {
    return CreateMaybeMessage<CheckUserRequest>(nullptr);
  }

  CheckUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckUserRequest& from);
  void MergeFrom(const CheckUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CheckUserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // uint64 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:node.CheckUserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class CheckUserResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CheckUserResponse) */ {
 public:
  CheckUserResponse();
  virtual ~CheckUserResponse();

  CheckUserResponse(const CheckUserResponse& from);
  CheckUserResponse(CheckUserResponse&& from) noexcept
    : CheckUserResponse() {
    *this = ::std::move(from);
  }

  inline CheckUserResponse& operator=(const CheckUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUserResponse& operator=(CheckUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserResponse* internal_default_instance() {
    return reinterpret_cast<const CheckUserResponse*>(
               &_CheckUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CheckUserResponse& a, CheckUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUserResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckUserResponse* New() const final {
    return CreateMaybeMessage<CheckUserResponse>(nullptr);
  }

  CheckUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckUserResponse& from);
  void MergeFrom(const CheckUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CheckUserResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatetimeFieldNumber = 3,
    kAccountFieldNumber = 2,
    kResultFieldNumber = 1,
    kLogincountFieldNumber = 4,
    kServerregionFieldNumber = 5,
    kMapidFieldNumber = 6,
  };
  // string createtime = 3;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // uint64 account = 2;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 logincount = 4;
  void clear_logincount();
  ::PROTOBUF_NAMESPACE_ID::uint32 logincount() const;
  void set_logincount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_logincount() const;
  void _internal_set_logincount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serverregion = 5;
  void clear_serverregion();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion() const;
  void set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverregion() const;
  void _internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mapid = 6;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.CheckUserResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 logincount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.UpdateUserRequest) */ {
 public:
  UpdateUserRequest();
  virtual ~UpdateUserRequest();

  UpdateUserRequest(const UpdateUserRequest& from);
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserRequest* New() const final {
    return CreateMaybeMessage<UpdateUserRequest>(nullptr);
  }

  UpdateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateUserRequest& from);
  void MergeFrom(const UpdateUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.UpdateUserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kServerregionFieldNumber = 2,
    kMapidFieldNumber = 3,
    kLoginFieldNumber = 4,
  };
  // uint64 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 serverregion = 2;
  void clear_serverregion();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion() const;
  void set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverregion() const;
  void _internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mapid = 3;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 login = 4;
  void clear_login();
  ::PROTOBUF_NAMESPACE_ID::int32 login() const;
  void set_login(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_login() const;
  void _internal_set_login(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.UpdateUserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverregion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.UpdateUserResponse) */ {
 public:
  UpdateUserResponse();
  virtual ~UpdateUserResponse();

  UpdateUserResponse(const UpdateUserResponse& from);
  UpdateUserResponse(UpdateUserResponse&& from) noexcept
    : UpdateUserResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUserResponse& operator=(const UpdateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserResponse& operator=(UpdateUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateUserResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUserResponse*>(
               &_UpdateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UpdateUserResponse& a, UpdateUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserResponse* New() const final {
    return CreateMaybeMessage<UpdateUserResponse>(nullptr);
  }

  UpdateUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateUserResponse& from);
  void MergeFrom(const UpdateUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.UpdateUserResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // sint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.UpdateUserResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.DeleteUserRequest) */ {
 public:
  DeleteUserRequest();
  virtual ~DeleteUserRequest();

  DeleteUserRequest(const DeleteUserRequest& from);
  DeleteUserRequest(DeleteUserRequest&& from) noexcept
    : DeleteUserRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUserRequest& operator=(const DeleteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRequest& operator=(DeleteUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteUserRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRequest*>(
               &_DeleteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeleteUserRequest& a, DeleteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserRequest* New() const final {
    return CreateMaybeMessage<DeleteUserRequest>(nullptr);
  }

  DeleteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteUserRequest& from);
  void MergeFrom(const DeleteUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.DeleteUserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // uint64 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:node.DeleteUserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.DeleteUserResponse) */ {
 public:
  DeleteUserResponse();
  virtual ~DeleteUserResponse();

  DeleteUserResponse(const DeleteUserResponse& from);
  DeleteUserResponse(DeleteUserResponse&& from) noexcept
    : DeleteUserResponse() {
    *this = ::std::move(from);
  }

  inline DeleteUserResponse& operator=(const DeleteUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserResponse& operator=(DeleteUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteUserResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteUserResponse*>(
               &_DeleteUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DeleteUserResponse& a, DeleteUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserResponse* New() const final {
    return CreateMaybeMessage<DeleteUserResponse>(nullptr);
  }

  DeleteUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteUserResponse& from);
  void MergeFrom(const DeleteUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.DeleteUserResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // sint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.DeleteUserResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class EndPointRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.EndPointRequest) */ {
 public:
  EndPointRequest();
  virtual ~EndPointRequest();

  EndPointRequest(const EndPointRequest& from);
  EndPointRequest(EndPointRequest&& from) noexcept
    : EndPointRequest() {
    *this = ::std::move(from);
  }

  inline EndPointRequest& operator=(const EndPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPointRequest& operator=(EndPointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndPointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndPointRequest* internal_default_instance() {
    return reinterpret_cast<const EndPointRequest*>(
               &_EndPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(EndPointRequest& a, EndPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPointRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndPointRequest* New() const final {
    return CreateMaybeMessage<EndPointRequest>(nullptr);
  }

  EndPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndPointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndPointRequest& from);
  void MergeFrom(const EndPointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.EndPointRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServeridFieldNumber = 1,
  };
  // uint32 serverid = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.EndPointRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class EndPointResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.EndPointResponse) */ {
 public:
  EndPointResponse();
  virtual ~EndPointResponse();

  EndPointResponse(const EndPointResponse& from);
  EndPointResponse(EndPointResponse&& from) noexcept
    : EndPointResponse() {
    *this = ::std::move(from);
  }

  inline EndPointResponse& operator=(const EndPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPointResponse& operator=(EndPointResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndPointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndPointResponse* internal_default_instance() {
    return reinterpret_cast<const EndPointResponse*>(
               &_EndPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(EndPointResponse& a, EndPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPointResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndPointResponse* New() const final {
    return CreateMaybeMessage<EndPointResponse>(nullptr);
  }

  EndPointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndPointResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndPointResponse& from);
  void MergeFrom(const EndPointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPointResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.EndPointResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointFieldNumber = 1,
  };
  // string endpoint = 1;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // @@protoc_insertion_point(class_scope:node.EndPointResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class SeizeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.SeizeRequest) */ {
 public:
  SeizeRequest();
  virtual ~SeizeRequest();

  SeizeRequest(const SeizeRequest& from);
  SeizeRequest(SeizeRequest&& from) noexcept
    : SeizeRequest() {
    *this = ::std::move(from);
  }

  inline SeizeRequest& operator=(const SeizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeizeRequest& operator=(SeizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeizeRequest* internal_default_instance() {
    return reinterpret_cast<const SeizeRequest*>(
               &_SeizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SeizeRequest& a, SeizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SeizeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeizeRequest* New() const final {
    return CreateMaybeMessage<SeizeRequest>(nullptr);
  }

  SeizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeizeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeizeRequest& from);
  void MergeFrom(const SeizeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.SeizeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServernameFieldNumber = 1,
    kUseridFieldNumber = 2,
    kLoginFieldNumber = 3,
  };
  // bytes servername = 1;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // uint64 userid = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 login = 3;
  void clear_login();
  ::PROTOBUF_NAMESPACE_ID::int32 login() const;
  void set_login(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_login() const;
  void _internal_set_login(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.SeizeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class SeizeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.SeizeResponse) */ {
 public:
  SeizeResponse();
  virtual ~SeizeResponse();

  SeizeResponse(const SeizeResponse& from);
  SeizeResponse(SeizeResponse&& from) noexcept
    : SeizeResponse() {
    *this = ::std::move(from);
  }

  inline SeizeResponse& operator=(const SeizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeizeResponse& operator=(SeizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeizeResponse* internal_default_instance() {
    return reinterpret_cast<const SeizeResponse*>(
               &_SeizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SeizeResponse& a, SeizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SeizeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeizeResponse* New() const final {
    return CreateMaybeMessage<SeizeResponse>(nullptr);
  }

  SeizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeizeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeizeResponse& from);
  void MergeFrom(const SeizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.SeizeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptaddressFieldNumber = 1,
    kServeridFieldNumber = 2,
    kMapidFieldNumber = 3,
  };
  // string acceptaddress = 1;
  void clear_acceptaddress();
  const std::string& acceptaddress() const;
  void set_acceptaddress(const std::string& value);
  void set_acceptaddress(std::string&& value);
  void set_acceptaddress(const char* value);
  void set_acceptaddress(const char* value, size_t size);
  std::string* mutable_acceptaddress();
  std::string* release_acceptaddress();
  void set_allocated_acceptaddress(std::string* acceptaddress);
  private:
  const std::string& _internal_acceptaddress() const;
  void _internal_set_acceptaddress(const std::string& value);
  std::string* _internal_mutable_acceptaddress();
  public:

  // uint32 serverid = 2;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mapid = 3;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.SeizeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceptaddress_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class FreeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.FreeRequest) */ {
 public:
  FreeRequest();
  virtual ~FreeRequest();

  FreeRequest(const FreeRequest& from);
  FreeRequest(FreeRequest&& from) noexcept
    : FreeRequest() {
    *this = ::std::move(from);
  }

  inline FreeRequest& operator=(const FreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreeRequest& operator=(FreeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FreeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreeRequest* internal_default_instance() {
    return reinterpret_cast<const FreeRequest*>(
               &_FreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(FreeRequest& a, FreeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FreeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreeRequest* New() const final {
    return CreateMaybeMessage<FreeRequest>(nullptr);
  }

  FreeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreeRequest& from);
  void MergeFrom(const FreeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.FreeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kLogoutFieldNumber = 2,
  };
  // uint64 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 logout = 2;
  void clear_logout();
  ::PROTOBUF_NAMESPACE_ID::int32 logout() const;
  void set_logout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logout() const;
  void _internal_set_logout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.FreeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 logout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class FreeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.FreeResponse) */ {
 public:
  FreeResponse();
  virtual ~FreeResponse();

  FreeResponse(const FreeResponse& from);
  FreeResponse(FreeResponse&& from) noexcept
    : FreeResponse() {
    *this = ::std::move(from);
  }

  inline FreeResponse& operator=(const FreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreeResponse& operator=(FreeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FreeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreeResponse* internal_default_instance() {
    return reinterpret_cast<const FreeResponse*>(
               &_FreeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FreeResponse& a, FreeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FreeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreeResponse* New() const final {
    return CreateMaybeMessage<FreeResponse>(nullptr);
  }

  FreeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreeResponse& from);
  void MergeFrom(const FreeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.FreeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // sint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.FreeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// -------------------------------------------------------------------

class GuidResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.GuidResponse) */ {
 public:
  GuidResponse();
  virtual ~GuidResponse();

  GuidResponse(const GuidResponse& from);
  GuidResponse(GuidResponse&& from) noexcept
    : GuidResponse() {
    *this = ::std::move(from);
  }

  inline GuidResponse& operator=(const GuidResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuidResponse& operator=(GuidResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuidResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuidResponse* internal_default_instance() {
    return reinterpret_cast<const GuidResponse*>(
               &_GuidResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GuidResponse& a, GuidResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GuidResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuidResponse* New() const final {
    return CreateMaybeMessage<GuidResponse>(nullptr);
  }

  GuidResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuidResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuidResponse& from);
  void MergeFrom(const GuidResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuidResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.GuidResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlcentre_2eproto);
    return ::descriptor_table_controlcentre_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:node.GuidResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlcentre_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlCentreVoid

// -------------------------------------------------------------------

// RegisterRequest

// int32 servertype = 1;
inline void RegisterRequest::clear_servertype() {
  servertype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterRequest::_internal_servertype() const {
  return servertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterRequest::servertype() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.servertype)
  return _internal_servertype();
}
inline void RegisterRequest::_internal_set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  servertype_ = value;
}
inline void RegisterRequest::set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servertype(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.servertype)
}

// string endpoint = 2;
inline void RegisterRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.endpoint)
  return _internal_endpoint();
}
inline void RegisterRequest::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.endpoint)
}
inline std::string* RegisterRequest::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:node.RegisterRequest.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& RegisterRequest::_internal_endpoint() const {
  return endpoint_.GetNoArena();
}
inline void RegisterRequest::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterRequest::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.RegisterRequest.endpoint)
}
inline void RegisterRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.RegisterRequest.endpoint)
}
inline void RegisterRequest::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.RegisterRequest.endpoint)
}
inline std::string* RegisterRequest::_internal_mutable_endpoint() {
  
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:node.RegisterRequest.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:node.RegisterRequest.endpoint)
}

// bytes servername = 3;
inline void RegisterRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterRequest::servername() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.servername)
  return _internal_servername();
}
inline void RegisterRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.servername)
}
inline std::string* RegisterRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:node.RegisterRequest.servername)
  return _internal_mutable_servername();
}
inline const std::string& RegisterRequest::_internal_servername() const {
  return servername_.GetNoArena();
}
inline void RegisterRequest::_internal_set_servername(const std::string& value) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterRequest::set_servername(std::string&& value) {
  
  servername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.RegisterRequest.servername)
}
inline void RegisterRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.RegisterRequest.servername)
}
inline void RegisterRequest::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.RegisterRequest.servername)
}
inline std::string* RegisterRequest::_internal_mutable_servername() {
  
  return servername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterRequest::release_servername() {
  // @@protoc_insertion_point(field_release:node.RegisterRequest.servername)
  
  return servername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:node.RegisterRequest.servername)
}

// uint32 serverid = 4;
inline void RegisterRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterRequest::serverid() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.serverid)
  return _internal_serverid();
}
inline void RegisterRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void RegisterRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.serverid)
}

// uint32 serverregion = 5;
inline void RegisterRequest::clear_serverregion() {
  serverregion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterRequest::_internal_serverregion() const {
  return serverregion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterRequest::serverregion() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.serverregion)
  return _internal_serverregion();
}
inline void RegisterRequest::_internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverregion_ = value;
}
inline void RegisterRequest::set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverregion(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.serverregion)
}

// bytes projectname = 6;
inline void RegisterRequest::clear_projectname() {
  projectname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterRequest::projectname() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.projectname)
  return _internal_projectname();
}
inline void RegisterRequest::set_projectname(const std::string& value) {
  _internal_set_projectname(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.projectname)
}
inline std::string* RegisterRequest::mutable_projectname() {
  // @@protoc_insertion_point(field_mutable:node.RegisterRequest.projectname)
  return _internal_mutable_projectname();
}
inline const std::string& RegisterRequest::_internal_projectname() const {
  return projectname_.GetNoArena();
}
inline void RegisterRequest::_internal_set_projectname(const std::string& value) {
  
  projectname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterRequest::set_projectname(std::string&& value) {
  
  projectname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.RegisterRequest.projectname)
}
inline void RegisterRequest::set_projectname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  projectname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.RegisterRequest.projectname)
}
inline void RegisterRequest::set_projectname(const void* value, size_t size) {
  
  projectname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.RegisterRequest.projectname)
}
inline std::string* RegisterRequest::_internal_mutable_projectname() {
  
  return projectname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterRequest::release_projectname() {
  // @@protoc_insertion_point(field_release:node.RegisterRequest.projectname)
  
  return projectname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_projectname(std::string* projectname) {
  if (projectname != nullptr) {
    
  } else {
    
  }
  projectname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projectname);
  // @@protoc_insertion_point(field_set_allocated:node.RegisterRequest.projectname)
}

// string acceptaddress = 7;
inline void RegisterRequest::clear_acceptaddress() {
  acceptaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterRequest::acceptaddress() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.acceptaddress)
  return _internal_acceptaddress();
}
inline void RegisterRequest::set_acceptaddress(const std::string& value) {
  _internal_set_acceptaddress(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.acceptaddress)
}
inline std::string* RegisterRequest::mutable_acceptaddress() {
  // @@protoc_insertion_point(field_mutable:node.RegisterRequest.acceptaddress)
  return _internal_mutable_acceptaddress();
}
inline const std::string& RegisterRequest::_internal_acceptaddress() const {
  return acceptaddress_.GetNoArena();
}
inline void RegisterRequest::_internal_set_acceptaddress(const std::string& value) {
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterRequest::set_acceptaddress(std::string&& value) {
  
  acceptaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.RegisterRequest.acceptaddress)
}
inline void RegisterRequest::set_acceptaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.RegisterRequest.acceptaddress)
}
inline void RegisterRequest::set_acceptaddress(const char* value, size_t size) {
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.RegisterRequest.acceptaddress)
}
inline std::string* RegisterRequest::_internal_mutable_acceptaddress() {
  
  return acceptaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterRequest::release_acceptaddress() {
  // @@protoc_insertion_point(field_release:node.RegisterRequest.acceptaddress)
  
  return acceptaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_acceptaddress(std::string* acceptaddress) {
  if (acceptaddress != nullptr) {
    
  } else {
    
  }
  acceptaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceptaddress);
  // @@protoc_insertion_point(field_set_allocated:node.RegisterRequest.acceptaddress)
}

// bytes processpath = 8;
inline void RegisterRequest::clear_processpath() {
  processpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterRequest::processpath() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.processpath)
  return _internal_processpath();
}
inline void RegisterRequest::set_processpath(const std::string& value) {
  _internal_set_processpath(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.processpath)
}
inline std::string* RegisterRequest::mutable_processpath() {
  // @@protoc_insertion_point(field_mutable:node.RegisterRequest.processpath)
  return _internal_mutable_processpath();
}
inline const std::string& RegisterRequest::_internal_processpath() const {
  return processpath_.GetNoArena();
}
inline void RegisterRequest::_internal_set_processpath(const std::string& value) {
  
  processpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterRequest::set_processpath(std::string&& value) {
  
  processpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.RegisterRequest.processpath)
}
inline void RegisterRequest::set_processpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.RegisterRequest.processpath)
}
inline void RegisterRequest::set_processpath(const void* value, size_t size) {
  
  processpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.RegisterRequest.processpath)
}
inline std::string* RegisterRequest::_internal_mutable_processpath() {
  
  return processpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterRequest::release_processpath() {
  // @@protoc_insertion_point(field_release:node.RegisterRequest.processpath)
  
  return processpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_processpath(std::string* processpath) {
  if (processpath != nullptr) {
    
  } else {
    
  }
  processpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processpath);
  // @@protoc_insertion_point(field_set_allocated:node.RegisterRequest.processpath)
}

// uint32 servantid = 9;
inline void RegisterRequest::clear_servantid() {
  servantid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterRequest::_internal_servantid() const {
  return servantid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterRequest::servantid() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.servantid)
  return _internal_servantid();
}
inline void RegisterRequest::_internal_set_servantid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  servantid_ = value;
}
inline void RegisterRequest::set_servantid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servantid(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.servantid)
}

// uint32 agentsize = 10;
inline void RegisterRequest::clear_agentsize() {
  agentsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterRequest::_internal_agentsize() const {
  return agentsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterRequest::agentsize() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.agentsize)
  return _internal_agentsize();
}
inline void RegisterRequest::_internal_set_agentsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  agentsize_ = value;
}
inline void RegisterRequest::set_agentsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_agentsize(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.agentsize)
}

// bool routeserver = 11;
inline void RegisterRequest::clear_routeserver() {
  routeserver_ = false;
}
inline bool RegisterRequest::_internal_routeserver() const {
  return routeserver_;
}
inline bool RegisterRequest::routeserver() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.routeserver)
  return _internal_routeserver();
}
inline void RegisterRequest::_internal_set_routeserver(bool value) {
  
  routeserver_ = value;
}
inline void RegisterRequest::set_routeserver(bool value) {
  _internal_set_routeserver(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.routeserver)
}

// uint64 routeaddressid = 12;
inline void RegisterRequest::clear_routeaddressid() {
  routeaddressid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RegisterRequest::_internal_routeaddressid() const {
  return routeaddressid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RegisterRequest::routeaddressid() const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.routeaddressid)
  return _internal_routeaddressid();
}
inline void RegisterRequest::_internal_set_routeaddressid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  routeaddressid_ = value;
}
inline void RegisterRequest::set_routeaddressid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_routeaddressid(value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.routeaddressid)
}

// repeated uint64 routeuserids = 13;
inline int RegisterRequest::_internal_routeuserids_size() const {
  return routeuserids_.size();
}
inline int RegisterRequest::routeuserids_size() const {
  return _internal_routeuserids_size();
}
inline void RegisterRequest::clear_routeuserids() {
  routeuserids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RegisterRequest::_internal_routeuserids(int index) const {
  return routeuserids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RegisterRequest::routeuserids(int index) const {
  // @@protoc_insertion_point(field_get:node.RegisterRequest.routeuserids)
  return _internal_routeuserids(index);
}
inline void RegisterRequest::set_routeuserids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  routeuserids_.Set(index, value);
  // @@protoc_insertion_point(field_set:node.RegisterRequest.routeuserids)
}
inline void RegisterRequest::_internal_add_routeuserids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  routeuserids_.Add(value);
}
inline void RegisterRequest::add_routeuserids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_routeuserids(value);
  // @@protoc_insertion_point(field_add:node.RegisterRequest.routeuserids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RegisterRequest::_internal_routeuserids() const {
  return routeuserids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RegisterRequest::routeuserids() const {
  // @@protoc_insertion_point(field_list:node.RegisterRequest.routeuserids)
  return _internal_routeuserids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RegisterRequest::_internal_mutable_routeuserids() {
  return &routeuserids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RegisterRequest::mutable_routeuserids() {
  // @@protoc_insertion_point(field_mutable_list:node.RegisterRequest.routeuserids)
  return _internal_mutable_routeuserids();
}

// -------------------------------------------------------------------

// RegisterResponse

// sint32 result = 1;
inline void RegisterResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::result() const {
  // @@protoc_insertion_point(field_get:node.RegisterResponse.result)
  return _internal_result();
}
inline void RegisterResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void RegisterResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.RegisterResponse.result)
}

// repeated uint32 agentids = 2;
inline int RegisterResponse::_internal_agentids_size() const {
  return agentids_.size();
}
inline int RegisterResponse::agentids_size() const {
  return _internal_agentids_size();
}
inline void RegisterResponse::clear_agentids() {
  agentids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterResponse::_internal_agentids(int index) const {
  return agentids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterResponse::agentids(int index) const {
  // @@protoc_insertion_point(field_get:node.RegisterResponse.agentids)
  return _internal_agentids(index);
}
inline void RegisterResponse::set_agentids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  agentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:node.RegisterResponse.agentids)
}
inline void RegisterResponse::_internal_add_agentids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  agentids_.Add(value);
}
inline void RegisterResponse::add_agentids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_agentids(value);
  // @@protoc_insertion_point(field_add:node.RegisterResponse.agentids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RegisterResponse::_internal_agentids() const {
  return agentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RegisterResponse::agentids() const {
  // @@protoc_insertion_point(field_list:node.RegisterResponse.agentids)
  return _internal_agentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RegisterResponse::_internal_mutable_agentids() {
  return &agentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RegisterResponse::mutable_agentids() {
  // @@protoc_insertion_point(field_mutable_list:node.RegisterResponse.agentids)
  return _internal_mutable_agentids();
}

// -------------------------------------------------------------------

// RemoveRequest

// bytes servername = 1;
inline void RemoveRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveRequest::servername() const {
  // @@protoc_insertion_point(field_get:node.RemoveRequest.servername)
  return _internal_servername();
}
inline void RemoveRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:node.RemoveRequest.servername)
}
inline std::string* RemoveRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:node.RemoveRequest.servername)
  return _internal_mutable_servername();
}
inline const std::string& RemoveRequest::_internal_servername() const {
  return servername_.GetNoArena();
}
inline void RemoveRequest::_internal_set_servername(const std::string& value) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveRequest::set_servername(std::string&& value) {
  
  servername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.RemoveRequest.servername)
}
inline void RemoveRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.RemoveRequest.servername)
}
inline void RemoveRequest::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.RemoveRequest.servername)
}
inline std::string* RemoveRequest::_internal_mutable_servername() {
  
  return servername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveRequest::release_servername() {
  // @@protoc_insertion_point(field_release:node.RemoveRequest.servername)
  
  return servername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:node.RemoveRequest.servername)
}

// uint32 serverid = 2;
inline void RemoveRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveRequest::serverid() const {
  // @@protoc_insertion_point(field_get:node.RemoveRequest.serverid)
  return _internal_serverid();
}
inline void RemoveRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void RemoveRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:node.RemoveRequest.serverid)
}

// int32 servertype = 3;
inline void RemoveRequest::clear_servertype() {
  servertype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveRequest::_internal_servertype() const {
  return servertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveRequest::servertype() const {
  // @@protoc_insertion_point(field_get:node.RemoveRequest.servertype)
  return _internal_servertype();
}
inline void RemoveRequest::_internal_set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  servertype_ = value;
}
inline void RemoveRequest::set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servertype(value);
  // @@protoc_insertion_point(field_set:node.RemoveRequest.servertype)
}

// -------------------------------------------------------------------

// RemoveResponse

// sint32 result = 1;
inline void RemoveResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveResponse::result() const {
  // @@protoc_insertion_point(field_get:node.RemoveResponse.result)
  return _internal_result();
}
inline void RemoveResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void RemoveResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.RemoveResponse.result)
}

// -------------------------------------------------------------------

// KeepRegisterRequest

// uint32 serverid = 1;
inline void KeepRegisterRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeepRegisterRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeepRegisterRequest::serverid() const {
  // @@protoc_insertion_point(field_get:node.KeepRegisterRequest.serverid)
  return _internal_serverid();
}
inline void KeepRegisterRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void KeepRegisterRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:node.KeepRegisterRequest.serverid)
}

// bytes servername = 2;
inline void KeepRegisterRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeepRegisterRequest::servername() const {
  // @@protoc_insertion_point(field_get:node.KeepRegisterRequest.servername)
  return _internal_servername();
}
inline void KeepRegisterRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:node.KeepRegisterRequest.servername)
}
inline std::string* KeepRegisterRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:node.KeepRegisterRequest.servername)
  return _internal_mutable_servername();
}
inline const std::string& KeepRegisterRequest::_internal_servername() const {
  return servername_.GetNoArena();
}
inline void KeepRegisterRequest::_internal_set_servername(const std::string& value) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeepRegisterRequest::set_servername(std::string&& value) {
  
  servername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.KeepRegisterRequest.servername)
}
inline void KeepRegisterRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.KeepRegisterRequest.servername)
}
inline void KeepRegisterRequest::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.KeepRegisterRequest.servername)
}
inline std::string* KeepRegisterRequest::_internal_mutable_servername() {
  
  return servername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeepRegisterRequest::release_servername() {
  // @@protoc_insertion_point(field_release:node.KeepRegisterRequest.servername)
  
  return servername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeepRegisterRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:node.KeepRegisterRequest.servername)
}

// string endpoint = 3;
inline void KeepRegisterRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeepRegisterRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:node.KeepRegisterRequest.endpoint)
  return _internal_endpoint();
}
inline void KeepRegisterRequest::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:node.KeepRegisterRequest.endpoint)
}
inline std::string* KeepRegisterRequest::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:node.KeepRegisterRequest.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& KeepRegisterRequest::_internal_endpoint() const {
  return endpoint_.GetNoArena();
}
inline void KeepRegisterRequest::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeepRegisterRequest::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.KeepRegisterRequest.endpoint)
}
inline void KeepRegisterRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.KeepRegisterRequest.endpoint)
}
inline void KeepRegisterRequest::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.KeepRegisterRequest.endpoint)
}
inline std::string* KeepRegisterRequest::_internal_mutable_endpoint() {
  
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeepRegisterRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:node.KeepRegisterRequest.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeepRegisterRequest::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:node.KeepRegisterRequest.endpoint)
}

// int32 servertype = 4;
inline void KeepRegisterRequest::clear_servertype() {
  servertype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepRegisterRequest::_internal_servertype() const {
  return servertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepRegisterRequest::servertype() const {
  // @@protoc_insertion_point(field_get:node.KeepRegisterRequest.servertype)
  return _internal_servertype();
}
inline void KeepRegisterRequest::_internal_set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  servertype_ = value;
}
inline void KeepRegisterRequest::set_servertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servertype(value);
  // @@protoc_insertion_point(field_set:node.KeepRegisterRequest.servertype)
}

// uint32 serverload = 5;
inline void KeepRegisterRequest::clear_serverload() {
  serverload_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeepRegisterRequest::_internal_serverload() const {
  return serverload_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeepRegisterRequest::serverload() const {
  // @@protoc_insertion_point(field_get:node.KeepRegisterRequest.serverload)
  return _internal_serverload();
}
inline void KeepRegisterRequest::_internal_set_serverload(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverload_ = value;
}
inline void KeepRegisterRequest::set_serverload(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverload(value);
  // @@protoc_insertion_point(field_set:node.KeepRegisterRequest.serverload)
}

// int32 serverstatus = 6;
inline void KeepRegisterRequest::clear_serverstatus() {
  serverstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepRegisterRequest::_internal_serverstatus() const {
  return serverstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepRegisterRequest::serverstatus() const {
  // @@protoc_insertion_point(field_get:node.KeepRegisterRequest.serverstatus)
  return _internal_serverstatus();
}
inline void KeepRegisterRequest::_internal_set_serverstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverstatus_ = value;
}
inline void KeepRegisterRequest::set_serverstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverstatus(value);
  // @@protoc_insertion_point(field_set:node.KeepRegisterRequest.serverstatus)
}

// bytes serverstate = 7;
inline void KeepRegisterRequest::clear_serverstate() {
  serverstate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeepRegisterRequest::serverstate() const {
  // @@protoc_insertion_point(field_get:node.KeepRegisterRequest.serverstate)
  return _internal_serverstate();
}
inline void KeepRegisterRequest::set_serverstate(const std::string& value) {
  _internal_set_serverstate(value);
  // @@protoc_insertion_point(field_set:node.KeepRegisterRequest.serverstate)
}
inline std::string* KeepRegisterRequest::mutable_serverstate() {
  // @@protoc_insertion_point(field_mutable:node.KeepRegisterRequest.serverstate)
  return _internal_mutable_serverstate();
}
inline const std::string& KeepRegisterRequest::_internal_serverstate() const {
  return serverstate_.GetNoArena();
}
inline void KeepRegisterRequest::_internal_set_serverstate(const std::string& value) {
  
  serverstate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeepRegisterRequest::set_serverstate(std::string&& value) {
  
  serverstate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.KeepRegisterRequest.serverstate)
}
inline void KeepRegisterRequest::set_serverstate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverstate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.KeepRegisterRequest.serverstate)
}
inline void KeepRegisterRequest::set_serverstate(const void* value, size_t size) {
  
  serverstate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.KeepRegisterRequest.serverstate)
}
inline std::string* KeepRegisterRequest::_internal_mutable_serverstate() {
  
  return serverstate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeepRegisterRequest::release_serverstate() {
  // @@protoc_insertion_point(field_release:node.KeepRegisterRequest.serverstate)
  
  return serverstate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeepRegisterRequest::set_allocated_serverstate(std::string* serverstate) {
  if (serverstate != nullptr) {
    
  } else {
    
  }
  serverstate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverstate);
  // @@protoc_insertion_point(field_set_allocated:node.KeepRegisterRequest.serverstate)
}

// uint32 agentsize = 8;
inline void KeepRegisterRequest::clear_agentsize() {
  agentsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeepRegisterRequest::_internal_agentsize() const {
  return agentsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeepRegisterRequest::agentsize() const {
  // @@protoc_insertion_point(field_get:node.KeepRegisterRequest.agentsize)
  return _internal_agentsize();
}
inline void KeepRegisterRequest::_internal_set_agentsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  agentsize_ = value;
}
inline void KeepRegisterRequest::set_agentsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_agentsize(value);
  // @@protoc_insertion_point(field_set:node.KeepRegisterRequest.agentsize)
}

// -------------------------------------------------------------------

// KeepRegisterResponse

// sint32 result = 1;
inline void KeepRegisterResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepRegisterResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepRegisterResponse::result() const {
  // @@protoc_insertion_point(field_get:node.KeepRegisterResponse.result)
  return _internal_result();
}
inline void KeepRegisterResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void KeepRegisterResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.KeepRegisterResponse.result)
}

// repeated uint32 agentids = 2;
inline int KeepRegisterResponse::_internal_agentids_size() const {
  return agentids_.size();
}
inline int KeepRegisterResponse::agentids_size() const {
  return _internal_agentids_size();
}
inline void KeepRegisterResponse::clear_agentids() {
  agentids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeepRegisterResponse::_internal_agentids(int index) const {
  return agentids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeepRegisterResponse::agentids(int index) const {
  // @@protoc_insertion_point(field_get:node.KeepRegisterResponse.agentids)
  return _internal_agentids(index);
}
inline void KeepRegisterResponse::set_agentids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  agentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:node.KeepRegisterResponse.agentids)
}
inline void KeepRegisterResponse::_internal_add_agentids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  agentids_.Add(value);
}
inline void KeepRegisterResponse::add_agentids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_agentids(value);
  // @@protoc_insertion_point(field_add:node.KeepRegisterResponse.agentids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
KeepRegisterResponse::_internal_agentids() const {
  return agentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
KeepRegisterResponse::agentids() const {
  // @@protoc_insertion_point(field_list:node.KeepRegisterResponse.agentids)
  return _internal_agentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
KeepRegisterResponse::_internal_mutable_agentids() {
  return &agentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
KeepRegisterResponse::mutable_agentids() {
  // @@protoc_insertion_point(field_mutable_list:node.KeepRegisterResponse.agentids)
  return _internal_mutable_agentids();
}

// -------------------------------------------------------------------

// UserLoginRequest

// bytes servername = 1;
inline void UserLoginRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLoginRequest::servername() const {
  // @@protoc_insertion_point(field_get:node.UserLoginRequest.servername)
  return _internal_servername();
}
inline void UserLoginRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:node.UserLoginRequest.servername)
}
inline std::string* UserLoginRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:node.UserLoginRequest.servername)
  return _internal_mutable_servername();
}
inline const std::string& UserLoginRequest::_internal_servername() const {
  return servername_.GetNoArena();
}
inline void UserLoginRequest::_internal_set_servername(const std::string& value) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserLoginRequest::set_servername(std::string&& value) {
  
  servername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.UserLoginRequest.servername)
}
inline void UserLoginRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.UserLoginRequest.servername)
}
inline void UserLoginRequest::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.UserLoginRequest.servername)
}
inline std::string* UserLoginRequest::_internal_mutable_servername() {
  
  return servername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLoginRequest::release_servername() {
  // @@protoc_insertion_point(field_release:node.UserLoginRequest.servername)
  
  return servername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:node.UserLoginRequest.servername)
}

// uint32 serverid = 2;
inline void UserLoginRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserLoginRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserLoginRequest::serverid() const {
  // @@protoc_insertion_point(field_get:node.UserLoginRequest.serverid)
  return _internal_serverid();
}
inline void UserLoginRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void UserLoginRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:node.UserLoginRequest.serverid)
}

// uint64 userid = 3;
inline void UserLoginRequest::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserLoginRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserLoginRequest::userid() const {
  // @@protoc_insertion_point(field_get:node.UserLoginRequest.userid)
  return _internal_userid();
}
inline void UserLoginRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void UserLoginRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:node.UserLoginRequest.userid)
}

// -------------------------------------------------------------------

// UserLogoutRequest

// bytes servername = 1;
inline void UserLogoutRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLogoutRequest::servername() const {
  // @@protoc_insertion_point(field_get:node.UserLogoutRequest.servername)
  return _internal_servername();
}
inline void UserLogoutRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:node.UserLogoutRequest.servername)
}
inline std::string* UserLogoutRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:node.UserLogoutRequest.servername)
  return _internal_mutable_servername();
}
inline const std::string& UserLogoutRequest::_internal_servername() const {
  return servername_.GetNoArena();
}
inline void UserLogoutRequest::_internal_set_servername(const std::string& value) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserLogoutRequest::set_servername(std::string&& value) {
  
  servername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.UserLogoutRequest.servername)
}
inline void UserLogoutRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.UserLogoutRequest.servername)
}
inline void UserLogoutRequest::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.UserLogoutRequest.servername)
}
inline std::string* UserLogoutRequest::_internal_mutable_servername() {
  
  return servername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLogoutRequest::release_servername() {
  // @@protoc_insertion_point(field_release:node.UserLogoutRequest.servername)
  
  return servername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogoutRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:node.UserLogoutRequest.servername)
}

// uint64 userid = 2;
inline void UserLogoutRequest::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserLogoutRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserLogoutRequest::userid() const {
  // @@protoc_insertion_point(field_get:node.UserLogoutRequest.userid)
  return _internal_userid();
}
inline void UserLogoutRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void UserLogoutRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:node.UserLogoutRequest.userid)
}

// -------------------------------------------------------------------

// LowLoadNodeRequest

// bytes servername = 1;
inline void LowLoadNodeRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LowLoadNodeRequest::servername() const {
  // @@protoc_insertion_point(field_get:node.LowLoadNodeRequest.servername)
  return _internal_servername();
}
inline void LowLoadNodeRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:node.LowLoadNodeRequest.servername)
}
inline std::string* LowLoadNodeRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:node.LowLoadNodeRequest.servername)
  return _internal_mutable_servername();
}
inline const std::string& LowLoadNodeRequest::_internal_servername() const {
  return servername_.GetNoArena();
}
inline void LowLoadNodeRequest::_internal_set_servername(const std::string& value) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LowLoadNodeRequest::set_servername(std::string&& value) {
  
  servername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.LowLoadNodeRequest.servername)
}
inline void LowLoadNodeRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.LowLoadNodeRequest.servername)
}
inline void LowLoadNodeRequest::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.LowLoadNodeRequest.servername)
}
inline std::string* LowLoadNodeRequest::_internal_mutable_servername() {
  
  return servername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LowLoadNodeRequest::release_servername() {
  // @@protoc_insertion_point(field_release:node.LowLoadNodeRequest.servername)
  
  return servername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LowLoadNodeRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:node.LowLoadNodeRequest.servername)
}

// -------------------------------------------------------------------

// LowLoadNodeResponse

// string acceptaddress = 1;
inline void LowLoadNodeResponse::clear_acceptaddress() {
  acceptaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LowLoadNodeResponse::acceptaddress() const {
  // @@protoc_insertion_point(field_get:node.LowLoadNodeResponse.acceptaddress)
  return _internal_acceptaddress();
}
inline void LowLoadNodeResponse::set_acceptaddress(const std::string& value) {
  _internal_set_acceptaddress(value);
  // @@protoc_insertion_point(field_set:node.LowLoadNodeResponse.acceptaddress)
}
inline std::string* LowLoadNodeResponse::mutable_acceptaddress() {
  // @@protoc_insertion_point(field_mutable:node.LowLoadNodeResponse.acceptaddress)
  return _internal_mutable_acceptaddress();
}
inline const std::string& LowLoadNodeResponse::_internal_acceptaddress() const {
  return acceptaddress_.GetNoArena();
}
inline void LowLoadNodeResponse::_internal_set_acceptaddress(const std::string& value) {
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LowLoadNodeResponse::set_acceptaddress(std::string&& value) {
  
  acceptaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.LowLoadNodeResponse.acceptaddress)
}
inline void LowLoadNodeResponse::set_acceptaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.LowLoadNodeResponse.acceptaddress)
}
inline void LowLoadNodeResponse::set_acceptaddress(const char* value, size_t size) {
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.LowLoadNodeResponse.acceptaddress)
}
inline std::string* LowLoadNodeResponse::_internal_mutable_acceptaddress() {
  
  return acceptaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LowLoadNodeResponse::release_acceptaddress() {
  // @@protoc_insertion_point(field_release:node.LowLoadNodeResponse.acceptaddress)
  
  return acceptaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LowLoadNodeResponse::set_allocated_acceptaddress(std::string* acceptaddress) {
  if (acceptaddress != nullptr) {
    
  } else {
    
  }
  acceptaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceptaddress);
  // @@protoc_insertion_point(field_set_allocated:node.LowLoadNodeResponse.acceptaddress)
}

// string endpoint = 2;
inline void LowLoadNodeResponse::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LowLoadNodeResponse::endpoint() const {
  // @@protoc_insertion_point(field_get:node.LowLoadNodeResponse.endpoint)
  return _internal_endpoint();
}
inline void LowLoadNodeResponse::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:node.LowLoadNodeResponse.endpoint)
}
inline std::string* LowLoadNodeResponse::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:node.LowLoadNodeResponse.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& LowLoadNodeResponse::_internal_endpoint() const {
  return endpoint_.GetNoArena();
}
inline void LowLoadNodeResponse::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LowLoadNodeResponse::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.LowLoadNodeResponse.endpoint)
}
inline void LowLoadNodeResponse::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.LowLoadNodeResponse.endpoint)
}
inline void LowLoadNodeResponse::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.LowLoadNodeResponse.endpoint)
}
inline std::string* LowLoadNodeResponse::_internal_mutable_endpoint() {
  
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LowLoadNodeResponse::release_endpoint() {
  // @@protoc_insertion_point(field_release:node.LowLoadNodeResponse.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LowLoadNodeResponse::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:node.LowLoadNodeResponse.endpoint)
}

// uint32 serverregion = 3;
inline void LowLoadNodeResponse::clear_serverregion() {
  serverregion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LowLoadNodeResponse::_internal_serverregion() const {
  return serverregion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LowLoadNodeResponse::serverregion() const {
  // @@protoc_insertion_point(field_get:node.LowLoadNodeResponse.serverregion)
  return _internal_serverregion();
}
inline void LowLoadNodeResponse::_internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverregion_ = value;
}
inline void LowLoadNodeResponse::set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverregion(value);
  // @@protoc_insertion_point(field_set:node.LowLoadNodeResponse.serverregion)
}

// -------------------------------------------------------------------

// RegionLowLoadRequest

// bytes servername = 1;
inline void RegionLowLoadRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegionLowLoadRequest::servername() const {
  // @@protoc_insertion_point(field_get:node.RegionLowLoadRequest.servername)
  return _internal_servername();
}
inline void RegionLowLoadRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:node.RegionLowLoadRequest.servername)
}
inline std::string* RegionLowLoadRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:node.RegionLowLoadRequest.servername)
  return _internal_mutable_servername();
}
inline const std::string& RegionLowLoadRequest::_internal_servername() const {
  return servername_.GetNoArena();
}
inline void RegionLowLoadRequest::_internal_set_servername(const std::string& value) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegionLowLoadRequest::set_servername(std::string&& value) {
  
  servername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.RegionLowLoadRequest.servername)
}
inline void RegionLowLoadRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.RegionLowLoadRequest.servername)
}
inline void RegionLowLoadRequest::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.RegionLowLoadRequest.servername)
}
inline std::string* RegionLowLoadRequest::_internal_mutable_servername() {
  
  return servername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegionLowLoadRequest::release_servername() {
  // @@protoc_insertion_point(field_release:node.RegionLowLoadRequest.servername)
  
  return servername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegionLowLoadRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:node.RegionLowLoadRequest.servername)
}

// uint32 serverregion = 2;
inline void RegionLowLoadRequest::clear_serverregion() {
  serverregion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionLowLoadRequest::_internal_serverregion() const {
  return serverregion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionLowLoadRequest::serverregion() const {
  // @@protoc_insertion_point(field_get:node.RegionLowLoadRequest.serverregion)
  return _internal_serverregion();
}
inline void RegionLowLoadRequest::_internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverregion_ = value;
}
inline void RegionLowLoadRequest::set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverregion(value);
  // @@protoc_insertion_point(field_set:node.RegionLowLoadRequest.serverregion)
}

// -------------------------------------------------------------------

// RegionLowLoadResponse

// string acceptaddress = 1;
inline void RegionLowLoadResponse::clear_acceptaddress() {
  acceptaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegionLowLoadResponse::acceptaddress() const {
  // @@protoc_insertion_point(field_get:node.RegionLowLoadResponse.acceptaddress)
  return _internal_acceptaddress();
}
inline void RegionLowLoadResponse::set_acceptaddress(const std::string& value) {
  _internal_set_acceptaddress(value);
  // @@protoc_insertion_point(field_set:node.RegionLowLoadResponse.acceptaddress)
}
inline std::string* RegionLowLoadResponse::mutable_acceptaddress() {
  // @@protoc_insertion_point(field_mutable:node.RegionLowLoadResponse.acceptaddress)
  return _internal_mutable_acceptaddress();
}
inline const std::string& RegionLowLoadResponse::_internal_acceptaddress() const {
  return acceptaddress_.GetNoArena();
}
inline void RegionLowLoadResponse::_internal_set_acceptaddress(const std::string& value) {
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegionLowLoadResponse::set_acceptaddress(std::string&& value) {
  
  acceptaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.RegionLowLoadResponse.acceptaddress)
}
inline void RegionLowLoadResponse::set_acceptaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.RegionLowLoadResponse.acceptaddress)
}
inline void RegionLowLoadResponse::set_acceptaddress(const char* value, size_t size) {
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.RegionLowLoadResponse.acceptaddress)
}
inline std::string* RegionLowLoadResponse::_internal_mutable_acceptaddress() {
  
  return acceptaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegionLowLoadResponse::release_acceptaddress() {
  // @@protoc_insertion_point(field_release:node.RegionLowLoadResponse.acceptaddress)
  
  return acceptaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegionLowLoadResponse::set_allocated_acceptaddress(std::string* acceptaddress) {
  if (acceptaddress != nullptr) {
    
  } else {
    
  }
  acceptaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceptaddress);
  // @@protoc_insertion_point(field_set_allocated:node.RegionLowLoadResponse.acceptaddress)
}

// string endpoint = 2;
inline void RegionLowLoadResponse::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegionLowLoadResponse::endpoint() const {
  // @@protoc_insertion_point(field_get:node.RegionLowLoadResponse.endpoint)
  return _internal_endpoint();
}
inline void RegionLowLoadResponse::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:node.RegionLowLoadResponse.endpoint)
}
inline std::string* RegionLowLoadResponse::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:node.RegionLowLoadResponse.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& RegionLowLoadResponse::_internal_endpoint() const {
  return endpoint_.GetNoArena();
}
inline void RegionLowLoadResponse::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegionLowLoadResponse::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.RegionLowLoadResponse.endpoint)
}
inline void RegionLowLoadResponse::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.RegionLowLoadResponse.endpoint)
}
inline void RegionLowLoadResponse::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.RegionLowLoadResponse.endpoint)
}
inline std::string* RegionLowLoadResponse::_internal_mutable_endpoint() {
  
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegionLowLoadResponse::release_endpoint() {
  // @@protoc_insertion_point(field_release:node.RegionLowLoadResponse.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegionLowLoadResponse::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:node.RegionLowLoadResponse.endpoint)
}

// -------------------------------------------------------------------

// NodeListRequest

// bytes servername = 1;
inline void NodeListRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeListRequest::servername() const {
  // @@protoc_insertion_point(field_get:node.NodeListRequest.servername)
  return _internal_servername();
}
inline void NodeListRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:node.NodeListRequest.servername)
}
inline std::string* NodeListRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:node.NodeListRequest.servername)
  return _internal_mutable_servername();
}
inline const std::string& NodeListRequest::_internal_servername() const {
  return servername_.GetNoArena();
}
inline void NodeListRequest::_internal_set_servername(const std::string& value) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeListRequest::set_servername(std::string&& value) {
  
  servername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.NodeListRequest.servername)
}
inline void NodeListRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.NodeListRequest.servername)
}
inline void NodeListRequest::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.NodeListRequest.servername)
}
inline std::string* NodeListRequest::_internal_mutable_servername() {
  
  return servername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeListRequest::release_servername() {
  // @@protoc_insertion_point(field_release:node.NodeListRequest.servername)
  
  return servername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeListRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:node.NodeListRequest.servername)
}

// -------------------------------------------------------------------

// NodeDetail

// uint32 serverregion = 1;
inline void NodeDetail::clear_serverregion() {
  serverregion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeDetail::_internal_serverregion() const {
  return serverregion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeDetail::serverregion() const {
  // @@protoc_insertion_point(field_get:node.NodeDetail.serverregion)
  return _internal_serverregion();
}
inline void NodeDetail::_internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverregion_ = value;
}
inline void NodeDetail::set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverregion(value);
  // @@protoc_insertion_point(field_set:node.NodeDetail.serverregion)
}

// string acceptaddress = 2;
inline void NodeDetail::clear_acceptaddress() {
  acceptaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeDetail::acceptaddress() const {
  // @@protoc_insertion_point(field_get:node.NodeDetail.acceptaddress)
  return _internal_acceptaddress();
}
inline void NodeDetail::set_acceptaddress(const std::string& value) {
  _internal_set_acceptaddress(value);
  // @@protoc_insertion_point(field_set:node.NodeDetail.acceptaddress)
}
inline std::string* NodeDetail::mutable_acceptaddress() {
  // @@protoc_insertion_point(field_mutable:node.NodeDetail.acceptaddress)
  return _internal_mutable_acceptaddress();
}
inline const std::string& NodeDetail::_internal_acceptaddress() const {
  return acceptaddress_.GetNoArena();
}
inline void NodeDetail::_internal_set_acceptaddress(const std::string& value) {
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeDetail::set_acceptaddress(std::string&& value) {
  
  acceptaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.NodeDetail.acceptaddress)
}
inline void NodeDetail::set_acceptaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.NodeDetail.acceptaddress)
}
inline void NodeDetail::set_acceptaddress(const char* value, size_t size) {
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.NodeDetail.acceptaddress)
}
inline std::string* NodeDetail::_internal_mutable_acceptaddress() {
  
  return acceptaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeDetail::release_acceptaddress() {
  // @@protoc_insertion_point(field_release:node.NodeDetail.acceptaddress)
  
  return acceptaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeDetail::set_allocated_acceptaddress(std::string* acceptaddress) {
  if (acceptaddress != nullptr) {
    
  } else {
    
  }
  acceptaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceptaddress);
  // @@protoc_insertion_point(field_set_allocated:node.NodeDetail.acceptaddress)
}

// int32 serverload = 3;
inline void NodeDetail::clear_serverload() {
  serverload_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDetail::_internal_serverload() const {
  return serverload_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDetail::serverload() const {
  // @@protoc_insertion_point(field_get:node.NodeDetail.serverload)
  return _internal_serverload();
}
inline void NodeDetail::_internal_set_serverload(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverload_ = value;
}
inline void NodeDetail::set_serverload(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverload(value);
  // @@protoc_insertion_point(field_set:node.NodeDetail.serverload)
}

// -------------------------------------------------------------------

// NodeListResponse

// repeated .node.NodeDetail nodes = 1;
inline int NodeListResponse::_internal_nodes_size() const {
  return nodes_.size();
}
inline int NodeListResponse::nodes_size() const {
  return _internal_nodes_size();
}
inline void NodeListResponse::clear_nodes() {
  nodes_.Clear();
}
inline ::node::NodeDetail* NodeListResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:node.NodeListResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeDetail >*
NodeListResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:node.NodeListResponse.nodes)
  return &nodes_;
}
inline const ::node::NodeDetail& NodeListResponse::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::node::NodeDetail& NodeListResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:node.NodeListResponse.nodes)
  return _internal_nodes(index);
}
inline ::node::NodeDetail* NodeListResponse::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::node::NodeDetail* NodeListResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:node.NodeListResponse.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::NodeDetail >&
NodeListResponse::nodes() const {
  // @@protoc_insertion_point(field_list:node.NodeListResponse.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// GetUserRequest

// uint64 account = 1;
inline void GetUserRequest::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetUserRequest::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetUserRequest::account() const {
  // @@protoc_insertion_point(field_get:node.GetUserRequest.account)
  return _internal_account();
}
inline void GetUserRequest::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void GetUserRequest::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:node.GetUserRequest.account)
}

// -------------------------------------------------------------------

// UserPacket

// uint64 userid = 1;
inline void UserPacket::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserPacket::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserPacket::userid() const {
  // @@protoc_insertion_point(field_get:node.UserPacket.userid)
  return _internal_userid();
}
inline void UserPacket::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void UserPacket::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:node.UserPacket.userid)
}

// uint32 serverregion = 2;
inline void UserPacket::clear_serverregion() {
  serverregion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserPacket::_internal_serverregion() const {
  return serverregion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserPacket::serverregion() const {
  // @@protoc_insertion_point(field_get:node.UserPacket.serverregion)
  return _internal_serverregion();
}
inline void UserPacket::_internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverregion_ = value;
}
inline void UserPacket::set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverregion(value);
  // @@protoc_insertion_point(field_set:node.UserPacket.serverregion)
}

// string createtime = 3;
inline void UserPacket::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserPacket::createtime() const {
  // @@protoc_insertion_point(field_get:node.UserPacket.createtime)
  return _internal_createtime();
}
inline void UserPacket::set_createtime(const std::string& value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:node.UserPacket.createtime)
}
inline std::string* UserPacket::mutable_createtime() {
  // @@protoc_insertion_point(field_mutable:node.UserPacket.createtime)
  return _internal_mutable_createtime();
}
inline const std::string& UserPacket::_internal_createtime() const {
  return createtime_.GetNoArena();
}
inline void UserPacket::_internal_set_createtime(const std::string& value) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserPacket::set_createtime(std::string&& value) {
  
  createtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.UserPacket.createtime)
}
inline void UserPacket::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.UserPacket.createtime)
}
inline void UserPacket::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.UserPacket.createtime)
}
inline std::string* UserPacket::_internal_mutable_createtime() {
  
  return createtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserPacket::release_createtime() {
  // @@protoc_insertion_point(field_release:node.UserPacket.createtime)
  
  return createtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserPacket::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:node.UserPacket.createtime)
}

// uint32 logincount = 4;
inline void UserPacket::clear_logincount() {
  logincount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserPacket::_internal_logincount() const {
  return logincount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserPacket::logincount() const {
  // @@protoc_insertion_point(field_get:node.UserPacket.logincount)
  return _internal_logincount();
}
inline void UserPacket::_internal_set_logincount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  logincount_ = value;
}
inline void UserPacket::set_logincount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_logincount(value);
  // @@protoc_insertion_point(field_set:node.UserPacket.logincount)
}

// uint32 mapid = 5;
inline void UserPacket::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserPacket::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserPacket::mapid() const {
  // @@protoc_insertion_point(field_get:node.UserPacket.mapid)
  return _internal_mapid();
}
inline void UserPacket::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void UserPacket::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:node.UserPacket.mapid)
}

// -------------------------------------------------------------------

// GetUserResponse

// sint32 result = 1;
inline void GetUserResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserResponse::result() const {
  // @@protoc_insertion_point(field_get:node.GetUserResponse.result)
  return _internal_result();
}
inline void GetUserResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void GetUserResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.GetUserResponse.result)
}

// repeated .node.UserPacket rows = 2;
inline int GetUserResponse::_internal_rows_size() const {
  return rows_.size();
}
inline int GetUserResponse::rows_size() const {
  return _internal_rows_size();
}
inline void GetUserResponse::clear_rows() {
  rows_.Clear();
}
inline ::node::UserPacket* GetUserResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:node.GetUserResponse.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::UserPacket >*
GetUserResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:node.GetUserResponse.rows)
  return &rows_;
}
inline const ::node::UserPacket& GetUserResponse::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline const ::node::UserPacket& GetUserResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:node.GetUserResponse.rows)
  return _internal_rows(index);
}
inline ::node::UserPacket* GetUserResponse::_internal_add_rows() {
  return rows_.Add();
}
inline ::node::UserPacket* GetUserResponse::add_rows() {
  // @@protoc_insertion_point(field_add:node.GetUserResponse.rows)
  return _internal_add_rows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::UserPacket >&
GetUserResponse::rows() const {
  // @@protoc_insertion_point(field_list:node.GetUserResponse.rows)
  return rows_;
}

// -------------------------------------------------------------------

// CreateUserRequest

// uint64 account = 1;
inline void CreateUserRequest::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateUserRequest::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateUserRequest::account() const {
  // @@protoc_insertion_point(field_get:node.CreateUserRequest.account)
  return _internal_account();
}
inline void CreateUserRequest::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void CreateUserRequest::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:node.CreateUserRequest.account)
}

// uint32 maxsize = 2;
inline void CreateUserRequest::clear_maxsize() {
  maxsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::_internal_maxsize() const {
  return maxsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::maxsize() const {
  // @@protoc_insertion_point(field_get:node.CreateUserRequest.maxsize)
  return _internal_maxsize();
}
inline void CreateUserRequest::_internal_set_maxsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxsize_ = value;
}
inline void CreateUserRequest::set_maxsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxsize(value);
  // @@protoc_insertion_point(field_set:node.CreateUserRequest.maxsize)
}

// uint32 mapid = 3;
inline void CreateUserRequest::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::mapid() const {
  // @@protoc_insertion_point(field_get:node.CreateUserRequest.mapid)
  return _internal_mapid();
}
inline void CreateUserRequest::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void CreateUserRequest::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:node.CreateUserRequest.mapid)
}

// -------------------------------------------------------------------

// CreateUserResponse

// sint32 result = 1;
inline void CreateUserResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateUserResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateUserResponse::result() const {
  // @@protoc_insertion_point(field_get:node.CreateUserResponse.result)
  return _internal_result();
}
inline void CreateUserResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void CreateUserResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.CreateUserResponse.result)
}

// .node.UserPacket row = 2;
inline bool CreateUserResponse::_internal_has_row() const {
  return this != internal_default_instance() && row_ != nullptr;
}
inline bool CreateUserResponse::has_row() const {
  return _internal_has_row();
}
inline void CreateUserResponse::clear_row() {
  if (GetArenaNoVirtual() == nullptr && row_ != nullptr) {
    delete row_;
  }
  row_ = nullptr;
}
inline const ::node::UserPacket& CreateUserResponse::_internal_row() const {
  const ::node::UserPacket* p = row_;
  return p != nullptr ? *p : *reinterpret_cast<const ::node::UserPacket*>(
      &::node::_UserPacket_default_instance_);
}
inline const ::node::UserPacket& CreateUserResponse::row() const {
  // @@protoc_insertion_point(field_get:node.CreateUserResponse.row)
  return _internal_row();
}
inline ::node::UserPacket* CreateUserResponse::release_row() {
  // @@protoc_insertion_point(field_release:node.CreateUserResponse.row)
  
  ::node::UserPacket* temp = row_;
  row_ = nullptr;
  return temp;
}
inline ::node::UserPacket* CreateUserResponse::_internal_mutable_row() {
  
  if (row_ == nullptr) {
    auto* p = CreateMaybeMessage<::node::UserPacket>(GetArenaNoVirtual());
    row_ = p;
  }
  return row_;
}
inline ::node::UserPacket* CreateUserResponse::mutable_row() {
  // @@protoc_insertion_point(field_mutable:node.CreateUserResponse.row)
  return _internal_mutable_row();
}
inline void CreateUserResponse::set_allocated_row(::node::UserPacket* row) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete row_;
  }
  if (row) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      row = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row, submessage_arena);
    }
    
  } else {
    
  }
  row_ = row;
  // @@protoc_insertion_point(field_set_allocated:node.CreateUserResponse.row)
}

// -------------------------------------------------------------------

// CheckUserRequest

// uint64 userid = 1;
inline void CheckUserRequest::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckUserRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckUserRequest::userid() const {
  // @@protoc_insertion_point(field_get:node.CheckUserRequest.userid)
  return _internal_userid();
}
inline void CheckUserRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void CheckUserRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:node.CheckUserRequest.userid)
}

// -------------------------------------------------------------------

// CheckUserResponse

// sint32 result = 1;
inline void CheckUserResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckUserResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckUserResponse::result() const {
  // @@protoc_insertion_point(field_get:node.CheckUserResponse.result)
  return _internal_result();
}
inline void CheckUserResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void CheckUserResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.CheckUserResponse.result)
}

// uint64 account = 2;
inline void CheckUserResponse::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckUserResponse::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckUserResponse::account() const {
  // @@protoc_insertion_point(field_get:node.CheckUserResponse.account)
  return _internal_account();
}
inline void CheckUserResponse::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void CheckUserResponse::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:node.CheckUserResponse.account)
}

// string createtime = 3;
inline void CheckUserResponse::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CheckUserResponse::createtime() const {
  // @@protoc_insertion_point(field_get:node.CheckUserResponse.createtime)
  return _internal_createtime();
}
inline void CheckUserResponse::set_createtime(const std::string& value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:node.CheckUserResponse.createtime)
}
inline std::string* CheckUserResponse::mutable_createtime() {
  // @@protoc_insertion_point(field_mutable:node.CheckUserResponse.createtime)
  return _internal_mutable_createtime();
}
inline const std::string& CheckUserResponse::_internal_createtime() const {
  return createtime_.GetNoArena();
}
inline void CheckUserResponse::_internal_set_createtime(const std::string& value) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CheckUserResponse::set_createtime(std::string&& value) {
  
  createtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.CheckUserResponse.createtime)
}
inline void CheckUserResponse::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.CheckUserResponse.createtime)
}
inline void CheckUserResponse::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.CheckUserResponse.createtime)
}
inline std::string* CheckUserResponse::_internal_mutable_createtime() {
  
  return createtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CheckUserResponse::release_createtime() {
  // @@protoc_insertion_point(field_release:node.CheckUserResponse.createtime)
  
  return createtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUserResponse::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:node.CheckUserResponse.createtime)
}

// uint32 logincount = 4;
inline void CheckUserResponse::clear_logincount() {
  logincount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserResponse::_internal_logincount() const {
  return logincount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserResponse::logincount() const {
  // @@protoc_insertion_point(field_get:node.CheckUserResponse.logincount)
  return _internal_logincount();
}
inline void CheckUserResponse::_internal_set_logincount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  logincount_ = value;
}
inline void CheckUserResponse::set_logincount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_logincount(value);
  // @@protoc_insertion_point(field_set:node.CheckUserResponse.logincount)
}

// uint32 serverregion = 5;
inline void CheckUserResponse::clear_serverregion() {
  serverregion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserResponse::_internal_serverregion() const {
  return serverregion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserResponse::serverregion() const {
  // @@protoc_insertion_point(field_get:node.CheckUserResponse.serverregion)
  return _internal_serverregion();
}
inline void CheckUserResponse::_internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverregion_ = value;
}
inline void CheckUserResponse::set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverregion(value);
  // @@protoc_insertion_point(field_set:node.CheckUserResponse.serverregion)
}

// uint32 mapid = 6;
inline void CheckUserResponse::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserResponse::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserResponse::mapid() const {
  // @@protoc_insertion_point(field_get:node.CheckUserResponse.mapid)
  return _internal_mapid();
}
inline void CheckUserResponse::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void CheckUserResponse::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:node.CheckUserResponse.mapid)
}

// -------------------------------------------------------------------

// UpdateUserRequest

// uint64 userid = 1;
inline void UpdateUserRequest::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateUserRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateUserRequest::userid() const {
  // @@protoc_insertion_point(field_get:node.UpdateUserRequest.userid)
  return _internal_userid();
}
inline void UpdateUserRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void UpdateUserRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:node.UpdateUserRequest.userid)
}

// uint32 serverregion = 2;
inline void UpdateUserRequest::clear_serverregion() {
  serverregion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateUserRequest::_internal_serverregion() const {
  return serverregion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateUserRequest::serverregion() const {
  // @@protoc_insertion_point(field_get:node.UpdateUserRequest.serverregion)
  return _internal_serverregion();
}
inline void UpdateUserRequest::_internal_set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverregion_ = value;
}
inline void UpdateUserRequest::set_serverregion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverregion(value);
  // @@protoc_insertion_point(field_set:node.UpdateUserRequest.serverregion)
}

// uint32 mapid = 3;
inline void UpdateUserRequest::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateUserRequest::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateUserRequest::mapid() const {
  // @@protoc_insertion_point(field_get:node.UpdateUserRequest.mapid)
  return _internal_mapid();
}
inline void UpdateUserRequest::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void UpdateUserRequest::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:node.UpdateUserRequest.mapid)
}

// int32 login = 4;
inline void UpdateUserRequest::clear_login() {
  login_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserRequest::_internal_login() const {
  return login_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserRequest::login() const {
  // @@protoc_insertion_point(field_get:node.UpdateUserRequest.login)
  return _internal_login();
}
inline void UpdateUserRequest::_internal_set_login(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_ = value;
}
inline void UpdateUserRequest::set_login(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:node.UpdateUserRequest.login)
}

// -------------------------------------------------------------------

// UpdateUserResponse

// sint32 result = 1;
inline void UpdateUserResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserResponse::result() const {
  // @@protoc_insertion_point(field_get:node.UpdateUserResponse.result)
  return _internal_result();
}
inline void UpdateUserResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void UpdateUserResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.UpdateUserResponse.result)
}

// -------------------------------------------------------------------

// DeleteUserRequest

// uint64 userid = 1;
inline void DeleteUserRequest::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteUserRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteUserRequest::userid() const {
  // @@protoc_insertion_point(field_get:node.DeleteUserRequest.userid)
  return _internal_userid();
}
inline void DeleteUserRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void DeleteUserRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:node.DeleteUserRequest.userid)
}

// -------------------------------------------------------------------

// DeleteUserResponse

// sint32 result = 1;
inline void DeleteUserResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteUserResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteUserResponse::result() const {
  // @@protoc_insertion_point(field_get:node.DeleteUserResponse.result)
  return _internal_result();
}
inline void DeleteUserResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void DeleteUserResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.DeleteUserResponse.result)
}

// -------------------------------------------------------------------

// EndPointRequest

// uint32 serverid = 1;
inline void EndPointRequest::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointRequest::serverid() const {
  // @@protoc_insertion_point(field_get:node.EndPointRequest.serverid)
  return _internal_serverid();
}
inline void EndPointRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void EndPointRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:node.EndPointRequest.serverid)
}

// -------------------------------------------------------------------

// EndPointResponse

// string endpoint = 1;
inline void EndPointResponse::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EndPointResponse::endpoint() const {
  // @@protoc_insertion_point(field_get:node.EndPointResponse.endpoint)
  return _internal_endpoint();
}
inline void EndPointResponse::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:node.EndPointResponse.endpoint)
}
inline std::string* EndPointResponse::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:node.EndPointResponse.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& EndPointResponse::_internal_endpoint() const {
  return endpoint_.GetNoArena();
}
inline void EndPointResponse::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EndPointResponse::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.EndPointResponse.endpoint)
}
inline void EndPointResponse::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.EndPointResponse.endpoint)
}
inline void EndPointResponse::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.EndPointResponse.endpoint)
}
inline std::string* EndPointResponse::_internal_mutable_endpoint() {
  
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndPointResponse::release_endpoint() {
  // @@protoc_insertion_point(field_release:node.EndPointResponse.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndPointResponse::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:node.EndPointResponse.endpoint)
}

// -------------------------------------------------------------------

// SeizeRequest

// bytes servername = 1;
inline void SeizeRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SeizeRequest::servername() const {
  // @@protoc_insertion_point(field_get:node.SeizeRequest.servername)
  return _internal_servername();
}
inline void SeizeRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:node.SeizeRequest.servername)
}
inline std::string* SeizeRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:node.SeizeRequest.servername)
  return _internal_mutable_servername();
}
inline const std::string& SeizeRequest::_internal_servername() const {
  return servername_.GetNoArena();
}
inline void SeizeRequest::_internal_set_servername(const std::string& value) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SeizeRequest::set_servername(std::string&& value) {
  
  servername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.SeizeRequest.servername)
}
inline void SeizeRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.SeizeRequest.servername)
}
inline void SeizeRequest::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.SeizeRequest.servername)
}
inline std::string* SeizeRequest::_internal_mutable_servername() {
  
  return servername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SeizeRequest::release_servername() {
  // @@protoc_insertion_point(field_release:node.SeizeRequest.servername)
  
  return servername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SeizeRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:node.SeizeRequest.servername)
}

// uint64 userid = 2;
inline void SeizeRequest::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SeizeRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SeizeRequest::userid() const {
  // @@protoc_insertion_point(field_get:node.SeizeRequest.userid)
  return _internal_userid();
}
inline void SeizeRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void SeizeRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:node.SeizeRequest.userid)
}

// int32 login = 3;
inline void SeizeRequest::clear_login() {
  login_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeizeRequest::_internal_login() const {
  return login_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeizeRequest::login() const {
  // @@protoc_insertion_point(field_get:node.SeizeRequest.login)
  return _internal_login();
}
inline void SeizeRequest::_internal_set_login(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_ = value;
}
inline void SeizeRequest::set_login(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:node.SeizeRequest.login)
}

// -------------------------------------------------------------------

// SeizeResponse

// string acceptaddress = 1;
inline void SeizeResponse::clear_acceptaddress() {
  acceptaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SeizeResponse::acceptaddress() const {
  // @@protoc_insertion_point(field_get:node.SeizeResponse.acceptaddress)
  return _internal_acceptaddress();
}
inline void SeizeResponse::set_acceptaddress(const std::string& value) {
  _internal_set_acceptaddress(value);
  // @@protoc_insertion_point(field_set:node.SeizeResponse.acceptaddress)
}
inline std::string* SeizeResponse::mutable_acceptaddress() {
  // @@protoc_insertion_point(field_mutable:node.SeizeResponse.acceptaddress)
  return _internal_mutable_acceptaddress();
}
inline const std::string& SeizeResponse::_internal_acceptaddress() const {
  return acceptaddress_.GetNoArena();
}
inline void SeizeResponse::_internal_set_acceptaddress(const std::string& value) {
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SeizeResponse::set_acceptaddress(std::string&& value) {
  
  acceptaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.SeizeResponse.acceptaddress)
}
inline void SeizeResponse::set_acceptaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.SeizeResponse.acceptaddress)
}
inline void SeizeResponse::set_acceptaddress(const char* value, size_t size) {
  
  acceptaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.SeizeResponse.acceptaddress)
}
inline std::string* SeizeResponse::_internal_mutable_acceptaddress() {
  
  return acceptaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SeizeResponse::release_acceptaddress() {
  // @@protoc_insertion_point(field_release:node.SeizeResponse.acceptaddress)
  
  return acceptaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SeizeResponse::set_allocated_acceptaddress(std::string* acceptaddress) {
  if (acceptaddress != nullptr) {
    
  } else {
    
  }
  acceptaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceptaddress);
  // @@protoc_insertion_point(field_set_allocated:node.SeizeResponse.acceptaddress)
}

// uint32 serverid = 2;
inline void SeizeResponse::clear_serverid() {
  serverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SeizeResponse::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SeizeResponse::serverid() const {
  // @@protoc_insertion_point(field_get:node.SeizeResponse.serverid)
  return _internal_serverid();
}
inline void SeizeResponse::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverid_ = value;
}
inline void SeizeResponse::set_serverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:node.SeizeResponse.serverid)
}

// uint32 mapid = 3;
inline void SeizeResponse::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SeizeResponse::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SeizeResponse::mapid() const {
  // @@protoc_insertion_point(field_get:node.SeizeResponse.mapid)
  return _internal_mapid();
}
inline void SeizeResponse::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void SeizeResponse::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:node.SeizeResponse.mapid)
}

// -------------------------------------------------------------------

// FreeRequest

// uint64 userid = 1;
inline void FreeRequest::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FreeRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FreeRequest::userid() const {
  // @@protoc_insertion_point(field_get:node.FreeRequest.userid)
  return _internal_userid();
}
inline void FreeRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void FreeRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:node.FreeRequest.userid)
}

// int32 logout = 2;
inline void FreeRequest::clear_logout() {
  logout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreeRequest::_internal_logout() const {
  return logout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreeRequest::logout() const {
  // @@protoc_insertion_point(field_get:node.FreeRequest.logout)
  return _internal_logout();
}
inline void FreeRequest::_internal_set_logout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logout_ = value;
}
inline void FreeRequest::set_logout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logout(value);
  // @@protoc_insertion_point(field_set:node.FreeRequest.logout)
}

// -------------------------------------------------------------------

// FreeResponse

// sint32 result = 1;
inline void FreeResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreeResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreeResponse::result() const {
  // @@protoc_insertion_point(field_get:node.FreeResponse.result)
  return _internal_result();
}
inline void FreeResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void FreeResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.FreeResponse.result)
}

// -------------------------------------------------------------------

// GuidResponse

// uint64 id = 1;
inline void GuidResponse::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GuidResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GuidResponse::id() const {
  // @@protoc_insertion_point(field_get:node.GuidResponse.id)
  return _internal_id();
}
inline void GuidResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void GuidResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:node.GuidResponse.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace node

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_controlcentre_2eproto
