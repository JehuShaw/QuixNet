// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_node_create_character.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fnode_5fcreate_5fcharacter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fnode_5fcreate_5fcharacter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fnode_5fcreate_5fcharacter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fnode_5fcreate_5fcharacter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fnode_5fcreate_5fcharacter_2eproto;
namespace node {
class CheckCreateCharRequest;
class CheckCreateCharRequestDefaultTypeInternal;
extern CheckCreateCharRequestDefaultTypeInternal _CheckCreateCharRequest_default_instance_;
class CheckCreateCharResponse;
class CheckCreateCharResponseDefaultTypeInternal;
extern CheckCreateCharResponseDefaultTypeInternal _CheckCreateCharResponse_default_instance_;
class CreateCharacterRequest;
class CreateCharacterRequestDefaultTypeInternal;
extern CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> ::node::CheckCreateCharRequest* Arena::CreateMaybeMessage<::node::CheckCreateCharRequest>(Arena*);
template<> ::node::CheckCreateCharResponse* Arena::CreateMaybeMessage<::node::CheckCreateCharResponse>(Arena*);
template<> ::node::CreateCharacterRequest* Arena::CreateMaybeMessage<::node::CreateCharacterRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace node {

// ===================================================================

class CheckCreateCharRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CheckCreateCharRequest) */ {
 public:
  CheckCreateCharRequest();
  virtual ~CheckCreateCharRequest();

  CheckCreateCharRequest(const CheckCreateCharRequest& from);
  CheckCreateCharRequest(CheckCreateCharRequest&& from) noexcept
    : CheckCreateCharRequest() {
    *this = ::std::move(from);
  }

  inline CheckCreateCharRequest& operator=(const CheckCreateCharRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckCreateCharRequest& operator=(CheckCreateCharRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckCreateCharRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckCreateCharRequest* internal_default_instance() {
    return reinterpret_cast<const CheckCreateCharRequest*>(
               &_CheckCreateCharRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckCreateCharRequest& a, CheckCreateCharRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckCreateCharRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckCreateCharRequest* New() const final {
    return CreateMaybeMessage<CheckCreateCharRequest>(nullptr);
  }

  CheckCreateCharRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckCreateCharRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckCreateCharRequest& from);
  void MergeFrom(const CheckCreateCharRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckCreateCharRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CheckCreateCharRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fnode_5fcreate_5fcharacter_2eproto);
    return ::descriptor_table_msg_5fnode_5fcreate_5fcharacter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCfgidFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 cfgid = 2;
  void clear_cfgid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cfgid() const;
  void set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cfgid() const;
  void _internal_set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.CheckCreateCharRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cfgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fnode_5fcreate_5fcharacter_2eproto;
};
// -------------------------------------------------------------------

class CheckCreateCharResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CheckCreateCharResponse) */ {
 public:
  CheckCreateCharResponse();
  virtual ~CheckCreateCharResponse();

  CheckCreateCharResponse(const CheckCreateCharResponse& from);
  CheckCreateCharResponse(CheckCreateCharResponse&& from) noexcept
    : CheckCreateCharResponse() {
    *this = ::std::move(from);
  }

  inline CheckCreateCharResponse& operator=(const CheckCreateCharResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckCreateCharResponse& operator=(CheckCreateCharResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckCreateCharResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckCreateCharResponse* internal_default_instance() {
    return reinterpret_cast<const CheckCreateCharResponse*>(
               &_CheckCreateCharResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckCreateCharResponse& a, CheckCreateCharResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckCreateCharResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckCreateCharResponse* New() const final {
    return CreateMaybeMessage<CheckCreateCharResponse>(nullptr);
  }

  CheckCreateCharResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckCreateCharResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckCreateCharResponse& from);
  void MergeFrom(const CheckCreateCharResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckCreateCharResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CheckCreateCharResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fnode_5fcreate_5fcharacter_2eproto);
    return ::descriptor_table_msg_5fnode_5fcreate_5fcharacter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMapidFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 mapid = 2;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.CheckCreateCharResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fnode_5fcreate_5fcharacter_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CreateCharacterRequest) */ {
 public:
  CreateCharacterRequest();
  virtual ~CreateCharacterRequest();

  CreateCharacterRequest(const CreateCharacterRequest& from);
  CreateCharacterRequest(CreateCharacterRequest&& from) noexcept
    : CreateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline CreateCharacterRequest& operator=(const CreateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterRequest& operator=(CreateCharacterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCharacterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterRequest*>(
               &_CreateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateCharacterRequest& a, CreateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCharacterRequest* New() const final {
    return CreateMaybeMessage<CreateCharacterRequest>(nullptr);
  }

  CreateCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateCharacterRequest& from);
  void MergeFrom(const CreateCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CreateCharacterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fnode_5fcreate_5fcharacter_2eproto);
    return ::descriptor_table_msg_5fnode_5fcreate_5fcharacter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kInfoFieldNumber = 4,
    kAccountFieldNumber = 1,
    kCfgidFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes info = 4;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const void* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 cfgid = 2;
  void clear_cfgid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cfgid() const;
  void set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cfgid() const;
  void _internal_set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.CreateCharacterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cfgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fnode_5fcreate_5fcharacter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckCreateCharRequest

// uint64 account = 1;
inline void CheckCreateCharRequest::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckCreateCharRequest::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckCreateCharRequest::account() const {
  // @@protoc_insertion_point(field_get:node.CheckCreateCharRequest.account)
  return _internal_account();
}
inline void CheckCreateCharRequest::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void CheckCreateCharRequest::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:node.CheckCreateCharRequest.account)
}

// uint32 cfgid = 2;
inline void CheckCreateCharRequest::clear_cfgid() {
  cfgid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckCreateCharRequest::_internal_cfgid() const {
  return cfgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckCreateCharRequest::cfgid() const {
  // @@protoc_insertion_point(field_get:node.CheckCreateCharRequest.cfgid)
  return _internal_cfgid();
}
inline void CheckCreateCharRequest::_internal_set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cfgid_ = value;
}
inline void CheckCreateCharRequest::set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cfgid(value);
  // @@protoc_insertion_point(field_set:node.CheckCreateCharRequest.cfgid)
}

// string name = 3;
inline void CheckCreateCharRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CheckCreateCharRequest::name() const {
  // @@protoc_insertion_point(field_get:node.CheckCreateCharRequest.name)
  return _internal_name();
}
inline void CheckCreateCharRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:node.CheckCreateCharRequest.name)
}
inline std::string* CheckCreateCharRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:node.CheckCreateCharRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CheckCreateCharRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void CheckCreateCharRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CheckCreateCharRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.CheckCreateCharRequest.name)
}
inline void CheckCreateCharRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.CheckCreateCharRequest.name)
}
inline void CheckCreateCharRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.CheckCreateCharRequest.name)
}
inline std::string* CheckCreateCharRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CheckCreateCharRequest::release_name() {
  // @@protoc_insertion_point(field_release:node.CheckCreateCharRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CheckCreateCharRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:node.CheckCreateCharRequest.name)
}

// -------------------------------------------------------------------

// CheckCreateCharResponse

// string name = 1;
inline void CheckCreateCharResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CheckCreateCharResponse::name() const {
  // @@protoc_insertion_point(field_get:node.CheckCreateCharResponse.name)
  return _internal_name();
}
inline void CheckCreateCharResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:node.CheckCreateCharResponse.name)
}
inline std::string* CheckCreateCharResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:node.CheckCreateCharResponse.name)
  return _internal_mutable_name();
}
inline const std::string& CheckCreateCharResponse::_internal_name() const {
  return name_.GetNoArena();
}
inline void CheckCreateCharResponse::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CheckCreateCharResponse::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.CheckCreateCharResponse.name)
}
inline void CheckCreateCharResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.CheckCreateCharResponse.name)
}
inline void CheckCreateCharResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.CheckCreateCharResponse.name)
}
inline std::string* CheckCreateCharResponse::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CheckCreateCharResponse::release_name() {
  // @@protoc_insertion_point(field_release:node.CheckCreateCharResponse.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CheckCreateCharResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:node.CheckCreateCharResponse.name)
}

// uint32 mapid = 2;
inline void CheckCreateCharResponse::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckCreateCharResponse::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckCreateCharResponse::mapid() const {
  // @@protoc_insertion_point(field_get:node.CheckCreateCharResponse.mapid)
  return _internal_mapid();
}
inline void CheckCreateCharResponse::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void CheckCreateCharResponse::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:node.CheckCreateCharResponse.mapid)
}

// -------------------------------------------------------------------

// CreateCharacterRequest

// uint64 account = 1;
inline void CreateCharacterRequest::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateCharacterRequest::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateCharacterRequest::account() const {
  // @@protoc_insertion_point(field_get:node.CreateCharacterRequest.account)
  return _internal_account();
}
inline void CreateCharacterRequest::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void CreateCharacterRequest::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:node.CreateCharacterRequest.account)
}

// uint32 cfgid = 2;
inline void CreateCharacterRequest::clear_cfgid() {
  cfgid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterRequest::_internal_cfgid() const {
  return cfgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCharacterRequest::cfgid() const {
  // @@protoc_insertion_point(field_get:node.CreateCharacterRequest.cfgid)
  return _internal_cfgid();
}
inline void CreateCharacterRequest::_internal_set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cfgid_ = value;
}
inline void CreateCharacterRequest::set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cfgid(value);
  // @@protoc_insertion_point(field_set:node.CreateCharacterRequest.cfgid)
}

// string name = 3;
inline void CreateCharacterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCharacterRequest::name() const {
  // @@protoc_insertion_point(field_get:node.CreateCharacterRequest.name)
  return _internal_name();
}
inline void CreateCharacterRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:node.CreateCharacterRequest.name)
}
inline std::string* CreateCharacterRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:node.CreateCharacterRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateCharacterRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void CreateCharacterRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateCharacterRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.CreateCharacterRequest.name)
}
inline void CreateCharacterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.CreateCharacterRequest.name)
}
inline void CreateCharacterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.CreateCharacterRequest.name)
}
inline std::string* CreateCharacterRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCharacterRequest::release_name() {
  // @@protoc_insertion_point(field_release:node.CreateCharacterRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCharacterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:node.CreateCharacterRequest.name)
}

// bytes info = 4;
inline void CreateCharacterRequest::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCharacterRequest::info() const {
  // @@protoc_insertion_point(field_get:node.CreateCharacterRequest.info)
  return _internal_info();
}
inline void CreateCharacterRequest::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:node.CreateCharacterRequest.info)
}
inline std::string* CreateCharacterRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable:node.CreateCharacterRequest.info)
  return _internal_mutable_info();
}
inline const std::string& CreateCharacterRequest::_internal_info() const {
  return info_.GetNoArena();
}
inline void CreateCharacterRequest::_internal_set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateCharacterRequest::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.CreateCharacterRequest.info)
}
inline void CreateCharacterRequest::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.CreateCharacterRequest.info)
}
inline void CreateCharacterRequest::set_info(const void* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.CreateCharacterRequest.info)
}
inline std::string* CreateCharacterRequest::_internal_mutable_info() {
  
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCharacterRequest::release_info() {
  // @@protoc_insertion_point(field_release:node.CreateCharacterRequest.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCharacterRequest::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:node.CreateCharacterRequest.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace node

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fnode_5fcreate_5fcharacter_2eproto
