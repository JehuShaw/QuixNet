// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache.proto

#ifndef PROTOBUF_cache_2eproto__INCLUDED
#define PROTOBUF_cache_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "void_packet.pb.h"
#include "interest_packet.pb.h"
#include "data_packet.pb.h"
// @@protoc_insertion_point(includes)

namespace node {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cache_2eproto();
void protobuf_AssignDesc_cache_2eproto();
void protobuf_ShutdownFile_cache_2eproto();

class MCRequest;
class CacheRequest;
class CacheResponse;

// ===================================================================

class MCRequest : public ::google::protobuf::Message {
 public:
  MCRequest();
  virtual ~MCRequest();

  MCRequest(const MCRequest& from);

  inline MCRequest& operator=(const MCRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MCRequest& default_instance();

  void Swap(MCRequest* other);

  // implements Message ----------------------------------------------

  MCRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MCRequest& from);
  void MergeFrom(const MCRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional uint32 flags = 3;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint32 expiry = 4;
  inline bool has_expiry() const;
  inline void clear_expiry();
  static const int kExpiryFieldNumber = 4;
  inline ::google::protobuf::uint32 expiry() const;
  inline void set_expiry(::google::protobuf::uint32 value);

  // optional uint64 cas = 5;
  inline bool has_cas() const;
  inline void clear_cas();
  static const int kCasFieldNumber = 5;
  inline ::google::protobuf::uint64 cas() const;
  inline void set_cas(::google::protobuf::uint64 value);

  // optional int32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:node.MCRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_expiry();
  inline void clear_has_expiry();
  inline void set_has_cas();
  inline void clear_has_cas();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 expiry_;
  ::google::protobuf::uint64 cas_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cache_2eproto();
  friend void protobuf_AssignDesc_cache_2eproto();
  friend void protobuf_ShutdownFile_cache_2eproto();

  void InitAsDefaultInstance();
  static MCRequest* default_instance_;
};
// -------------------------------------------------------------------

class CacheRequest : public ::google::protobuf::Message {
 public:
  CacheRequest();
  virtual ~CacheRequest();

  CacheRequest(const CacheRequest& from);

  inline CacheRequest& operator=(const CacheRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheRequest& default_instance();

  void Swap(CacheRequest* other);

  // implements Message ----------------------------------------------

  CacheRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheRequest& from);
  void MergeFrom(const CacheRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .node.MCRequest values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::node::MCRequest& values(int index) const;
  inline ::node::MCRequest* mutable_values(int index);
  inline ::node::MCRequest* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::node::MCRequest >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::node::MCRequest >*
      mutable_values();

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional int32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:node.CacheRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::node::MCRequest > values_;
  ::std::string* key_;
  ::std::string* data_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cache_2eproto();
  friend void protobuf_AssignDesc_cache_2eproto();
  friend void protobuf_ShutdownFile_cache_2eproto();

  void InitAsDefaultInstance();
  static CacheRequest* default_instance_;
};
// -------------------------------------------------------------------

class CacheResponse : public ::google::protobuf::Message {
 public:
  CacheResponse();
  virtual ~CacheResponse();

  CacheResponse(const CacheResponse& from);

  inline CacheResponse& operator=(const CacheResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheResponse& default_instance();

  void Swap(CacheResponse* other);

  // implements Message ----------------------------------------------

  CacheResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheResponse& from);
  void MergeFrom(const CacheResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .node.MCRequest values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::node::MCRequest& values(int index) const;
  inline ::node::MCRequest* mutable_values(int index);
  inline ::node::MCRequest* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::node::MCRequest >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::node::MCRequest >*
      mutable_values();

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:node.CacheResponse)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::node::MCRequest > values_;
  ::std::string* key_;
  ::std::string* data_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cache_2eproto();
  friend void protobuf_AssignDesc_cache_2eproto();
  friend void protobuf_ShutdownFile_cache_2eproto();

  void InitAsDefaultInstance();
  static CacheResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MCRequest

// required string key = 1;
inline bool MCRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MCRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MCRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MCRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MCRequest::key() const {
  return *key_;
}
inline void MCRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MCRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MCRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MCRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* MCRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MCRequest::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes value = 2;
inline bool MCRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MCRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MCRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MCRequest::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& MCRequest::value() const {
  return *value_;
}
inline void MCRequest::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void MCRequest::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void MCRequest::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MCRequest::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* MCRequest::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MCRequest::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 flags = 3;
inline bool MCRequest::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MCRequest::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MCRequest::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MCRequest::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 MCRequest::flags() const {
  return flags_;
}
inline void MCRequest::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional uint32 expiry = 4;
inline bool MCRequest::has_expiry() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MCRequest::set_has_expiry() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MCRequest::clear_has_expiry() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MCRequest::clear_expiry() {
  expiry_ = 0u;
  clear_has_expiry();
}
inline ::google::protobuf::uint32 MCRequest::expiry() const {
  return expiry_;
}
inline void MCRequest::set_expiry(::google::protobuf::uint32 value) {
  set_has_expiry();
  expiry_ = value;
}

// optional uint64 cas = 5;
inline bool MCRequest::has_cas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MCRequest::set_has_cas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MCRequest::clear_has_cas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MCRequest::clear_cas() {
  cas_ = GOOGLE_ULONGLONG(0);
  clear_has_cas();
}
inline ::google::protobuf::uint64 MCRequest::cas() const {
  return cas_;
}
inline void MCRequest::set_cas(::google::protobuf::uint64 value) {
  set_has_cas();
  cas_ = value;
}

// optional int32 result = 6;
inline bool MCRequest::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MCRequest::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MCRequest::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MCRequest::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 MCRequest::result() const {
  return result_;
}
inline void MCRequest::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CacheRequest

// repeated .node.MCRequest values = 1;
inline int CacheRequest::values_size() const {
  return values_.size();
}
inline void CacheRequest::clear_values() {
  values_.Clear();
}
inline const ::node::MCRequest& CacheRequest::values(int index) const {
  return values_.Get(index);
}
inline ::node::MCRequest* CacheRequest::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::node::MCRequest* CacheRequest::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::node::MCRequest >&
CacheRequest::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::node::MCRequest >*
CacheRequest::mutable_values() {
  return &values_;
}

// optional string key = 2;
inline bool CacheRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CacheRequest::key() const {
  return *key_;
}
inline void CacheRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CacheRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CacheRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CacheRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CacheRequest::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes data = 3;
inline bool CacheRequest::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheRequest::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CacheRequest::data() const {
  return *data_;
}
inline void CacheRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CacheRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CacheRequest::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CacheRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CacheRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 offset = 4;
inline bool CacheRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheRequest::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 CacheRequest::offset() const {
  return offset_;
}
inline void CacheRequest::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
}

// optional uint32 count = 5;
inline bool CacheRequest::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CacheRequest::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CacheRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CacheRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CacheRequest::count() const {
  return count_;
}
inline void CacheRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 result = 6;
inline bool CacheRequest::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CacheRequest::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CacheRequest::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CacheRequest::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CacheRequest::result() const {
  return result_;
}
inline void CacheRequest::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CacheResponse

// repeated .node.MCRequest values = 1;
inline int CacheResponse::values_size() const {
  return values_.size();
}
inline void CacheResponse::clear_values() {
  values_.Clear();
}
inline const ::node::MCRequest& CacheResponse::values(int index) const {
  return values_.Get(index);
}
inline ::node::MCRequest* CacheResponse::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::node::MCRequest* CacheResponse::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::node::MCRequest >&
CacheResponse::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::node::MCRequest >*
CacheResponse::mutable_values() {
  return &values_;
}

// optional string key = 2;
inline bool CacheResponse::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheResponse::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheResponse::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheResponse::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CacheResponse::key() const {
  return *key_;
}
inline void CacheResponse::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CacheResponse::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CacheResponse::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheResponse::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CacheResponse::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CacheResponse::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes data = 3;
inline bool CacheResponse::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheResponse::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheResponse::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CacheResponse::data() const {
  return *data_;
}
inline void CacheResponse::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CacheResponse::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CacheResponse::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheResponse::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CacheResponse::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CacheResponse::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 result = 4;
inline bool CacheResponse::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheResponse::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CacheResponse::result() const {
  return result_;
}
inline void CacheResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace node

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cache_2eproto__INCLUDED
