// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "cache.rpcz.h"
#include "cache.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/stubs/once.h>
#include <rpcz/rpcz.hpp>
namespace {
const ::google::protobuf::ServiceDescriptor* CacheService_descriptor_ = NULL;
}  // anonymouse namespace

namespace node {

void rpcz_protobuf_AssignDesc_cache_2eproto() {
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cache.proto");
  GOOGLE_CHECK(file != NULL);
  CacheService_descriptor_ = file->service(0);
}

namespace {

::google::protobuf::internal::once_flag protobuf_AssignDescriptors_once_;
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::internal::call_once(protobuf_AssignDescriptors_once_,
                 &rpcz_protobuf_AssignDesc_cache_2eproto);
}

}  // namespace

// ===================================================================

CacheService::~CacheService() {}

const ::google::protobuf::ServiceDescriptor* CacheService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* CacheService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheService_descriptor_;
}

void CacheService::HandleNotification(const ::node::DataPacket&,
                         ::rpcz::reply< ::node::DataPacket> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method HandleNotification() not implemented.");
}

void CacheService::HandleProtocol(const ::node::DataPacket&,
                         ::rpcz::reply< ::node::DataPacket> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method HandleProtocol() not implemented.");
}

void CacheService::ListNotificationInterests(const ::node::VoidPacket&,
                         ::rpcz::reply< ::node::InterestPacket> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method ListNotificationInterests() not implemented.");
}

void CacheService::ListProtocolInterests(const ::node::VoidPacket&,
                         ::rpcz::reply< ::node::InterestPacket> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method ListProtocolInterests() not implemented.");
}

void CacheService::call_method(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::Message& request,
                             ::rpcz::server_channel* channel) {
  GOOGLE_DCHECK_EQ(method->service(), CacheService_descriptor_);
  switch(method->index()) {
    case 0:
      HandleNotification(
          *::google::protobuf::down_cast<const ::node::DataPacket*>(&request),
          ::rpcz::reply< ::node::DataPacket>(channel));
      break;
    case 1:
      HandleProtocol(
          *::google::protobuf::down_cast<const ::node::DataPacket*>(&request),
          ::rpcz::reply< ::node::DataPacket>(channel));
      break;
    case 2:
      ListNotificationInterests(
          *::google::protobuf::down_cast<const ::node::VoidPacket*>(&request),
          ::rpcz::reply< ::node::InterestPacket>(channel));
      break;
    case 3:
      ListProtocolInterests(
          *::google::protobuf::down_cast<const ::node::VoidPacket*>(&request),
          ::rpcz::reply< ::node::InterestPacket>(channel));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& CacheService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::node::DataPacket::default_instance();
    case 1:
      return ::node::DataPacket::default_instance();
    case 2:
      return ::node::VoidPacket::default_instance();
    case 3:
      return ::node::VoidPacket::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& CacheService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::node::DataPacket::default_instance();
    case 1:
      return ::node::DataPacket::default_instance();
    case 2:
      return ::node::InterestPacket::default_instance();
    case 3:
      return ::node::InterestPacket::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

CacheService_Stub::CacheService_Stub(::rpcz::rpc_channel* channel,
                                   const ::std::string& service_name,
                                   bool owns_channel)
  : channel_(channel), service_name_(service_name),
    owns_channel_(owns_channel) {}
CacheService_Stub::CacheService_Stub(::rpcz::rpc_channel* channel,
                                   bool owns_channel)
  : channel_(channel), service_name_(CacheService::descriptor()->name()),
    owns_channel_(owns_channel) {}
CacheService_Stub::~CacheService_Stub() {
  if (owns_channel_) delete channel_;
}

void CacheService_Stub::HandleNotification(const ::node::DataPacket& request,
                              ::node::DataPacket* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        CacheService::descriptor()->method(0),
                        request, response, rpc_controller, done);
}
void CacheService_Stub::HandleNotification(const ::node::DataPacket& request,
                              ::node::DataPacket* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        CacheService::descriptor()->method(0),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void CacheService_Stub::HandleProtocol(const ::node::DataPacket& request,
                              ::node::DataPacket* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        CacheService::descriptor()->method(1),
                        request, response, rpc_controller, done);
}
void CacheService_Stub::HandleProtocol(const ::node::DataPacket& request,
                              ::node::DataPacket* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        CacheService::descriptor()->method(1),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void CacheService_Stub::ListNotificationInterests(const ::node::VoidPacket& request,
                              ::node::InterestPacket* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        CacheService::descriptor()->method(2),
                        request, response, rpc_controller, done);
}
void CacheService_Stub::ListNotificationInterests(const ::node::VoidPacket& request,
                              ::node::InterestPacket* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        CacheService::descriptor()->method(2),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void CacheService_Stub::ListProtocolInterests(const ::node::VoidPacket& request,
                              ::node::InterestPacket* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        CacheService::descriptor()->method(3),
                        request, response, rpc_controller, done);
}
void CacheService_Stub::ListProtocolInterests(const ::node::VoidPacket& request,
                              ::node::InterestPacket* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        CacheService::descriptor()->method(3),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}

}  // namespace node
