// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcz.proto

#include "rpcz.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rpcz {
class rpc_request_headerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rpc_request_header> _instance;
} _rpc_request_header_default_instance_;
class rpc_response_headerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rpc_response_header> _instance;
} _rpc_response_header_default_instance_;
}  // namespace rpcz
static void InitDefaultsscc_info_rpc_request_header_rpcz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpcz::_rpc_request_header_default_instance_;
    new (ptr) ::rpcz::rpc_request_header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpcz::rpc_request_header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rpc_request_header_rpcz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rpc_request_header_rpcz_2eproto}, {}};

static void InitDefaultsscc_info_rpc_response_header_rpcz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpcz::_rpc_response_header_default_instance_;
    new (ptr) ::rpcz::rpc_response_header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpcz::rpc_response_header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rpc_response_header_rpcz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rpc_response_header_rpcz_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpcz_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rpcz_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpcz_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpcz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_request_header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_request_header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_request_header, event_id_),
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_request_header, deadline_),
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_request_header, service_),
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_request_header, method_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_response_header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_response_header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_response_header, status_),
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_response_header, application_error_),
  PROTOBUF_FIELD_OFFSET(::rpcz::rpc_response_header, error_),
  2,
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::rpcz::rpc_request_header)},
  { 13, 21, sizeof(::rpcz::rpc_response_header)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpcz::_rpc_request_header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpcz::_rpc_response_header_default_instance_),
};

const char descriptor_table_protodef_rpcz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nrpcz.proto\022\004rpcz\"Y\n\022rpc_request_header"
  "\022\020\n\010event_id\030\001 \001(\003\022\020\n\010deadline\030\002 \001(\005\022\017\n\007"
  "service\030\003 \001(\t\022\016\n\006method\030\004 \001(\t\"\313\003\n\023rpc_re"
  "sponse_header\0229\n\006status\030\001 \001(\0162%.rpcz.rpc"
  "_response_header.status_code:\002OK\022\034\n\021appl"
  "ication_error\030\002 \001(\005:\0010\022\r\n\005error\030\003 \001(\t\"|\n"
  "\013status_code\022\014\n\010INACTIVE\020\000\022\n\n\006ACTIVE\020\001\022\006"
  "\n\002OK\020\002\022\r\n\tCANCELLED\020\003\022\025\n\021APPLICATION_ERR"
  "OR\020\004\022\025\n\021DEADLINE_EXCEEDED\020\005\022\016\n\nTERMINATE"
  "D\020\006\"\315\001\n\026application_error_code\022\030\n\024APPLIC"
  "ATION_NO_ERROR\020\000\022\033\n\016INVALID_HEADER\020\377\377\377\377\377"
  "\377\377\377\377\001\022\034\n\017NO_SUCH_SERVICE\020\376\377\377\377\377\377\377\377\377\001\022\033\n\016N"
  "O_SUCH_METHOD\020\375\377\377\377\377\377\377\377\377\001\022\034\n\017INVALID_MESS"
  "AGE\020\374\377\377\377\377\377\377\377\377\001\022#\n\026METHOD_NOT_IMPLEMENTED"
  "\020\373\377\377\377\377\377\377\377\377\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpcz_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpcz_2eproto_sccs[2] = {
  &scc_info_rpc_request_header_rpcz_2eproto.base,
  &scc_info_rpc_response_header_rpcz_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpcz_2eproto_once;
static bool descriptor_table_rpcz_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpcz_2eproto = {
  &descriptor_table_rpcz_2eproto_initialized, descriptor_table_protodef_rpcz_2eproto, "rpcz.proto", 571,
  &descriptor_table_rpcz_2eproto_once, descriptor_table_rpcz_2eproto_sccs, descriptor_table_rpcz_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_rpcz_2eproto::offsets,
  file_level_metadata_rpcz_2eproto, 2, file_level_enum_descriptors_rpcz_2eproto, file_level_service_descriptors_rpcz_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpcz_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpcz_2eproto), true);
namespace rpcz {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rpc_response_header_status_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpcz_2eproto);
  return file_level_enum_descriptors_rpcz_2eproto[0];
}
bool rpc_response_header_status_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr rpc_response_header_status_code rpc_response_header::INACTIVE;
constexpr rpc_response_header_status_code rpc_response_header::ACTIVE;
constexpr rpc_response_header_status_code rpc_response_header::OK;
constexpr rpc_response_header_status_code rpc_response_header::CANCELLED;
constexpr rpc_response_header_status_code rpc_response_header::APPLICATION_ERROR;
constexpr rpc_response_header_status_code rpc_response_header::DEADLINE_EXCEEDED;
constexpr rpc_response_header_status_code rpc_response_header::TERMINATED;
constexpr rpc_response_header_status_code rpc_response_header::status_code_MIN;
constexpr rpc_response_header_status_code rpc_response_header::status_code_MAX;
constexpr int rpc_response_header::status_code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rpc_response_header_application_error_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpcz_2eproto);
  return file_level_enum_descriptors_rpcz_2eproto[1];
}
bool rpc_response_header_application_error_code_IsValid(int value) {
  switch (value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr rpc_response_header_application_error_code rpc_response_header::APPLICATION_NO_ERROR;
constexpr rpc_response_header_application_error_code rpc_response_header::INVALID_HEADER;
constexpr rpc_response_header_application_error_code rpc_response_header::NO_SUCH_SERVICE;
constexpr rpc_response_header_application_error_code rpc_response_header::NO_SUCH_METHOD;
constexpr rpc_response_header_application_error_code rpc_response_header::INVALID_MESSAGE;
constexpr rpc_response_header_application_error_code rpc_response_header::METHOD_NOT_IMPLEMENTED;
constexpr rpc_response_header_application_error_code rpc_response_header::application_error_code_MIN;
constexpr rpc_response_header_application_error_code rpc_response_header::application_error_code_MAX;
constexpr int rpc_response_header::application_error_code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void rpc_request_header::InitAsDefaultInstance() {
}
class rpc_request_header::_Internal {
 public:
  using HasBits = decltype(std::declval<rpc_request_header>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deadline(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

rpc_request_header::rpc_request_header()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpcz.rpc_request_header)
}
rpc_request_header::rpc_request_header(const rpc_request_header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_service()) {
    service_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_method()) {
    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deadline_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(deadline_));
  // @@protoc_insertion_point(copy_constructor:rpcz.rpc_request_header)
}

void rpc_request_header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_rpc_request_header_rpcz_2eproto.base);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deadline_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(deadline_));
}

rpc_request_header::~rpc_request_header() {
  // @@protoc_insertion_point(destructor:rpcz.rpc_request_header)
  SharedDtor();
}

void rpc_request_header::SharedDtor() {
  service_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void rpc_request_header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rpc_request_header& rpc_request_header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rpc_request_header_rpcz_2eproto.base);
  return *internal_default_instance();
}


void rpc_request_header::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcz.rpc_request_header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      service_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      method_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deadline_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(deadline_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* rpc_request_header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deadline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deadline(&has_bits);
          deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string service = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_service();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpcz.rpc_request_header.service");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpcz.rpc_request_header.method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rpc_request_header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcz.rpc_request_header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 event_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_event_id(), target);
  }

  // optional int32 deadline = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_deadline(), target);
  }

  // optional string service = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rpcz.rpc_request_header.service");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service(), target);
  }

  // optional string method = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rpcz.rpc_request_header.method");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcz.rpc_request_header)
  return target;
}

size_t rpc_request_header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcz.rpc_request_header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string service = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service());
    }

    // optional string method = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method());
    }

    // optional int64 event_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_event_id());
    }

    // optional int32 deadline = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_deadline());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rpc_request_header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcz.rpc_request_header)
  GOOGLE_DCHECK_NE(&from, this);
  const rpc_request_header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rpc_request_header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcz.rpc_request_header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcz.rpc_request_header)
    MergeFrom(*source);
  }
}

void rpc_request_header::MergeFrom(const rpc_request_header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcz.rpc_request_header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      service_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
    if (cached_has_bits & 0x00000004u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      deadline_ = from.deadline_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rpc_request_header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcz.rpc_request_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_request_header::CopyFrom(const rpc_request_header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcz.rpc_request_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_request_header::IsInitialized() const {
  return true;
}

void rpc_request_header::InternalSwap(rpc_request_header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  service_.Swap(&other->service_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_id_, other->event_id_);
  swap(deadline_, other->deadline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rpc_request_header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rpc_response_header::InitAsDefaultInstance() {
}
class rpc_response_header::_Internal {
 public:
  using HasBits = decltype(std::declval<rpc_response_header>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_application_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

rpc_response_header::rpc_response_header()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpcz.rpc_response_header)
}
rpc_response_header::rpc_response_header(const rpc_response_header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error()) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&application_error_, &from.application_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&application_error_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:rpcz.rpc_response_header)
}

void rpc_response_header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_rpc_response_header_rpcz_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_error_ = 0;
  status_ = 2;
}

rpc_response_header::~rpc_response_header() {
  // @@protoc_insertion_point(destructor:rpcz.rpc_response_header)
  SharedDtor();
}

void rpc_response_header::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void rpc_response_header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rpc_response_header& rpc_response_header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rpc_response_header_rpcz_2eproto.base);
  return *internal_default_instance();
}


void rpc_response_header::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcz.rpc_response_header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    application_error_ = 0;
    status_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* rpc_response_header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .rpcz.rpc_response_header.status_code status = 1 [default = OK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::rpcz::rpc_response_header_status_code_IsValid(val))) {
            _internal_set_status(static_cast<::rpcz::rpc_response_header_status_code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 application_error = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_application_error(&has_bits);
          application_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpcz.rpc_response_header.error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rpc_response_header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcz.rpc_response_header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rpcz.rpc_response_header.status_code status = 1 [default = OK];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional int32 application_error = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_application_error(), target);
  }

  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rpcz.rpc_response_header.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcz.rpc_response_header)
  return target;
}

size_t rpc_response_header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcz.rpc_response_header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string error = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
    }

    // optional int32 application_error = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_application_error());
    }

    // optional .rpcz.rpc_response_header.status_code status = 1 [default = OK];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rpc_response_header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcz.rpc_response_header)
  GOOGLE_DCHECK_NE(&from, this);
  const rpc_response_header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rpc_response_header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcz.rpc_response_header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcz.rpc_response_header)
    MergeFrom(*source);
  }
}

void rpc_response_header::MergeFrom(const rpc_response_header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcz.rpc_response_header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      application_error_ = from.application_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rpc_response_header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcz.rpc_response_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_response_header::CopyFrom(const rpc_response_header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcz.rpc_response_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_response_header::IsInitialized() const {
  return true;
}

void rpc_response_header::InternalSwap(rpc_response_header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(application_error_, other->application_error_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rpc_response_header::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpcz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpcz::rpc_request_header* Arena::CreateMaybeMessage< ::rpcz::rpc_request_header >(Arena* arena) {
  return Arena::CreateInternal< ::rpcz::rpc_request_header >(arena);
}
template<> PROTOBUF_NOINLINE ::rpcz::rpc_response_header* Arena::CreateMaybeMessage< ::rpcz::rpc_response_header >(Arena* arena) {
  return Arena::CreateInternal< ::rpcz::rpc_response_header >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
