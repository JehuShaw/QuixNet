// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcz.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpcz_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpcz_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpcz_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpcz_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpcz_2eproto;
namespace rpcz {
class rpc_request_header;
class rpc_request_headerDefaultTypeInternal;
extern rpc_request_headerDefaultTypeInternal _rpc_request_header_default_instance_;
class rpc_response_header;
class rpc_response_headerDefaultTypeInternal;
extern rpc_response_headerDefaultTypeInternal _rpc_response_header_default_instance_;
}  // namespace rpcz
PROTOBUF_NAMESPACE_OPEN
template<> ::rpcz::rpc_request_header* Arena::CreateMaybeMessage<::rpcz::rpc_request_header>(Arena*);
template<> ::rpcz::rpc_response_header* Arena::CreateMaybeMessage<::rpcz::rpc_response_header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpcz {

enum rpc_response_header_status_code : int {
  rpc_response_header_status_code_INACTIVE = 0,
  rpc_response_header_status_code_ACTIVE = 1,
  rpc_response_header_status_code_OK = 2,
  rpc_response_header_status_code_CANCELLED = 3,
  rpc_response_header_status_code_APPLICATION_ERROR = 4,
  rpc_response_header_status_code_DEADLINE_EXCEEDED = 5,
  rpc_response_header_status_code_TERMINATED = 6
};
bool rpc_response_header_status_code_IsValid(int value);
constexpr rpc_response_header_status_code rpc_response_header_status_code_status_code_MIN = rpc_response_header_status_code_INACTIVE;
constexpr rpc_response_header_status_code rpc_response_header_status_code_status_code_MAX = rpc_response_header_status_code_TERMINATED;
constexpr int rpc_response_header_status_code_status_code_ARRAYSIZE = rpc_response_header_status_code_status_code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rpc_response_header_status_code_descriptor();
template<typename T>
inline const std::string& rpc_response_header_status_code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, rpc_response_header_status_code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function rpc_response_header_status_code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    rpc_response_header_status_code_descriptor(), enum_t_value);
}
inline bool rpc_response_header_status_code_Parse(
    const std::string& name, rpc_response_header_status_code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<rpc_response_header_status_code>(
    rpc_response_header_status_code_descriptor(), name, value);
}
enum rpc_response_header_application_error_code : int {
  rpc_response_header_application_error_code_APPLICATION_NO_ERROR = 0,
  rpc_response_header_application_error_code_INVALID_HEADER = -1,
  rpc_response_header_application_error_code_NO_SUCH_SERVICE = -2,
  rpc_response_header_application_error_code_NO_SUCH_METHOD = -3,
  rpc_response_header_application_error_code_INVALID_MESSAGE = -4,
  rpc_response_header_application_error_code_METHOD_NOT_IMPLEMENTED = -5
};
bool rpc_response_header_application_error_code_IsValid(int value);
constexpr rpc_response_header_application_error_code rpc_response_header_application_error_code_application_error_code_MIN = rpc_response_header_application_error_code_METHOD_NOT_IMPLEMENTED;
constexpr rpc_response_header_application_error_code rpc_response_header_application_error_code_application_error_code_MAX = rpc_response_header_application_error_code_APPLICATION_NO_ERROR;
constexpr int rpc_response_header_application_error_code_application_error_code_ARRAYSIZE = rpc_response_header_application_error_code_application_error_code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rpc_response_header_application_error_code_descriptor();
template<typename T>
inline const std::string& rpc_response_header_application_error_code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, rpc_response_header_application_error_code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function rpc_response_header_application_error_code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    rpc_response_header_application_error_code_descriptor(), enum_t_value);
}
inline bool rpc_response_header_application_error_code_Parse(
    const std::string& name, rpc_response_header_application_error_code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<rpc_response_header_application_error_code>(
    rpc_response_header_application_error_code_descriptor(), name, value);
}
// ===================================================================

class rpc_request_header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcz.rpc_request_header) */ {
 public:
  rpc_request_header();
  virtual ~rpc_request_header();

  rpc_request_header(const rpc_request_header& from);
  rpc_request_header(rpc_request_header&& from) noexcept
    : rpc_request_header() {
    *this = ::std::move(from);
  }

  inline rpc_request_header& operator=(const rpc_request_header& from) {
    CopyFrom(from);
    return *this;
  }
  inline rpc_request_header& operator=(rpc_request_header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rpc_request_header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rpc_request_header* internal_default_instance() {
    return reinterpret_cast<const rpc_request_header*>(
               &_rpc_request_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(rpc_request_header& a, rpc_request_header& b) {
    a.Swap(&b);
  }
  inline void Swap(rpc_request_header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rpc_request_header* New() const final {
    return CreateMaybeMessage<rpc_request_header>(nullptr);
  }

  rpc_request_header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rpc_request_header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rpc_request_header& from);
  void MergeFrom(const rpc_request_header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rpc_request_header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcz.rpc_request_header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpcz_2eproto);
    return ::descriptor_table_rpcz_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 3,
    kMethodFieldNumber = 4,
    kEventIdFieldNumber = 1,
    kDeadlineFieldNumber = 2,
  };
  // optional string service = 3;
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // optional string method = 4;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // optional int64 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::int64 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 deadline = 2;
  bool has_deadline() const;
  private:
  bool _internal_has_deadline() const;
  public:
  void clear_deadline();
  ::PROTOBUF_NAMESPACE_ID::int32 deadline() const;
  void set_deadline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deadline() const;
  void _internal_set_deadline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpcz.rpc_request_header)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::int64 event_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 deadline_;
  friend struct ::TableStruct_rpcz_2eproto;
};
// -------------------------------------------------------------------

class rpc_response_header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcz.rpc_response_header) */ {
 public:
  rpc_response_header();
  virtual ~rpc_response_header();

  rpc_response_header(const rpc_response_header& from);
  rpc_response_header(rpc_response_header&& from) noexcept
    : rpc_response_header() {
    *this = ::std::move(from);
  }

  inline rpc_response_header& operator=(const rpc_response_header& from) {
    CopyFrom(from);
    return *this;
  }
  inline rpc_response_header& operator=(rpc_response_header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rpc_response_header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rpc_response_header* internal_default_instance() {
    return reinterpret_cast<const rpc_response_header*>(
               &_rpc_response_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(rpc_response_header& a, rpc_response_header& b) {
    a.Swap(&b);
  }
  inline void Swap(rpc_response_header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rpc_response_header* New() const final {
    return CreateMaybeMessage<rpc_response_header>(nullptr);
  }

  rpc_response_header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rpc_response_header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rpc_response_header& from);
  void MergeFrom(const rpc_response_header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rpc_response_header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcz.rpc_response_header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpcz_2eproto);
    return ::descriptor_table_rpcz_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef rpc_response_header_status_code status_code;
  static constexpr status_code INACTIVE =
    rpc_response_header_status_code_INACTIVE;
  static constexpr status_code ACTIVE =
    rpc_response_header_status_code_ACTIVE;
  static constexpr status_code OK =
    rpc_response_header_status_code_OK;
  static constexpr status_code CANCELLED =
    rpc_response_header_status_code_CANCELLED;
  static constexpr status_code APPLICATION_ERROR =
    rpc_response_header_status_code_APPLICATION_ERROR;
  static constexpr status_code DEADLINE_EXCEEDED =
    rpc_response_header_status_code_DEADLINE_EXCEEDED;
  static constexpr status_code TERMINATED =
    rpc_response_header_status_code_TERMINATED;
  static inline bool status_code_IsValid(int value) {
    return rpc_response_header_status_code_IsValid(value);
  }
  static constexpr status_code status_code_MIN =
    rpc_response_header_status_code_status_code_MIN;
  static constexpr status_code status_code_MAX =
    rpc_response_header_status_code_status_code_MAX;
  static constexpr int status_code_ARRAYSIZE =
    rpc_response_header_status_code_status_code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  status_code_descriptor() {
    return rpc_response_header_status_code_descriptor();
  }
  template<typename T>
  static inline const std::string& status_code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, status_code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function status_code_Name.");
    return rpc_response_header_status_code_Name(enum_t_value);
  }
  static inline bool status_code_Parse(const std::string& name,
      status_code* value) {
    return rpc_response_header_status_code_Parse(name, value);
  }

  typedef rpc_response_header_application_error_code application_error_code;
  static constexpr application_error_code APPLICATION_NO_ERROR =
    rpc_response_header_application_error_code_APPLICATION_NO_ERROR;
  static constexpr application_error_code INVALID_HEADER =
    rpc_response_header_application_error_code_INVALID_HEADER;
  static constexpr application_error_code NO_SUCH_SERVICE =
    rpc_response_header_application_error_code_NO_SUCH_SERVICE;
  static constexpr application_error_code NO_SUCH_METHOD =
    rpc_response_header_application_error_code_NO_SUCH_METHOD;
  static constexpr application_error_code INVALID_MESSAGE =
    rpc_response_header_application_error_code_INVALID_MESSAGE;
  static constexpr application_error_code METHOD_NOT_IMPLEMENTED =
    rpc_response_header_application_error_code_METHOD_NOT_IMPLEMENTED;
  static inline bool application_error_code_IsValid(int value) {
    return rpc_response_header_application_error_code_IsValid(value);
  }
  static constexpr application_error_code application_error_code_MIN =
    rpc_response_header_application_error_code_application_error_code_MIN;
  static constexpr application_error_code application_error_code_MAX =
    rpc_response_header_application_error_code_application_error_code_MAX;
  static constexpr int application_error_code_ARRAYSIZE =
    rpc_response_header_application_error_code_application_error_code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  application_error_code_descriptor() {
    return rpc_response_header_application_error_code_descriptor();
  }
  template<typename T>
  static inline const std::string& application_error_code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, application_error_code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function application_error_code_Name.");
    return rpc_response_header_application_error_code_Name(enum_t_value);
  }
  static inline bool application_error_code_Parse(const std::string& name,
      application_error_code* value) {
    return rpc_response_header_application_error_code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 3,
    kApplicationErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional int32 application_error = 2 [default = 0];
  bool has_application_error() const;
  private:
  bool _internal_has_application_error() const;
  public:
  void clear_application_error();
  ::PROTOBUF_NAMESPACE_ID::int32 application_error() const;
  void set_application_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_application_error() const;
  void _internal_set_application_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .rpcz.rpc_response_header.status_code status = 1 [default = OK];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::rpcz::rpc_response_header_status_code status() const;
  void set_status(::rpcz::rpc_response_header_status_code value);
  private:
  ::rpcz::rpc_response_header_status_code _internal_status() const;
  void _internal_set_status(::rpcz::rpc_response_header_status_code value);
  public:

  // @@protoc_insertion_point(class_scope:rpcz.rpc_response_header)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::int32 application_error_;
  int status_;
  friend struct ::TableStruct_rpcz_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rpc_request_header

// optional int64 event_id = 1;
inline bool rpc_request_header::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool rpc_request_header::has_event_id() const {
  return _internal_has_event_id();
}
inline void rpc_request_header::clear_event_id() {
  event_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 rpc_request_header::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 rpc_request_header::event_id() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.event_id)
  return _internal_event_id();
}
inline void rpc_request_header::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  event_id_ = value;
}
inline void rpc_request_header::set_event_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.event_id)
}

// optional int32 deadline = 2;
inline bool rpc_request_header::_internal_has_deadline() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool rpc_request_header::has_deadline() const {
  return _internal_has_deadline();
}
inline void rpc_request_header::clear_deadline() {
  deadline_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rpc_request_header::_internal_deadline() const {
  return deadline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rpc_request_header::deadline() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.deadline)
  return _internal_deadline();
}
inline void rpc_request_header::_internal_set_deadline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  deadline_ = value;
}
inline void rpc_request_header::set_deadline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_deadline(value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.deadline)
}

// optional string service = 3;
inline bool rpc_request_header::_internal_has_service() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool rpc_request_header::has_service() const {
  return _internal_has_service();
}
inline void rpc_request_header::clear_service() {
  service_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& rpc_request_header::service() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.service)
  return _internal_service();
}
inline void rpc_request_header::set_service(const std::string& value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.service)
}
inline std::string* rpc_request_header::mutable_service() {
  // @@protoc_insertion_point(field_mutable:rpcz.rpc_request_header.service)
  return _internal_mutable_service();
}
inline const std::string& rpc_request_header::_internal_service() const {
  return service_.GetNoArena();
}
inline void rpc_request_header::_internal_set_service(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rpc_request_header::set_service(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcz.rpc_request_header.service)
}
inline void rpc_request_header::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcz.rpc_request_header.service)
}
inline void rpc_request_header::set_service(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcz.rpc_request_header.service)
}
inline std::string* rpc_request_header::_internal_mutable_service() {
  _has_bits_[0] |= 0x00000001u;
  return service_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rpc_request_header::release_service() {
  // @@protoc_insertion_point(field_release:rpcz.rpc_request_header.service)
  if (!_internal_has_service()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_request_header::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:rpcz.rpc_request_header.service)
}

// optional string method = 4;
inline bool rpc_request_header::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool rpc_request_header::has_method() const {
  return _internal_has_method();
}
inline void rpc_request_header::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& rpc_request_header::method() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.method)
  return _internal_method();
}
inline void rpc_request_header::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.method)
}
inline std::string* rpc_request_header::mutable_method() {
  // @@protoc_insertion_point(field_mutable:rpcz.rpc_request_header.method)
  return _internal_mutable_method();
}
inline const std::string& rpc_request_header::_internal_method() const {
  return method_.GetNoArena();
}
inline void rpc_request_header::_internal_set_method(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rpc_request_header::set_method(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcz.rpc_request_header.method)
}
inline void rpc_request_header::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcz.rpc_request_header.method)
}
inline void rpc_request_header::set_method(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcz.rpc_request_header.method)
}
inline std::string* rpc_request_header::_internal_mutable_method() {
  _has_bits_[0] |= 0x00000002u;
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rpc_request_header::release_method() {
  // @@protoc_insertion_point(field_release:rpcz.rpc_request_header.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return method_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_request_header::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:rpcz.rpc_request_header.method)
}

// -------------------------------------------------------------------

// rpc_response_header

// optional .rpcz.rpc_response_header.status_code status = 1 [default = OK];
inline bool rpc_response_header::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool rpc_response_header::has_status() const {
  return _internal_has_status();
}
inline void rpc_response_header::clear_status() {
  status_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::rpcz::rpc_response_header_status_code rpc_response_header::_internal_status() const {
  return static_cast< ::rpcz::rpc_response_header_status_code >(status_);
}
inline ::rpcz::rpc_response_header_status_code rpc_response_header::status() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_response_header.status)
  return _internal_status();
}
inline void rpc_response_header::_internal_set_status(::rpcz::rpc_response_header_status_code value) {
  assert(::rpcz::rpc_response_header_status_code_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void rpc_response_header::set_status(::rpcz::rpc_response_header_status_code value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_response_header.status)
}

// optional int32 application_error = 2 [default = 0];
inline bool rpc_response_header::_internal_has_application_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool rpc_response_header::has_application_error() const {
  return _internal_has_application_error();
}
inline void rpc_response_header::clear_application_error() {
  application_error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rpc_response_header::_internal_application_error() const {
  return application_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rpc_response_header::application_error() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_response_header.application_error)
  return _internal_application_error();
}
inline void rpc_response_header::_internal_set_application_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  application_error_ = value;
}
inline void rpc_response_header::set_application_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_application_error(value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_response_header.application_error)
}

// optional string error = 3;
inline bool rpc_response_header::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool rpc_response_header::has_error() const {
  return _internal_has_error();
}
inline void rpc_response_header::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& rpc_response_header::error() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_response_header.error)
  return _internal_error();
}
inline void rpc_response_header::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_response_header.error)
}
inline std::string* rpc_response_header::mutable_error() {
  // @@protoc_insertion_point(field_mutable:rpcz.rpc_response_header.error)
  return _internal_mutable_error();
}
inline const std::string& rpc_response_header::_internal_error() const {
  return error_.GetNoArena();
}
inline void rpc_response_header::_internal_set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rpc_response_header::set_error(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcz.rpc_response_header.error)
}
inline void rpc_response_header::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcz.rpc_response_header.error)
}
inline void rpc_response_header::set_error(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcz.rpc_response_header.error)
}
inline std::string* rpc_response_header::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rpc_response_header::release_error() {
  // @@protoc_insertion_point(field_release:rpcz.rpc_response_header.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_response_header::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:rpcz.rpc_response_header.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcz

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rpcz::rpc_response_header_status_code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpcz::rpc_response_header_status_code>() {
  return ::rpcz::rpc_response_header_status_code_descriptor();
}
template <> struct is_proto_enum< ::rpcz::rpc_response_header_application_error_code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpcz::rpc_response_header_application_error_code>() {
  return ::rpcz::rpc_response_header_application_error_code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpcz_2eproto
