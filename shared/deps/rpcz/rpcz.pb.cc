// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcz.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpcz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpcz {

namespace {

const ::google::protobuf::Descriptor* rpc_request_header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rpc_request_header_reflection_ = NULL;
const ::google::protobuf::Descriptor* rpc_response_header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rpc_response_header_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* rpc_response_header_status_code_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rpc_response_header_application_error_code_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpcz_2eproto() {
  protobuf_AddDesc_rpcz_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpcz.proto");
  GOOGLE_CHECK(file != NULL);
  rpc_request_header_descriptor_ = file->message_type(0);
  static const int rpc_request_header_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, method_),
  };
  rpc_request_header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rpc_request_header_descriptor_,
      rpc_request_header::default_instance_,
      rpc_request_header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rpc_request_header));
  rpc_response_header_descriptor_ = file->message_type(1);
  static const int rpc_response_header_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_response_header, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_response_header, application_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_response_header, error_),
  };
  rpc_response_header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rpc_response_header_descriptor_,
      rpc_response_header::default_instance_,
      rpc_response_header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_response_header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_response_header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rpc_response_header));
  rpc_response_header_status_code_descriptor_ = rpc_response_header_descriptor_->enum_type(0);
  rpc_response_header_application_error_code_descriptor_ = rpc_response_header_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpcz_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rpc_request_header_descriptor_, &rpc_request_header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rpc_response_header_descriptor_, &rpc_response_header::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpcz_2eproto() {
  delete rpc_request_header::default_instance_;
  delete rpc_request_header_reflection_;
  delete rpc_response_header::default_instance_;
  delete rpc_response_header_reflection_;
}

void protobuf_AddDesc_rpcz_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nrpcz.proto\022\004rpcz\"Y\n\022rpc_request_header"
    "\022\020\n\010event_id\030\001 \001(\003\022\020\n\010deadline\030\002 \001(\005\022\017\n\007"
    "service\030\003 \001(\t\022\016\n\006method\030\004 \001(\t\"\313\003\n\023rpc_re"
    "sponse_header\0229\n\006status\030\001 \001(\0162%.rpcz.rpc"
    "_response_header.status_code:\002OK\022\034\n\021appl"
    "ication_error\030\002 \001(\005:\0010\022\r\n\005error\030\003 \001(\t\"|\n"
    "\013status_code\022\014\n\010INACTIVE\020\000\022\n\n\006ACTIVE\020\001\022\006"
    "\n\002OK\020\002\022\r\n\tCANCELLED\020\003\022\025\n\021APPLICATION_ERR"
    "OR\020\004\022\025\n\021DEADLINE_EXCEEDED\020\005\022\016\n\nTERMINATE"
    "D\020\006\"\315\001\n\026application_error_code\022\030\n\024APPLIC"
    "ATION_NO_ERROR\020\000\022\033\n\016INVALID_HEADER\020\377\377\377\377\377"
    "\377\377\377\377\001\022\034\n\017NO_SUCH_SERVICE\020\376\377\377\377\377\377\377\377\377\001\022\033\n\016N"
    "O_SUCH_METHOD\020\375\377\377\377\377\377\377\377\377\001\022\034\n\017INVALID_MESS"
    "AGE\020\374\377\377\377\377\377\377\377\377\001\022#\n\026METHOD_NOT_IMPLEMENTED"
    "\020\373\377\377\377\377\377\377\377\377\001", 571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpcz.proto", &protobuf_RegisterTypes);
  rpc_request_header::default_instance_ = new rpc_request_header();
  rpc_response_header::default_instance_ = new rpc_response_header();
  rpc_request_header::default_instance_->InitAsDefaultInstance();
  rpc_response_header::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpcz_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpcz_2eproto {
  StaticDescriptorInitializer_rpcz_2eproto() {
    protobuf_AddDesc_rpcz_2eproto();
  }
} static_descriptor_initializer_rpcz_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int rpc_request_header::kEventIdFieldNumber;
const int rpc_request_header::kDeadlineFieldNumber;
const int rpc_request_header::kServiceFieldNumber;
const int rpc_request_header::kMethodFieldNumber;
#endif  // !_MSC_VER

rpc_request_header::rpc_request_header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rpc_request_header::InitAsDefaultInstance() {
}

rpc_request_header::rpc_request_header(const rpc_request_header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rpc_request_header::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_LONGLONG(0);
  deadline_ = 0;
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rpc_request_header::~rpc_request_header() {
  SharedDtor();
}

void rpc_request_header::SharedDtor() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (this != default_instance_) {
  }
}

void rpc_request_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rpc_request_header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpc_request_header_descriptor_;
}

const rpc_request_header& rpc_request_header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcz_2eproto();
  return *default_instance_;
}

rpc_request_header* rpc_request_header::default_instance_ = NULL;

rpc_request_header* rpc_request_header::New() const {
  return new rpc_request_header;
}

void rpc_request_header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_LONGLONG(0);
    deadline_ = 0;
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::kEmptyString) {
        service_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::kEmptyString) {
        method_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rpc_request_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deadline;
        break;
      }

      // optional int32 deadline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadline_)));
          set_has_deadline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service;
        break;
      }

      // optional string service = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_method;
        break;
      }

      // optional string method = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rpc_request_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->event_id(), output);
  }

  // optional int32 deadline = 2;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deadline(), output);
  }

  // optional string service = 3;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->service(), output);
  }

  // optional string method = 4;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->method(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rpc_request_header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->event_id(), target);
  }

  // optional int32 deadline = 2;
  if (has_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deadline(), target);
  }

  // optional string service = 3;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service(), target);
  }

  // optional string method = 4;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->method(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rpc_request_header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->event_id());
    }

    // optional int32 deadline = 2;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadline());
    }

    // optional string service = 3;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }

    // optional string method = 4;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rpc_request_header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rpc_request_header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rpc_request_header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rpc_request_header::MergeFrom(const rpc_request_header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rpc_request_header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_request_header::CopyFrom(const rpc_request_header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_request_header::IsInitialized() const {

  return true;
}

void rpc_request_header::Swap(rpc_request_header* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(deadline_, other->deadline_);
    std::swap(service_, other->service_);
    std::swap(method_, other->method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rpc_request_header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rpc_request_header_descriptor_;
  metadata.reflection = rpc_request_header_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* rpc_response_header_status_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpc_response_header_status_code_descriptor_;
}
bool rpc_response_header_status_code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const rpc_response_header_status_code rpc_response_header::INACTIVE;
const rpc_response_header_status_code rpc_response_header::ACTIVE;
const rpc_response_header_status_code rpc_response_header::OK;
const rpc_response_header_status_code rpc_response_header::CANCELLED;
const rpc_response_header_status_code rpc_response_header::APPLICATION_ERROR;
const rpc_response_header_status_code rpc_response_header::DEADLINE_EXCEEDED;
const rpc_response_header_status_code rpc_response_header::TERMINATED;
const rpc_response_header_status_code rpc_response_header::status_code_MIN;
const rpc_response_header_status_code rpc_response_header::status_code_MAX;
const int rpc_response_header::status_code_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* rpc_response_header_application_error_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpc_response_header_application_error_code_descriptor_;
}
bool rpc_response_header_application_error_code_IsValid(int value) {
  switch(value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const rpc_response_header_application_error_code rpc_response_header::APPLICATION_NO_ERROR;
const rpc_response_header_application_error_code rpc_response_header::INVALID_HEADER;
const rpc_response_header_application_error_code rpc_response_header::NO_SUCH_SERVICE;
const rpc_response_header_application_error_code rpc_response_header::NO_SUCH_METHOD;
const rpc_response_header_application_error_code rpc_response_header::INVALID_MESSAGE;
const rpc_response_header_application_error_code rpc_response_header::METHOD_NOT_IMPLEMENTED;
const rpc_response_header_application_error_code rpc_response_header::application_error_code_MIN;
const rpc_response_header_application_error_code rpc_response_header::application_error_code_MAX;
const int rpc_response_header::application_error_code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int rpc_response_header::kStatusFieldNumber;
const int rpc_response_header::kApplicationErrorFieldNumber;
const int rpc_response_header::kErrorFieldNumber;
#endif  // !_MSC_VER

rpc_response_header::rpc_response_header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rpc_response_header::InitAsDefaultInstance() {
}

rpc_response_header::rpc_response_header(const rpc_response_header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rpc_response_header::SharedCtor() {
  _cached_size_ = 0;
  status_ = 2;
  application_error_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rpc_response_header::~rpc_response_header() {
  SharedDtor();
}

void rpc_response_header::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void rpc_response_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rpc_response_header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpc_response_header_descriptor_;
}

const rpc_response_header& rpc_response_header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcz_2eproto();
  return *default_instance_;
}

rpc_response_header* rpc_response_header::default_instance_ = NULL;

rpc_response_header* rpc_response_header::New() const {
  return new rpc_response_header;
}

void rpc_response_header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 2;
    application_error_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rpc_response_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpcz.rpc_response_header.status_code status = 1 [default = OK];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpcz::rpc_response_header_status_code_IsValid(value)) {
            set_status(static_cast< ::rpcz::rpc_response_header_status_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_application_error;
        break;
      }

      // optional int32 application_error = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_application_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &application_error_)));
          set_has_application_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional string error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rpc_response_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpcz.rpc_response_header.status_code status = 1 [default = OK];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional int32 application_error = 2 [default = 0];
  if (has_application_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->application_error(), output);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rpc_response_header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpcz.rpc_response_header.status_code status = 1 [default = OK];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional int32 application_error = 2 [default = 0];
  if (has_application_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->application_error(), target);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rpc_response_header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpcz.rpc_response_header.status_code status = 1 [default = OK];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 application_error = 2 [default = 0];
    if (has_application_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->application_error());
    }

    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rpc_response_header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rpc_response_header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rpc_response_header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rpc_response_header::MergeFrom(const rpc_response_header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_application_error()) {
      set_application_error(from.application_error());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rpc_response_header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_response_header::CopyFrom(const rpc_response_header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_response_header::IsInitialized() const {

  return true;
}

void rpc_response_header::Swap(rpc_response_header* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(application_error_, other->application_error_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rpc_response_header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rpc_response_header_descriptor_;
  metadata.reflection = rpc_response_header_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcz

// @@protoc_insertion_point(global_scope)
