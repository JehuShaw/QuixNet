// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_rank_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_rank_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rank {

namespace {

const ::google::protobuf::Descriptor* RequestRankPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRankPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRankResultPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRankResultPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5frank_5frequest_2eproto() {
  protobuf_AddDesc_msg_5frank_5frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_rank_request.proto");
  GOOGLE_CHECK(file != NULL);
  RequestRankPacket_descriptor_ = file->message_type(0);
  static const int RequestRankPacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankPacket, rank_type_),
  };
  RequestRankPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRankPacket_descriptor_,
      RequestRankPacket::default_instance_,
      RequestRankPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRankPacket));
  RequestRankResultPacket_descriptor_ = file->message_type(1);
  static const int RequestRankResultPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankResultPacket, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankResultPacket, items_),
  };
  RequestRankResultPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRankResultPacket_descriptor_,
      RequestRankResultPacket::default_instance_,
      RequestRankResultPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankResultPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankResultPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRankResultPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5frank_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRankPacket_descriptor_, &RequestRankPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRankResultPacket_descriptor_, &RequestRankResultPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5frank_5frequest_2eproto() {
  delete RequestRankPacket::default_instance_;
  delete RequestRankPacket_reflection_;
  delete RequestRankResultPacket::default_instance_;
  delete RequestRankResultPacket_reflection_;
}

void protobuf_AddDesc_msg_5frank_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rank::protobuf_AddDesc_msg_5frank_5fitem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026msg_rank_request.proto\022\004rank\032\023msg_rank"
    "_item.proto\"&\n\021RequestRankPacket\022\021\n\trank"
    "_type\030\001 \002(\005\"Q\n\027RequestRankResultPacket\022\021"
    "\n\trank_type\030\001 \002(\005\022#\n\005items\030\002 \003(\0132\024.rank."
    "RankItemPacket", 174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_rank_request.proto", &protobuf_RegisterTypes);
  RequestRankPacket::default_instance_ = new RequestRankPacket();
  RequestRankResultPacket::default_instance_ = new RequestRankResultPacket();
  RequestRankPacket::default_instance_->InitAsDefaultInstance();
  RequestRankResultPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5frank_5frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5frank_5frequest_2eproto {
  StaticDescriptorInitializer_msg_5frank_5frequest_2eproto() {
    protobuf_AddDesc_msg_5frank_5frequest_2eproto();
  }
} static_descriptor_initializer_msg_5frank_5frequest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RequestRankPacket::kRankTypeFieldNumber;
#endif  // !_MSC_VER

RequestRankPacket::RequestRankPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRankPacket::InitAsDefaultInstance() {
}

RequestRankPacket::RequestRankPacket(const RequestRankPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRankPacket::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRankPacket::~RequestRankPacket() {
  SharedDtor();
}

void RequestRankPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRankPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRankPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRankPacket_descriptor_;
}

const RequestRankPacket& RequestRankPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frank_5frequest_2eproto();
  return *default_instance_;
}

RequestRankPacket* RequestRankPacket::default_instance_ = NULL;

RequestRankPacket* RequestRankPacket::New() const {
  return new RequestRankPacket;
}

void RequestRankPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRankPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRankPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRankPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRankPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRankPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRankPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRankPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRankPacket::MergeFrom(const RequestRankPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRankPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRankPacket::CopyFrom(const RequestRankPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRankPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestRankPacket::Swap(RequestRankPacket* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRankPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRankPacket_descriptor_;
  metadata.reflection = RequestRankPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRankResultPacket::kRankTypeFieldNumber;
const int RequestRankResultPacket::kItemsFieldNumber;
#endif  // !_MSC_VER

RequestRankResultPacket::RequestRankResultPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRankResultPacket::InitAsDefaultInstance() {
}

RequestRankResultPacket::RequestRankResultPacket(const RequestRankResultPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRankResultPacket::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRankResultPacket::~RequestRankResultPacket() {
  SharedDtor();
}

void RequestRankResultPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRankResultPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRankResultPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRankResultPacket_descriptor_;
}

const RequestRankResultPacket& RequestRankResultPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frank_5frequest_2eproto();
  return *default_instance_;
}

RequestRankResultPacket* RequestRankResultPacket::default_instance_ = NULL;

RequestRankResultPacket* RequestRankResultPacket::New() const {
  return new RequestRankResultPacket;
}

void RequestRankResultPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRankResultPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .rank.RankItemPacket items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRankResultPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank_type(), output);
  }

  // repeated .rank.RankItemPacket items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRankResultPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank_type(), target);
  }

  // repeated .rank.RankItemPacket items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRankResultPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }

  }
  // repeated .rank.RankItemPacket items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRankResultPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRankResultPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRankResultPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRankResultPacket::MergeFrom(const RequestRankResultPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRankResultPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRankResultPacket::CopyFrom(const RequestRankResultPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRankResultPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void RequestRankResultPacket::Swap(RequestRankResultPacket* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRankResultPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRankResultPacket_descriptor_;
  metadata.reflection = RequestRankResultPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rank

// @@protoc_insertion_point(global_scope)
