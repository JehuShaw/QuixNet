// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controlcentre.proto

#ifndef PROTOBUF_controlcentre_2eproto__INCLUDED
#define PROTOBUF_controlcentre_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace node {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_controlcentre_2eproto();
void protobuf_AssignDesc_controlcentre_2eproto();
void protobuf_ShutdownFile_controlcentre_2eproto();

class ControlCentreVoid;
class RegisterRequest;
class RemoveRequest;
class OperateResponse;
class KeepRegisterRequest;
class KeepRegisterResponse;
class UserLoginRequest;
class UserLogoutRequest;
class LowLoadNodeRequest;
class LowLoadNodeResponse;
class RegionLowLoadRequest;
class RegionLowLoadResponse;
class NodeListRequest;
class NodeDetail;
class NodeListResponse;
class CreateIdRequest;
class CreateIdResponse;
class CheckIdRequest;
class CheckIdResponse;
class UpdateRegionRequest;
class UpdateRegionResponse;
class CacheStoreRequest;
class CacheKeyResult;
class CacheStoreResponse;

// ===================================================================

class ControlCentreVoid : public ::google::protobuf::Message {
 public:
  ControlCentreVoid();
  virtual ~ControlCentreVoid();

  ControlCentreVoid(const ControlCentreVoid& from);

  inline ControlCentreVoid& operator=(const ControlCentreVoid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCentreVoid& default_instance();

  void Swap(ControlCentreVoid* other);

  // implements Message ----------------------------------------------

  ControlCentreVoid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlCentreVoid& from);
  void MergeFrom(const ControlCentreVoid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:node.ControlCentreVoid)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static ControlCentreVoid* default_instance_;
};
// -------------------------------------------------------------------

class RegisterRequest : public ::google::protobuf::Message {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRequest& default_instance();

  void Swap(RegisterRequest* other);

  // implements Message ----------------------------------------------

  RegisterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 servertype = 1;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServertypeFieldNumber = 1;
  inline ::google::protobuf::int32 servertype() const;
  inline void set_servertype(::google::protobuf::int32 value);

  // required string endpoint = 2;
  inline bool has_endpoint() const;
  inline void clear_endpoint();
  static const int kEndpointFieldNumber = 2;
  inline const ::std::string& endpoint() const;
  inline void set_endpoint(const ::std::string& value);
  inline void set_endpoint(const char* value);
  inline void set_endpoint(const char* value, size_t size);
  inline ::std::string* mutable_endpoint();
  inline ::std::string* release_endpoint();
  inline void set_allocated_endpoint(::std::string* endpoint);

  // required bytes servername = 3;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 3;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const void* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // required uint32 serverid = 4;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 4;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required uint32 serverregion = 5;
  inline bool has_serverregion() const;
  inline void clear_serverregion();
  static const int kServerregionFieldNumber = 5;
  inline ::google::protobuf::uint32 serverregion() const;
  inline void set_serverregion(::google::protobuf::uint32 value);

  // optional bytes projectname = 6;
  inline bool has_projectname() const;
  inline void clear_projectname();
  static const int kProjectnameFieldNumber = 6;
  inline const ::std::string& projectname() const;
  inline void set_projectname(const ::std::string& value);
  inline void set_projectname(const char* value);
  inline void set_projectname(const void* value, size_t size);
  inline ::std::string* mutable_projectname();
  inline ::std::string* release_projectname();
  inline void set_allocated_projectname(::std::string* projectname);

  // optional string acceptaddress = 7;
  inline bool has_acceptaddress() const;
  inline void clear_acceptaddress();
  static const int kAcceptaddressFieldNumber = 7;
  inline const ::std::string& acceptaddress() const;
  inline void set_acceptaddress(const ::std::string& value);
  inline void set_acceptaddress(const char* value);
  inline void set_acceptaddress(const char* value, size_t size);
  inline ::std::string* mutable_acceptaddress();
  inline ::std::string* release_acceptaddress();
  inline void set_allocated_acceptaddress(::std::string* acceptaddress);

  // optional bytes processpath = 8;
  inline bool has_processpath() const;
  inline void clear_processpath();
  static const int kProcesspathFieldNumber = 8;
  inline const ::std::string& processpath() const;
  inline void set_processpath(const ::std::string& value);
  inline void set_processpath(const char* value);
  inline void set_processpath(const void* value, size_t size);
  inline ::std::string* mutable_processpath();
  inline ::std::string* release_processpath();
  inline void set_allocated_processpath(::std::string* processpath);

  // optional uint32 servantid = 9;
  inline bool has_servantid() const;
  inline void clear_servantid();
  static const int kServantidFieldNumber = 9;
  inline ::google::protobuf::uint32 servantid() const;
  inline void set_servantid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:node.RegisterRequest)
 private:
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_endpoint();
  inline void clear_has_endpoint();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_serverregion();
  inline void clear_has_serverregion();
  inline void set_has_projectname();
  inline void clear_has_projectname();
  inline void set_has_acceptaddress();
  inline void clear_has_acceptaddress();
  inline void set_has_processpath();
  inline void clear_has_processpath();
  inline void set_has_servantid();
  inline void clear_has_servantid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* endpoint_;
  ::google::protobuf::int32 servertype_;
  ::google::protobuf::uint32 serverid_;
  ::std::string* servername_;
  ::std::string* projectname_;
  ::std::string* acceptaddress_;
  ::google::protobuf::uint32 serverregion_;
  ::google::protobuf::uint32 servantid_;
  ::std::string* processpath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static RegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveRequest : public ::google::protobuf::Message {
 public:
  RemoveRequest();
  virtual ~RemoveRequest();

  RemoveRequest(const RemoveRequest& from);

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRequest& default_instance();

  void Swap(RemoveRequest* other);

  // implements Message ----------------------------------------------

  RemoveRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveRequest& from);
  void MergeFrom(const RemoveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes servername = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const void* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional int32 servertype = 3;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServertypeFieldNumber = 3;
  inline ::google::protobuf::int32 servertype() const;
  inline void set_servertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:node.RemoveRequest)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_servertype();
  inline void clear_has_servertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::int32 servertype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static RemoveRequest* default_instance_;
};
// -------------------------------------------------------------------

class OperateResponse : public ::google::protobuf::Message {
 public:
  OperateResponse();
  virtual ~OperateResponse();

  OperateResponse(const OperateResponse& from);

  inline OperateResponse& operator=(const OperateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperateResponse& default_instance();

  void Swap(OperateResponse* other);

  // implements Message ----------------------------------------------

  OperateResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperateResponse& from);
  void MergeFrom(const OperateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:node.OperateResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static OperateResponse* default_instance_;
};
// -------------------------------------------------------------------

class KeepRegisterRequest : public ::google::protobuf::Message {
 public:
  KeepRegisterRequest();
  virtual ~KeepRegisterRequest();

  KeepRegisterRequest(const KeepRegisterRequest& from);

  inline KeepRegisterRequest& operator=(const KeepRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepRegisterRequest& default_instance();

  void Swap(KeepRegisterRequest* other);

  // implements Message ----------------------------------------------

  KeepRegisterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepRegisterRequest& from);
  void MergeFrom(const KeepRegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional bytes servername = 2;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 2;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const void* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // optional string endpoint = 3;
  inline bool has_endpoint() const;
  inline void clear_endpoint();
  static const int kEndpointFieldNumber = 3;
  inline const ::std::string& endpoint() const;
  inline void set_endpoint(const ::std::string& value);
  inline void set_endpoint(const char* value);
  inline void set_endpoint(const char* value, size_t size);
  inline ::std::string* mutable_endpoint();
  inline ::std::string* release_endpoint();
  inline void set_allocated_endpoint(::std::string* endpoint);

  // optional int32 servertype = 4;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServertypeFieldNumber = 4;
  inline ::google::protobuf::int32 servertype() const;
  inline void set_servertype(::google::protobuf::int32 value);

  // optional uint32 serverload = 5;
  inline bool has_serverload() const;
  inline void clear_serverload();
  static const int kServerloadFieldNumber = 5;
  inline ::google::protobuf::uint32 serverload() const;
  inline void set_serverload(::google::protobuf::uint32 value);

  // optional int32 serverstatus = 6;
  inline bool has_serverstatus() const;
  inline void clear_serverstatus();
  static const int kServerstatusFieldNumber = 6;
  inline ::google::protobuf::int32 serverstatus() const;
  inline void set_serverstatus(::google::protobuf::int32 value);

  // optional bytes serverstate = 7;
  inline bool has_serverstate() const;
  inline void clear_serverstate();
  static const int kServerstateFieldNumber = 7;
  inline const ::std::string& serverstate() const;
  inline void set_serverstate(const ::std::string& value);
  inline void set_serverstate(const char* value);
  inline void set_serverstate(const void* value, size_t size);
  inline ::std::string* mutable_serverstate();
  inline ::std::string* release_serverstate();
  inline void set_allocated_serverstate(::std::string* serverstate);

  // @@protoc_insertion_point(class_scope:node.KeepRegisterRequest)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_endpoint();
  inline void clear_has_endpoint();
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_serverload();
  inline void clear_has_serverload();
  inline void set_has_serverstatus();
  inline void clear_has_serverstatus();
  inline void set_has_serverstate();
  inline void clear_has_serverstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::int32 servertype_;
  ::std::string* endpoint_;
  ::google::protobuf::uint32 serverload_;
  ::google::protobuf::int32 serverstatus_;
  ::std::string* serverstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static KeepRegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class KeepRegisterResponse : public ::google::protobuf::Message {
 public:
  KeepRegisterResponse();
  virtual ~KeepRegisterResponse();

  KeepRegisterResponse(const KeepRegisterResponse& from);

  inline KeepRegisterResponse& operator=(const KeepRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepRegisterResponse& default_instance();

  void Swap(KeepRegisterResponse* other);

  // implements Message ----------------------------------------------

  KeepRegisterResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepRegisterResponse& from);
  void MergeFrom(const KeepRegisterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool reregister = 1;
  inline bool has_reregister() const;
  inline void clear_reregister();
  static const int kReregisterFieldNumber = 1;
  inline bool reregister() const;
  inline void set_reregister(bool value);

  // @@protoc_insertion_point(class_scope:node.KeepRegisterResponse)
 private:
  inline void set_has_reregister();
  inline void clear_has_reregister();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool reregister_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static KeepRegisterResponse* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginRequest : public ::google::protobuf::Message {
 public:
  UserLoginRequest();
  virtual ~UserLoginRequest();

  UserLoginRequest(const UserLoginRequest& from);

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginRequest& default_instance();

  void Swap(UserLoginRequest* other);

  // implements Message ----------------------------------------------

  UserLoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginRequest& from);
  void MergeFrom(const UserLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes servername = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const void* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required uint64 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:node.UserLoginRequest)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static UserLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserLogoutRequest : public ::google::protobuf::Message {
 public:
  UserLogoutRequest();
  virtual ~UserLogoutRequest();

  UserLogoutRequest(const UserLogoutRequest& from);

  inline UserLogoutRequest& operator=(const UserLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogoutRequest& default_instance();

  void Swap(UserLogoutRequest* other);

  // implements Message ----------------------------------------------

  UserLogoutRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLogoutRequest& from);
  void MergeFrom(const UserLogoutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes servername = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const void* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // required uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:node.UserLogoutRequest)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;
  ::google::protobuf::uint64 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static UserLogoutRequest* default_instance_;
};
// -------------------------------------------------------------------

class LowLoadNodeRequest : public ::google::protobuf::Message {
 public:
  LowLoadNodeRequest();
  virtual ~LowLoadNodeRequest();

  LowLoadNodeRequest(const LowLoadNodeRequest& from);

  inline LowLoadNodeRequest& operator=(const LowLoadNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LowLoadNodeRequest& default_instance();

  void Swap(LowLoadNodeRequest* other);

  // implements Message ----------------------------------------------

  LowLoadNodeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LowLoadNodeRequest& from);
  void MergeFrom(const LowLoadNodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes servername = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const void* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:node.LowLoadNodeRequest)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static LowLoadNodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class LowLoadNodeResponse : public ::google::protobuf::Message {
 public:
  LowLoadNodeResponse();
  virtual ~LowLoadNodeResponse();

  LowLoadNodeResponse(const LowLoadNodeResponse& from);

  inline LowLoadNodeResponse& operator=(const LowLoadNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LowLoadNodeResponse& default_instance();

  void Swap(LowLoadNodeResponse* other);

  // implements Message ----------------------------------------------

  LowLoadNodeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LowLoadNodeResponse& from);
  void MergeFrom(const LowLoadNodeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string acceptaddress = 1;
  inline bool has_acceptaddress() const;
  inline void clear_acceptaddress();
  static const int kAcceptaddressFieldNumber = 1;
  inline const ::std::string& acceptaddress() const;
  inline void set_acceptaddress(const ::std::string& value);
  inline void set_acceptaddress(const char* value);
  inline void set_acceptaddress(const char* value, size_t size);
  inline ::std::string* mutable_acceptaddress();
  inline ::std::string* release_acceptaddress();
  inline void set_allocated_acceptaddress(::std::string* acceptaddress);

  // required uint32 serverregion = 2;
  inline bool has_serverregion() const;
  inline void clear_serverregion();
  static const int kServerregionFieldNumber = 2;
  inline ::google::protobuf::uint32 serverregion() const;
  inline void set_serverregion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:node.LowLoadNodeResponse)
 private:
  inline void set_has_acceptaddress();
  inline void clear_has_acceptaddress();
  inline void set_has_serverregion();
  inline void clear_has_serverregion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* acceptaddress_;
  ::google::protobuf::uint32 serverregion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static LowLoadNodeResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegionLowLoadRequest : public ::google::protobuf::Message {
 public:
  RegionLowLoadRequest();
  virtual ~RegionLowLoadRequest();

  RegionLowLoadRequest(const RegionLowLoadRequest& from);

  inline RegionLowLoadRequest& operator=(const RegionLowLoadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionLowLoadRequest& default_instance();

  void Swap(RegionLowLoadRequest* other);

  // implements Message ----------------------------------------------

  RegionLowLoadRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionLowLoadRequest& from);
  void MergeFrom(const RegionLowLoadRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes servername = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const void* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // required uint32 serverregion = 2;
  inline bool has_serverregion() const;
  inline void clear_serverregion();
  static const int kServerregionFieldNumber = 2;
  inline ::google::protobuf::uint32 serverregion() const;
  inline void set_serverregion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:node.RegionLowLoadRequest)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serverregion();
  inline void clear_has_serverregion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;
  ::google::protobuf::uint32 serverregion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static RegionLowLoadRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegionLowLoadResponse : public ::google::protobuf::Message {
 public:
  RegionLowLoadResponse();
  virtual ~RegionLowLoadResponse();

  RegionLowLoadResponse(const RegionLowLoadResponse& from);

  inline RegionLowLoadResponse& operator=(const RegionLowLoadResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionLowLoadResponse& default_instance();

  void Swap(RegionLowLoadResponse* other);

  // implements Message ----------------------------------------------

  RegionLowLoadResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionLowLoadResponse& from);
  void MergeFrom(const RegionLowLoadResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string acceptaddress = 1;
  inline bool has_acceptaddress() const;
  inline void clear_acceptaddress();
  static const int kAcceptaddressFieldNumber = 1;
  inline const ::std::string& acceptaddress() const;
  inline void set_acceptaddress(const ::std::string& value);
  inline void set_acceptaddress(const char* value);
  inline void set_acceptaddress(const char* value, size_t size);
  inline ::std::string* mutable_acceptaddress();
  inline ::std::string* release_acceptaddress();
  inline void set_allocated_acceptaddress(::std::string* acceptaddress);

  // @@protoc_insertion_point(class_scope:node.RegionLowLoadResponse)
 private:
  inline void set_has_acceptaddress();
  inline void clear_has_acceptaddress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* acceptaddress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static RegionLowLoadResponse* default_instance_;
};
// -------------------------------------------------------------------

class NodeListRequest : public ::google::protobuf::Message {
 public:
  NodeListRequest();
  virtual ~NodeListRequest();

  NodeListRequest(const NodeListRequest& from);

  inline NodeListRequest& operator=(const NodeListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeListRequest& default_instance();

  void Swap(NodeListRequest* other);

  // implements Message ----------------------------------------------

  NodeListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeListRequest& from);
  void MergeFrom(const NodeListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes servername = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const void* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:node.NodeListRequest)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static NodeListRequest* default_instance_;
};
// -------------------------------------------------------------------

class NodeDetail : public ::google::protobuf::Message {
 public:
  NodeDetail();
  virtual ~NodeDetail();

  NodeDetail(const NodeDetail& from);

  inline NodeDetail& operator=(const NodeDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeDetail& default_instance();

  void Swap(NodeDetail* other);

  // implements Message ----------------------------------------------

  NodeDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeDetail& from);
  void MergeFrom(const NodeDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverregion = 1;
  inline bool has_serverregion() const;
  inline void clear_serverregion();
  static const int kServerregionFieldNumber = 1;
  inline ::google::protobuf::uint32 serverregion() const;
  inline void set_serverregion(::google::protobuf::uint32 value);

  // required string acceptaddress = 2;
  inline bool has_acceptaddress() const;
  inline void clear_acceptaddress();
  static const int kAcceptaddressFieldNumber = 2;
  inline const ::std::string& acceptaddress() const;
  inline void set_acceptaddress(const ::std::string& value);
  inline void set_acceptaddress(const char* value);
  inline void set_acceptaddress(const char* value, size_t size);
  inline ::std::string* mutable_acceptaddress();
  inline ::std::string* release_acceptaddress();
  inline void set_allocated_acceptaddress(::std::string* acceptaddress);

  // required int32 serverload = 3;
  inline bool has_serverload() const;
  inline void clear_serverload();
  static const int kServerloadFieldNumber = 3;
  inline ::google::protobuf::int32 serverload() const;
  inline void set_serverload(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:node.NodeDetail)
 private:
  inline void set_has_serverregion();
  inline void clear_has_serverregion();
  inline void set_has_acceptaddress();
  inline void clear_has_acceptaddress();
  inline void set_has_serverload();
  inline void clear_has_serverload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* acceptaddress_;
  ::google::protobuf::uint32 serverregion_;
  ::google::protobuf::int32 serverload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static NodeDetail* default_instance_;
};
// -------------------------------------------------------------------

class NodeListResponse : public ::google::protobuf::Message {
 public:
  NodeListResponse();
  virtual ~NodeListResponse();

  NodeListResponse(const NodeListResponse& from);

  inline NodeListResponse& operator=(const NodeListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeListResponse& default_instance();

  void Swap(NodeListResponse* other);

  // implements Message ----------------------------------------------

  NodeListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeListResponse& from);
  void MergeFrom(const NodeListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .node.NodeDetail nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::node::NodeDetail& nodes(int index) const;
  inline ::node::NodeDetail* mutable_nodes(int index);
  inline ::node::NodeDetail* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::node::NodeDetail >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::node::NodeDetail >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:node.NodeListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::node::NodeDetail > nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static NodeListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateIdRequest : public ::google::protobuf::Message {
 public:
  CreateIdRequest();
  virtual ~CreateIdRequest();

  CreateIdRequest(const CreateIdRequest& from);

  inline CreateIdRequest& operator=(const CreateIdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateIdRequest& default_instance();

  void Swap(CreateIdRequest* other);

  // implements Message ----------------------------------------------

  CreateIdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateIdRequest& from);
  void MergeFrom(const CreateIdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline ::google::protobuf::uint64 account() const;
  inline void set_account(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:node.CreateIdRequest)
 private:
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static CreateIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateIdResponse : public ::google::protobuf::Message {
 public:
  CreateIdResponse();
  virtual ~CreateIdResponse();

  CreateIdResponse(const CreateIdResponse& from);

  inline CreateIdResponse& operator=(const CreateIdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateIdResponse& default_instance();

  void Swap(CreateIdResponse* other);

  // implements Message ----------------------------------------------

  CreateIdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateIdResponse& from);
  void MergeFrom(const CreateIdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional uint32 serverregion = 3;
  inline bool has_serverregion() const;
  inline void clear_serverregion();
  static const int kServerregionFieldNumber = 3;
  inline ::google::protobuf::uint32 serverregion() const;
  inline void set_serverregion(::google::protobuf::uint32 value);

  // optional string createtime = 4;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 4;
  inline const ::std::string& createtime() const;
  inline void set_createtime(const ::std::string& value);
  inline void set_createtime(const char* value);
  inline void set_createtime(const char* value, size_t size);
  inline ::std::string* mutable_createtime();
  inline ::std::string* release_createtime();
  inline void set_allocated_createtime(::std::string* createtime);

  // @@protoc_insertion_point(class_scope:node.CreateIdResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_serverregion();
  inline void clear_has_serverregion();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 serverregion_;
  ::std::string* createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static CreateIdResponse* default_instance_;
};
// -------------------------------------------------------------------

class CheckIdRequest : public ::google::protobuf::Message {
 public:
  CheckIdRequest();
  virtual ~CheckIdRequest();

  CheckIdRequest(const CheckIdRequest& from);

  inline CheckIdRequest& operator=(const CheckIdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckIdRequest& default_instance();

  void Swap(CheckIdRequest* other);

  // implements Message ----------------------------------------------

  CheckIdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckIdRequest& from);
  void MergeFrom(const CheckIdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline ::google::protobuf::uint64 account() const;
  inline void set_account(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:node.CheckIdRequest)
 private:
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static CheckIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class CheckIdResponse : public ::google::protobuf::Message {
 public:
  CheckIdResponse();
  virtual ~CheckIdResponse();

  CheckIdResponse(const CheckIdResponse& from);

  inline CheckIdResponse& operator=(const CheckIdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckIdResponse& default_instance();

  void Swap(CheckIdResponse* other);

  // implements Message ----------------------------------------------

  CheckIdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckIdResponse& from);
  void MergeFrom(const CheckIdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional string createtime = 3;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 3;
  inline const ::std::string& createtime() const;
  inline void set_createtime(const ::std::string& value);
  inline void set_createtime(const char* value);
  inline void set_createtime(const char* value, size_t size);
  inline ::std::string* mutable_createtime();
  inline ::std::string* release_createtime();
  inline void set_allocated_createtime(::std::string* createtime);

  // optional uint32 serverregion = 4;
  inline bool has_serverregion() const;
  inline void clear_serverregion();
  static const int kServerregionFieldNumber = 4;
  inline ::google::protobuf::uint32 serverregion() const;
  inline void set_serverregion(::google::protobuf::uint32 value);

  // optional uint64 cas = 5;
  inline bool has_cas() const;
  inline void clear_cas();
  static const int kCasFieldNumber = 5;
  inline ::google::protobuf::uint64 cas() const;
  inline void set_cas(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:node.CheckIdResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_serverregion();
  inline void clear_has_serverregion();
  inline void set_has_cas();
  inline void clear_has_cas();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 serverregion_;
  ::std::string* createtime_;
  ::google::protobuf::uint64 cas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static CheckIdResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRegionRequest : public ::google::protobuf::Message {
 public:
  UpdateRegionRequest();
  virtual ~UpdateRegionRequest();

  UpdateRegionRequest(const UpdateRegionRequest& from);

  inline UpdateRegionRequest& operator=(const UpdateRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRegionRequest& default_instance();

  void Swap(UpdateRegionRequest* other);

  // implements Message ----------------------------------------------

  UpdateRegionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRegionRequest& from);
  void MergeFrom(const UpdateRegionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline ::google::protobuf::uint64 account() const;
  inline void set_account(::google::protobuf::uint64 value);

  // required uint32 serverregion = 2;
  inline bool has_serverregion() const;
  inline void clear_serverregion();
  static const int kServerregionFieldNumber = 2;
  inline ::google::protobuf::uint32 serverregion() const;
  inline void set_serverregion(::google::protobuf::uint32 value);

  // required uint64 cas = 3;
  inline bool has_cas() const;
  inline void clear_cas();
  static const int kCasFieldNumber = 3;
  inline ::google::protobuf::uint64 cas() const;
  inline void set_cas(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:node.UpdateRegionRequest)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_serverregion();
  inline void clear_has_serverregion();
  inline void set_has_cas();
  inline void clear_has_cas();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 account_;
  ::google::protobuf::uint64 cas_;
  ::google::protobuf::uint32 serverregion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static UpdateRegionRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRegionResponse : public ::google::protobuf::Message {
 public:
  UpdateRegionResponse();
  virtual ~UpdateRegionResponse();

  UpdateRegionResponse(const UpdateRegionResponse& from);

  inline UpdateRegionResponse& operator=(const UpdateRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRegionResponse& default_instance();

  void Swap(UpdateRegionResponse* other);

  // implements Message ----------------------------------------------

  UpdateRegionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRegionResponse& from);
  void MergeFrom(const UpdateRegionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:node.UpdateRegionResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static UpdateRegionResponse* default_instance_;
};
// -------------------------------------------------------------------

class CacheStoreRequest : public ::google::protobuf::Message {
 public:
  CacheStoreRequest();
  virtual ~CacheStoreRequest();

  CacheStoreRequest(const CacheStoreRequest& from);

  inline CacheStoreRequest& operator=(const CacheStoreRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheStoreRequest& default_instance();

  void Swap(CacheStoreRequest* other);

  // implements Message ----------------------------------------------

  CacheStoreRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheStoreRequest& from);
  void MergeFrom(const CacheStoreRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required int32 routetype = 2;
  inline bool has_routetype() const;
  inline void clear_routetype();
  static const int kRoutetypeFieldNumber = 2;
  inline ::google::protobuf::int32 routetype() const;
  inline void set_routetype(::google::protobuf::int32 value);

  // required uint64 route = 3;
  inline bool has_route() const;
  inline void clear_route();
  static const int kRouteFieldNumber = 3;
  inline ::google::protobuf::uint64 route() const;
  inline void set_route(::google::protobuf::uint64 value);

  // repeated string keys = 4;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 4;
  inline const ::std::string& keys(int index) const;
  inline ::std::string* mutable_keys(int index);
  inline void set_keys(int index, const ::std::string& value);
  inline void set_keys(int index, const char* value);
  inline void set_keys(int index, const char* value, size_t size);
  inline ::std::string* add_keys();
  inline void add_keys(const ::std::string& value);
  inline void add_keys(const char* value);
  inline void add_keys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // @@protoc_insertion_point(class_scope:node.CacheStoreRequest)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_routetype();
  inline void clear_has_routetype();
  inline void set_has_route();
  inline void clear_has_route();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::int32 routetype_;
  ::google::protobuf::uint64 route_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static CacheStoreRequest* default_instance_;
};
// -------------------------------------------------------------------

class CacheKeyResult : public ::google::protobuf::Message {
 public:
  CacheKeyResult();
  virtual ~CacheKeyResult();

  CacheKeyResult(const CacheKeyResult& from);

  inline CacheKeyResult& operator=(const CacheKeyResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheKeyResult& default_instance();

  void Swap(CacheKeyResult* other);

  // implements Message ----------------------------------------------

  CacheKeyResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheKeyResult& from);
  void MergeFrom(const CacheKeyResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:node.CacheKeyResult)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static CacheKeyResult* default_instance_;
};
// -------------------------------------------------------------------

class CacheStoreResponse : public ::google::protobuf::Message {
 public:
  CacheStoreResponse();
  virtual ~CacheStoreResponse();

  CacheStoreResponse(const CacheStoreResponse& from);

  inline CacheStoreResponse& operator=(const CacheStoreResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheStoreResponse& default_instance();

  void Swap(CacheStoreResponse* other);

  // implements Message ----------------------------------------------

  CacheStoreResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheStoreResponse& from);
  void MergeFrom(const CacheStoreResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .node.CacheKeyResult keyresults = 2;
  inline int keyresults_size() const;
  inline void clear_keyresults();
  static const int kKeyresultsFieldNumber = 2;
  inline const ::node::CacheKeyResult& keyresults(int index) const;
  inline ::node::CacheKeyResult* mutable_keyresults(int index);
  inline ::node::CacheKeyResult* add_keyresults();
  inline const ::google::protobuf::RepeatedPtrField< ::node::CacheKeyResult >&
      keyresults() const;
  inline ::google::protobuf::RepeatedPtrField< ::node::CacheKeyResult >*
      mutable_keyresults();

  // @@protoc_insertion_point(class_scope:node.CacheStoreResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::node::CacheKeyResult > keyresults_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_controlcentre_2eproto();
  friend void protobuf_AssignDesc_controlcentre_2eproto();
  friend void protobuf_ShutdownFile_controlcentre_2eproto();

  void InitAsDefaultInstance();
  static CacheStoreResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ControlCentreVoid

// -------------------------------------------------------------------

// RegisterRequest

// required int32 servertype = 1;
inline bool RegisterRequest::has_servertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterRequest::set_has_servertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterRequest::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterRequest::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 RegisterRequest::servertype() const {
  return servertype_;
}
inline void RegisterRequest::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
}

// required string endpoint = 2;
inline bool RegisterRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterRequest::clear_endpoint() {
  if (endpoint_ != &::google::protobuf::internal::kEmptyString) {
    endpoint_->clear();
  }
  clear_has_endpoint();
}
inline const ::std::string& RegisterRequest::endpoint() const {
  return *endpoint_;
}
inline void RegisterRequest::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::kEmptyString) {
    endpoint_ = new ::std::string;
  }
  endpoint_->assign(value);
}
inline void RegisterRequest::set_endpoint(const char* value) {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::kEmptyString) {
    endpoint_ = new ::std::string;
  }
  endpoint_->assign(value);
}
inline void RegisterRequest::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::kEmptyString) {
    endpoint_ = new ::std::string;
  }
  endpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterRequest::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::kEmptyString) {
    endpoint_ = new ::std::string;
  }
  return endpoint_;
}
inline ::std::string* RegisterRequest::release_endpoint() {
  clear_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = endpoint_;
    endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete endpoint_;
  }
  if (endpoint) {
    set_has_endpoint();
    endpoint_ = endpoint;
  } else {
    clear_has_endpoint();
    endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes servername = 3;
inline bool RegisterRequest::has_servername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterRequest::set_has_servername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterRequest::clear_has_servername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterRequest::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& RegisterRequest::servername() const {
  return *servername_;
}
inline void RegisterRequest::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void RegisterRequest::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void RegisterRequest::set_servername(const void* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterRequest::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* RegisterRequest::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterRequest::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverid = 4;
inline bool RegisterRequest::has_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterRequest::set_has_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterRequest::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterRequest::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 RegisterRequest::serverid() const {
  return serverid_;
}
inline void RegisterRequest::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required uint32 serverregion = 5;
inline bool RegisterRequest::has_serverregion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegisterRequest::set_has_serverregion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegisterRequest::clear_has_serverregion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegisterRequest::clear_serverregion() {
  serverregion_ = 0u;
  clear_has_serverregion();
}
inline ::google::protobuf::uint32 RegisterRequest::serverregion() const {
  return serverregion_;
}
inline void RegisterRequest::set_serverregion(::google::protobuf::uint32 value) {
  set_has_serverregion();
  serverregion_ = value;
}

// optional bytes projectname = 6;
inline bool RegisterRequest::has_projectname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegisterRequest::set_has_projectname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegisterRequest::clear_has_projectname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegisterRequest::clear_projectname() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    projectname_->clear();
  }
  clear_has_projectname();
}
inline const ::std::string& RegisterRequest::projectname() const {
  return *projectname_;
}
inline void RegisterRequest::set_projectname(const ::std::string& value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void RegisterRequest::set_projectname(const char* value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void RegisterRequest::set_projectname(const void* value, size_t size) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterRequest::mutable_projectname() {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  return projectname_;
}
inline ::std::string* RegisterRequest::release_projectname() {
  clear_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = projectname_;
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterRequest::set_allocated_projectname(::std::string* projectname) {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (projectname) {
    set_has_projectname();
    projectname_ = projectname;
  } else {
    clear_has_projectname();
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string acceptaddress = 7;
inline bool RegisterRequest::has_acceptaddress() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegisterRequest::set_has_acceptaddress() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegisterRequest::clear_has_acceptaddress() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegisterRequest::clear_acceptaddress() {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    acceptaddress_->clear();
  }
  clear_has_acceptaddress();
}
inline const ::std::string& RegisterRequest::acceptaddress() const {
  return *acceptaddress_;
}
inline void RegisterRequest::set_acceptaddress(const ::std::string& value) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(value);
}
inline void RegisterRequest::set_acceptaddress(const char* value) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(value);
}
inline void RegisterRequest::set_acceptaddress(const char* value, size_t size) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterRequest::mutable_acceptaddress() {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  return acceptaddress_;
}
inline ::std::string* RegisterRequest::release_acceptaddress() {
  clear_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = acceptaddress_;
    acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterRequest::set_allocated_acceptaddress(::std::string* acceptaddress) {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete acceptaddress_;
  }
  if (acceptaddress) {
    set_has_acceptaddress();
    acceptaddress_ = acceptaddress;
  } else {
    clear_has_acceptaddress();
    acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes processpath = 8;
inline bool RegisterRequest::has_processpath() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegisterRequest::set_has_processpath() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegisterRequest::clear_has_processpath() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegisterRequest::clear_processpath() {
  if (processpath_ != &::google::protobuf::internal::kEmptyString) {
    processpath_->clear();
  }
  clear_has_processpath();
}
inline const ::std::string& RegisterRequest::processpath() const {
  return *processpath_;
}
inline void RegisterRequest::set_processpath(const ::std::string& value) {
  set_has_processpath();
  if (processpath_ == &::google::protobuf::internal::kEmptyString) {
    processpath_ = new ::std::string;
  }
  processpath_->assign(value);
}
inline void RegisterRequest::set_processpath(const char* value) {
  set_has_processpath();
  if (processpath_ == &::google::protobuf::internal::kEmptyString) {
    processpath_ = new ::std::string;
  }
  processpath_->assign(value);
}
inline void RegisterRequest::set_processpath(const void* value, size_t size) {
  set_has_processpath();
  if (processpath_ == &::google::protobuf::internal::kEmptyString) {
    processpath_ = new ::std::string;
  }
  processpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterRequest::mutable_processpath() {
  set_has_processpath();
  if (processpath_ == &::google::protobuf::internal::kEmptyString) {
    processpath_ = new ::std::string;
  }
  return processpath_;
}
inline ::std::string* RegisterRequest::release_processpath() {
  clear_has_processpath();
  if (processpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processpath_;
    processpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterRequest::set_allocated_processpath(::std::string* processpath) {
  if (processpath_ != &::google::protobuf::internal::kEmptyString) {
    delete processpath_;
  }
  if (processpath) {
    set_has_processpath();
    processpath_ = processpath;
  } else {
    clear_has_processpath();
    processpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 servantid = 9;
inline bool RegisterRequest::has_servantid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegisterRequest::set_has_servantid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RegisterRequest::clear_has_servantid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RegisterRequest::clear_servantid() {
  servantid_ = 0u;
  clear_has_servantid();
}
inline ::google::protobuf::uint32 RegisterRequest::servantid() const {
  return servantid_;
}
inline void RegisterRequest::set_servantid(::google::protobuf::uint32 value) {
  set_has_servantid();
  servantid_ = value;
}

// -------------------------------------------------------------------

// RemoveRequest

// required bytes servername = 1;
inline bool RemoveRequest::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveRequest::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveRequest::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveRequest::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& RemoveRequest::servername() const {
  return *servername_;
}
inline void RemoveRequest::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void RemoveRequest::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void RemoveRequest::set_servername(const void* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveRequest::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* RemoveRequest::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RemoveRequest::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverid = 2;
inline bool RemoveRequest::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveRequest::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveRequest::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveRequest::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 RemoveRequest::serverid() const {
  return serverid_;
}
inline void RemoveRequest::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 servertype = 3;
inline bool RemoveRequest::has_servertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoveRequest::set_has_servertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoveRequest::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoveRequest::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 RemoveRequest::servertype() const {
  return servertype_;
}
inline void RemoveRequest::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
}

// -------------------------------------------------------------------

// OperateResponse

// required int32 result = 1;
inline bool OperateResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 OperateResponse::result() const {
  return result_;
}
inline void OperateResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// KeepRegisterRequest

// required uint32 serverid = 1;
inline bool KeepRegisterRequest::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepRegisterRequest::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepRegisterRequest::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepRegisterRequest::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 KeepRegisterRequest::serverid() const {
  return serverid_;
}
inline void KeepRegisterRequest::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional bytes servername = 2;
inline bool KeepRegisterRequest::has_servername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeepRegisterRequest::set_has_servername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeepRegisterRequest::clear_has_servername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeepRegisterRequest::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& KeepRegisterRequest::servername() const {
  return *servername_;
}
inline void KeepRegisterRequest::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void KeepRegisterRequest::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void KeepRegisterRequest::set_servername(const void* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeepRegisterRequest::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* KeepRegisterRequest::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeepRegisterRequest::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string endpoint = 3;
inline bool KeepRegisterRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeepRegisterRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KeepRegisterRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KeepRegisterRequest::clear_endpoint() {
  if (endpoint_ != &::google::protobuf::internal::kEmptyString) {
    endpoint_->clear();
  }
  clear_has_endpoint();
}
inline const ::std::string& KeepRegisterRequest::endpoint() const {
  return *endpoint_;
}
inline void KeepRegisterRequest::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::kEmptyString) {
    endpoint_ = new ::std::string;
  }
  endpoint_->assign(value);
}
inline void KeepRegisterRequest::set_endpoint(const char* value) {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::kEmptyString) {
    endpoint_ = new ::std::string;
  }
  endpoint_->assign(value);
}
inline void KeepRegisterRequest::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::kEmptyString) {
    endpoint_ = new ::std::string;
  }
  endpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeepRegisterRequest::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::kEmptyString) {
    endpoint_ = new ::std::string;
  }
  return endpoint_;
}
inline ::std::string* KeepRegisterRequest::release_endpoint() {
  clear_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = endpoint_;
    endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeepRegisterRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete endpoint_;
  }
  if (endpoint) {
    set_has_endpoint();
    endpoint_ = endpoint;
  } else {
    clear_has_endpoint();
    endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 servertype = 4;
inline bool KeepRegisterRequest::has_servertype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KeepRegisterRequest::set_has_servertype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KeepRegisterRequest::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KeepRegisterRequest::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 KeepRegisterRequest::servertype() const {
  return servertype_;
}
inline void KeepRegisterRequest::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
}

// optional uint32 serverload = 5;
inline bool KeepRegisterRequest::has_serverload() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KeepRegisterRequest::set_has_serverload() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KeepRegisterRequest::clear_has_serverload() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KeepRegisterRequest::clear_serverload() {
  serverload_ = 0u;
  clear_has_serverload();
}
inline ::google::protobuf::uint32 KeepRegisterRequest::serverload() const {
  return serverload_;
}
inline void KeepRegisterRequest::set_serverload(::google::protobuf::uint32 value) {
  set_has_serverload();
  serverload_ = value;
}

// optional int32 serverstatus = 6;
inline bool KeepRegisterRequest::has_serverstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KeepRegisterRequest::set_has_serverstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KeepRegisterRequest::clear_has_serverstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KeepRegisterRequest::clear_serverstatus() {
  serverstatus_ = 0;
  clear_has_serverstatus();
}
inline ::google::protobuf::int32 KeepRegisterRequest::serverstatus() const {
  return serverstatus_;
}
inline void KeepRegisterRequest::set_serverstatus(::google::protobuf::int32 value) {
  set_has_serverstatus();
  serverstatus_ = value;
}

// optional bytes serverstate = 7;
inline bool KeepRegisterRequest::has_serverstate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KeepRegisterRequest::set_has_serverstate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KeepRegisterRequest::clear_has_serverstate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KeepRegisterRequest::clear_serverstate() {
  if (serverstate_ != &::google::protobuf::internal::kEmptyString) {
    serverstate_->clear();
  }
  clear_has_serverstate();
}
inline const ::std::string& KeepRegisterRequest::serverstate() const {
  return *serverstate_;
}
inline void KeepRegisterRequest::set_serverstate(const ::std::string& value) {
  set_has_serverstate();
  if (serverstate_ == &::google::protobuf::internal::kEmptyString) {
    serverstate_ = new ::std::string;
  }
  serverstate_->assign(value);
}
inline void KeepRegisterRequest::set_serverstate(const char* value) {
  set_has_serverstate();
  if (serverstate_ == &::google::protobuf::internal::kEmptyString) {
    serverstate_ = new ::std::string;
  }
  serverstate_->assign(value);
}
inline void KeepRegisterRequest::set_serverstate(const void* value, size_t size) {
  set_has_serverstate();
  if (serverstate_ == &::google::protobuf::internal::kEmptyString) {
    serverstate_ = new ::std::string;
  }
  serverstate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeepRegisterRequest::mutable_serverstate() {
  set_has_serverstate();
  if (serverstate_ == &::google::protobuf::internal::kEmptyString) {
    serverstate_ = new ::std::string;
  }
  return serverstate_;
}
inline ::std::string* KeepRegisterRequest::release_serverstate() {
  clear_has_serverstate();
  if (serverstate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverstate_;
    serverstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeepRegisterRequest::set_allocated_serverstate(::std::string* serverstate) {
  if (serverstate_ != &::google::protobuf::internal::kEmptyString) {
    delete serverstate_;
  }
  if (serverstate) {
    set_has_serverstate();
    serverstate_ = serverstate;
  } else {
    clear_has_serverstate();
    serverstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// KeepRegisterResponse

// required bool reregister = 1;
inline bool KeepRegisterResponse::has_reregister() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepRegisterResponse::set_has_reregister() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepRegisterResponse::clear_has_reregister() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepRegisterResponse::clear_reregister() {
  reregister_ = false;
  clear_has_reregister();
}
inline bool KeepRegisterResponse::reregister() const {
  return reregister_;
}
inline void KeepRegisterResponse::set_reregister(bool value) {
  set_has_reregister();
  reregister_ = value;
}

// -------------------------------------------------------------------

// UserLoginRequest

// required bytes servername = 1;
inline bool UserLoginRequest::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginRequest::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginRequest::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginRequest::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& UserLoginRequest::servername() const {
  return *servername_;
}
inline void UserLoginRequest::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void UserLoginRequest::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void UserLoginRequest::set_servername(const void* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginRequest::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* UserLoginRequest::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLoginRequest::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverid = 2;
inline bool UserLoginRequest::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginRequest::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginRequest::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginRequest::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 UserLoginRequest::serverid() const {
  return serverid_;
}
inline void UserLoginRequest::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required uint64 userid = 3;
inline bool UserLoginRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLoginRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLoginRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLoginRequest::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 UserLoginRequest::userid() const {
  return userid_;
}
inline void UserLoginRequest::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// UserLogoutRequest

// required bytes servername = 1;
inline bool UserLogoutRequest::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLogoutRequest::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLogoutRequest::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLogoutRequest::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& UserLogoutRequest::servername() const {
  return *servername_;
}
inline void UserLogoutRequest::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void UserLogoutRequest::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void UserLogoutRequest::set_servername(const void* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogoutRequest::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* UserLogoutRequest::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLogoutRequest::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 userid = 2;
inline bool UserLogoutRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLogoutRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLogoutRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLogoutRequest::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 UserLogoutRequest::userid() const {
  return userid_;
}
inline void UserLogoutRequest::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// LowLoadNodeRequest

// required bytes servername = 1;
inline bool LowLoadNodeRequest::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LowLoadNodeRequest::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LowLoadNodeRequest::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LowLoadNodeRequest::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& LowLoadNodeRequest::servername() const {
  return *servername_;
}
inline void LowLoadNodeRequest::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void LowLoadNodeRequest::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void LowLoadNodeRequest::set_servername(const void* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LowLoadNodeRequest::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* LowLoadNodeRequest::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LowLoadNodeRequest::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LowLoadNodeResponse

// required string acceptaddress = 1;
inline bool LowLoadNodeResponse::has_acceptaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LowLoadNodeResponse::set_has_acceptaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LowLoadNodeResponse::clear_has_acceptaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LowLoadNodeResponse::clear_acceptaddress() {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    acceptaddress_->clear();
  }
  clear_has_acceptaddress();
}
inline const ::std::string& LowLoadNodeResponse::acceptaddress() const {
  return *acceptaddress_;
}
inline void LowLoadNodeResponse::set_acceptaddress(const ::std::string& value) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(value);
}
inline void LowLoadNodeResponse::set_acceptaddress(const char* value) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(value);
}
inline void LowLoadNodeResponse::set_acceptaddress(const char* value, size_t size) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LowLoadNodeResponse::mutable_acceptaddress() {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  return acceptaddress_;
}
inline ::std::string* LowLoadNodeResponse::release_acceptaddress() {
  clear_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = acceptaddress_;
    acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LowLoadNodeResponse::set_allocated_acceptaddress(::std::string* acceptaddress) {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete acceptaddress_;
  }
  if (acceptaddress) {
    set_has_acceptaddress();
    acceptaddress_ = acceptaddress;
  } else {
    clear_has_acceptaddress();
    acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverregion = 2;
inline bool LowLoadNodeResponse::has_serverregion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LowLoadNodeResponse::set_has_serverregion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LowLoadNodeResponse::clear_has_serverregion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LowLoadNodeResponse::clear_serverregion() {
  serverregion_ = 0u;
  clear_has_serverregion();
}
inline ::google::protobuf::uint32 LowLoadNodeResponse::serverregion() const {
  return serverregion_;
}
inline void LowLoadNodeResponse::set_serverregion(::google::protobuf::uint32 value) {
  set_has_serverregion();
  serverregion_ = value;
}

// -------------------------------------------------------------------

// RegionLowLoadRequest

// required bytes servername = 1;
inline bool RegionLowLoadRequest::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionLowLoadRequest::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionLowLoadRequest::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionLowLoadRequest::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& RegionLowLoadRequest::servername() const {
  return *servername_;
}
inline void RegionLowLoadRequest::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void RegionLowLoadRequest::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void RegionLowLoadRequest::set_servername(const void* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegionLowLoadRequest::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* RegionLowLoadRequest::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegionLowLoadRequest::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverregion = 2;
inline bool RegionLowLoadRequest::has_serverregion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionLowLoadRequest::set_has_serverregion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionLowLoadRequest::clear_has_serverregion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionLowLoadRequest::clear_serverregion() {
  serverregion_ = 0u;
  clear_has_serverregion();
}
inline ::google::protobuf::uint32 RegionLowLoadRequest::serverregion() const {
  return serverregion_;
}
inline void RegionLowLoadRequest::set_serverregion(::google::protobuf::uint32 value) {
  set_has_serverregion();
  serverregion_ = value;
}

// -------------------------------------------------------------------

// RegionLowLoadResponse

// required string acceptaddress = 1;
inline bool RegionLowLoadResponse::has_acceptaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionLowLoadResponse::set_has_acceptaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionLowLoadResponse::clear_has_acceptaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionLowLoadResponse::clear_acceptaddress() {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    acceptaddress_->clear();
  }
  clear_has_acceptaddress();
}
inline const ::std::string& RegionLowLoadResponse::acceptaddress() const {
  return *acceptaddress_;
}
inline void RegionLowLoadResponse::set_acceptaddress(const ::std::string& value) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(value);
}
inline void RegionLowLoadResponse::set_acceptaddress(const char* value) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(value);
}
inline void RegionLowLoadResponse::set_acceptaddress(const char* value, size_t size) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegionLowLoadResponse::mutable_acceptaddress() {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  return acceptaddress_;
}
inline ::std::string* RegionLowLoadResponse::release_acceptaddress() {
  clear_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = acceptaddress_;
    acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegionLowLoadResponse::set_allocated_acceptaddress(::std::string* acceptaddress) {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete acceptaddress_;
  }
  if (acceptaddress) {
    set_has_acceptaddress();
    acceptaddress_ = acceptaddress;
  } else {
    clear_has_acceptaddress();
    acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NodeListRequest

// required bytes servername = 1;
inline bool NodeListRequest::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeListRequest::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeListRequest::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeListRequest::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& NodeListRequest::servername() const {
  return *servername_;
}
inline void NodeListRequest::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void NodeListRequest::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void NodeListRequest::set_servername(const void* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeListRequest::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* NodeListRequest::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeListRequest::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NodeDetail

// required uint32 serverregion = 1;
inline bool NodeDetail::has_serverregion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeDetail::set_has_serverregion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeDetail::clear_has_serverregion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeDetail::clear_serverregion() {
  serverregion_ = 0u;
  clear_has_serverregion();
}
inline ::google::protobuf::uint32 NodeDetail::serverregion() const {
  return serverregion_;
}
inline void NodeDetail::set_serverregion(::google::protobuf::uint32 value) {
  set_has_serverregion();
  serverregion_ = value;
}

// required string acceptaddress = 2;
inline bool NodeDetail::has_acceptaddress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeDetail::set_has_acceptaddress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeDetail::clear_has_acceptaddress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeDetail::clear_acceptaddress() {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    acceptaddress_->clear();
  }
  clear_has_acceptaddress();
}
inline const ::std::string& NodeDetail::acceptaddress() const {
  return *acceptaddress_;
}
inline void NodeDetail::set_acceptaddress(const ::std::string& value) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(value);
}
inline void NodeDetail::set_acceptaddress(const char* value) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(value);
}
inline void NodeDetail::set_acceptaddress(const char* value, size_t size) {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  acceptaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeDetail::mutable_acceptaddress() {
  set_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    acceptaddress_ = new ::std::string;
  }
  return acceptaddress_;
}
inline ::std::string* NodeDetail::release_acceptaddress() {
  clear_has_acceptaddress();
  if (acceptaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = acceptaddress_;
    acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeDetail::set_allocated_acceptaddress(::std::string* acceptaddress) {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete acceptaddress_;
  }
  if (acceptaddress) {
    set_has_acceptaddress();
    acceptaddress_ = acceptaddress;
  } else {
    clear_has_acceptaddress();
    acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 serverload = 3;
inline bool NodeDetail::has_serverload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeDetail::set_has_serverload() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeDetail::clear_has_serverload() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeDetail::clear_serverload() {
  serverload_ = 0;
  clear_has_serverload();
}
inline ::google::protobuf::int32 NodeDetail::serverload() const {
  return serverload_;
}
inline void NodeDetail::set_serverload(::google::protobuf::int32 value) {
  set_has_serverload();
  serverload_ = value;
}

// -------------------------------------------------------------------

// NodeListResponse

// repeated .node.NodeDetail nodes = 1;
inline int NodeListResponse::nodes_size() const {
  return nodes_.size();
}
inline void NodeListResponse::clear_nodes() {
  nodes_.Clear();
}
inline const ::node::NodeDetail& NodeListResponse::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::node::NodeDetail* NodeListResponse::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::node::NodeDetail* NodeListResponse::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::node::NodeDetail >&
NodeListResponse::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::node::NodeDetail >*
NodeListResponse::mutable_nodes() {
  return &nodes_;
}

// -------------------------------------------------------------------

// CreateIdRequest

// required uint64 account = 1;
inline bool CreateIdRequest::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateIdRequest::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateIdRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateIdRequest::clear_account() {
  account_ = GOOGLE_ULONGLONG(0);
  clear_has_account();
}
inline ::google::protobuf::uint64 CreateIdRequest::account() const {
  return account_;
}
inline void CreateIdRequest::set_account(::google::protobuf::uint64 value) {
  set_has_account();
  account_ = value;
}

// -------------------------------------------------------------------

// CreateIdResponse

// required int32 result = 1;
inline bool CreateIdResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateIdResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateIdResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateIdResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CreateIdResponse::result() const {
  return result_;
}
inline void CreateIdResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 userid = 2;
inline bool CreateIdResponse::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateIdResponse::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateIdResponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateIdResponse::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 CreateIdResponse::userid() const {
  return userid_;
}
inline void CreateIdResponse::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional uint32 serverregion = 3;
inline bool CreateIdResponse::has_serverregion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateIdResponse::set_has_serverregion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateIdResponse::clear_has_serverregion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateIdResponse::clear_serverregion() {
  serverregion_ = 0u;
  clear_has_serverregion();
}
inline ::google::protobuf::uint32 CreateIdResponse::serverregion() const {
  return serverregion_;
}
inline void CreateIdResponse::set_serverregion(::google::protobuf::uint32 value) {
  set_has_serverregion();
  serverregion_ = value;
}

// optional string createtime = 4;
inline bool CreateIdResponse::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateIdResponse::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateIdResponse::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateIdResponse::clear_createtime() {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    createtime_->clear();
  }
  clear_has_createtime();
}
inline const ::std::string& CreateIdResponse::createtime() const {
  return *createtime_;
}
inline void CreateIdResponse::set_createtime(const ::std::string& value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void CreateIdResponse::set_createtime(const char* value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void CreateIdResponse::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateIdResponse::mutable_createtime() {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  return createtime_;
}
inline ::std::string* CreateIdResponse::release_createtime() {
  clear_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createtime_;
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateIdResponse::set_allocated_createtime(::std::string* createtime) {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (createtime) {
    set_has_createtime();
    createtime_ = createtime;
  } else {
    clear_has_createtime();
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CheckIdRequest

// required uint64 account = 1;
inline bool CheckIdRequest::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckIdRequest::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckIdRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckIdRequest::clear_account() {
  account_ = GOOGLE_ULONGLONG(0);
  clear_has_account();
}
inline ::google::protobuf::uint64 CheckIdRequest::account() const {
  return account_;
}
inline void CheckIdRequest::set_account(::google::protobuf::uint64 value) {
  set_has_account();
  account_ = value;
}

// -------------------------------------------------------------------

// CheckIdResponse

// required int32 result = 1;
inline bool CheckIdResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckIdResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckIdResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckIdResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CheckIdResponse::result() const {
  return result_;
}
inline void CheckIdResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 userid = 2;
inline bool CheckIdResponse::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckIdResponse::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckIdResponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckIdResponse::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 CheckIdResponse::userid() const {
  return userid_;
}
inline void CheckIdResponse::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string createtime = 3;
inline bool CheckIdResponse::has_createtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckIdResponse::set_has_createtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckIdResponse::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckIdResponse::clear_createtime() {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    createtime_->clear();
  }
  clear_has_createtime();
}
inline const ::std::string& CheckIdResponse::createtime() const {
  return *createtime_;
}
inline void CheckIdResponse::set_createtime(const ::std::string& value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void CheckIdResponse::set_createtime(const char* value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void CheckIdResponse::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CheckIdResponse::mutable_createtime() {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  return createtime_;
}
inline ::std::string* CheckIdResponse::release_createtime() {
  clear_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createtime_;
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CheckIdResponse::set_allocated_createtime(::std::string* createtime) {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (createtime) {
    set_has_createtime();
    createtime_ = createtime;
  } else {
    clear_has_createtime();
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 serverregion = 4;
inline bool CheckIdResponse::has_serverregion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckIdResponse::set_has_serverregion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckIdResponse::clear_has_serverregion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckIdResponse::clear_serverregion() {
  serverregion_ = 0u;
  clear_has_serverregion();
}
inline ::google::protobuf::uint32 CheckIdResponse::serverregion() const {
  return serverregion_;
}
inline void CheckIdResponse::set_serverregion(::google::protobuf::uint32 value) {
  set_has_serverregion();
  serverregion_ = value;
}

// optional uint64 cas = 5;
inline bool CheckIdResponse::has_cas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckIdResponse::set_has_cas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckIdResponse::clear_has_cas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckIdResponse::clear_cas() {
  cas_ = GOOGLE_ULONGLONG(0);
  clear_has_cas();
}
inline ::google::protobuf::uint64 CheckIdResponse::cas() const {
  return cas_;
}
inline void CheckIdResponse::set_cas(::google::protobuf::uint64 value) {
  set_has_cas();
  cas_ = value;
}

// -------------------------------------------------------------------

// UpdateRegionRequest

// required uint64 account = 1;
inline bool UpdateRegionRequest::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateRegionRequest::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateRegionRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateRegionRequest::clear_account() {
  account_ = GOOGLE_ULONGLONG(0);
  clear_has_account();
}
inline ::google::protobuf::uint64 UpdateRegionRequest::account() const {
  return account_;
}
inline void UpdateRegionRequest::set_account(::google::protobuf::uint64 value) {
  set_has_account();
  account_ = value;
}

// required uint32 serverregion = 2;
inline bool UpdateRegionRequest::has_serverregion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateRegionRequest::set_has_serverregion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateRegionRequest::clear_has_serverregion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateRegionRequest::clear_serverregion() {
  serverregion_ = 0u;
  clear_has_serverregion();
}
inline ::google::protobuf::uint32 UpdateRegionRequest::serverregion() const {
  return serverregion_;
}
inline void UpdateRegionRequest::set_serverregion(::google::protobuf::uint32 value) {
  set_has_serverregion();
  serverregion_ = value;
}

// required uint64 cas = 3;
inline bool UpdateRegionRequest::has_cas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateRegionRequest::set_has_cas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateRegionRequest::clear_has_cas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateRegionRequest::clear_cas() {
  cas_ = GOOGLE_ULONGLONG(0);
  clear_has_cas();
}
inline ::google::protobuf::uint64 UpdateRegionRequest::cas() const {
  return cas_;
}
inline void UpdateRegionRequest::set_cas(::google::protobuf::uint64 value) {
  set_has_cas();
  cas_ = value;
}

// -------------------------------------------------------------------

// UpdateRegionResponse

// required int32 result = 1;
inline bool UpdateRegionResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateRegionResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateRegionResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateRegionResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UpdateRegionResponse::result() const {
  return result_;
}
inline void UpdateRegionResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CacheStoreRequest

// required uint32 serverid = 1;
inline bool CacheStoreRequest::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheStoreRequest::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheStoreRequest::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheStoreRequest::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 CacheStoreRequest::serverid() const {
  return serverid_;
}
inline void CacheStoreRequest::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required int32 routetype = 2;
inline bool CacheStoreRequest::has_routetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheStoreRequest::set_has_routetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheStoreRequest::clear_has_routetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheStoreRequest::clear_routetype() {
  routetype_ = 0;
  clear_has_routetype();
}
inline ::google::protobuf::int32 CacheStoreRequest::routetype() const {
  return routetype_;
}
inline void CacheStoreRequest::set_routetype(::google::protobuf::int32 value) {
  set_has_routetype();
  routetype_ = value;
}

// required uint64 route = 3;
inline bool CacheStoreRequest::has_route() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheStoreRequest::set_has_route() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheStoreRequest::clear_has_route() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheStoreRequest::clear_route() {
  route_ = GOOGLE_ULONGLONG(0);
  clear_has_route();
}
inline ::google::protobuf::uint64 CacheStoreRequest::route() const {
  return route_;
}
inline void CacheStoreRequest::set_route(::google::protobuf::uint64 value) {
  set_has_route();
  route_ = value;
}

// repeated string keys = 4;
inline int CacheStoreRequest::keys_size() const {
  return keys_.size();
}
inline void CacheStoreRequest::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& CacheStoreRequest::keys(int index) const {
  return keys_.Get(index);
}
inline ::std::string* CacheStoreRequest::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline void CacheStoreRequest::set_keys(int index, const ::std::string& value) {
  keys_.Mutable(index)->assign(value);
}
inline void CacheStoreRequest::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
}
inline void CacheStoreRequest::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheStoreRequest::add_keys() {
  return keys_.Add();
}
inline void CacheStoreRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
}
inline void CacheStoreRequest::add_keys(const char* value) {
  keys_.Add()->assign(value);
}
inline void CacheStoreRequest::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CacheStoreRequest::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CacheStoreRequest::mutable_keys() {
  return &keys_;
}

// -------------------------------------------------------------------

// CacheKeyResult

// required string key = 1;
inline bool CacheKeyResult::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheKeyResult::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheKeyResult::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheKeyResult::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CacheKeyResult::key() const {
  return *key_;
}
inline void CacheKeyResult::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CacheKeyResult::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CacheKeyResult::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheKeyResult::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CacheKeyResult::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CacheKeyResult::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 result = 2;
inline bool CacheKeyResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheKeyResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheKeyResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheKeyResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CacheKeyResult::result() const {
  return result_;
}
inline void CacheKeyResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CacheStoreResponse

// required int32 result = 1;
inline bool CacheStoreResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheStoreResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheStoreResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheStoreResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CacheStoreResponse::result() const {
  return result_;
}
inline void CacheStoreResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .node.CacheKeyResult keyresults = 2;
inline int CacheStoreResponse::keyresults_size() const {
  return keyresults_.size();
}
inline void CacheStoreResponse::clear_keyresults() {
  keyresults_.Clear();
}
inline const ::node::CacheKeyResult& CacheStoreResponse::keyresults(int index) const {
  return keyresults_.Get(index);
}
inline ::node::CacheKeyResult* CacheStoreResponse::mutable_keyresults(int index) {
  return keyresults_.Mutable(index);
}
inline ::node::CacheKeyResult* CacheStoreResponse::add_keyresults() {
  return keyresults_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::node::CacheKeyResult >&
CacheStoreResponse::keyresults() const {
  return keyresults_;
}
inline ::google::protobuf::RepeatedPtrField< ::node::CacheKeyResult >*
CacheStoreResponse::mutable_keyresults() {
  return &keyresults_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace node

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_controlcentre_2eproto__INCLUDED
