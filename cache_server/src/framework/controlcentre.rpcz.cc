// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "controlcentre.rpcz.h"
#include "controlcentre.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/stubs/once.h>
#include <rpcz/rpcz.hpp>
namespace {
const ::google::protobuf::ServiceDescriptor* ControlCentreService_descriptor_ = NULL;
}  // anonymouse namespace

namespace node {

void rpcz_protobuf_AssignDesc_controlcentre_2eproto() {
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "controlcentre.proto");
  GOOGLE_CHECK(file != NULL);
  ControlCentreService_descriptor_ = file->service(0);
}

namespace {

::google::protobuf::internal::once_flag protobuf_AssignDescriptors_once_;
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::internal::call_once(protobuf_AssignDescriptors_once_,
                 &rpcz_protobuf_AssignDesc_controlcentre_2eproto);
}

}  // namespace

// ===================================================================

ControlCentreService::~ControlCentreService() {}

const ::google::protobuf::ServiceDescriptor* ControlCentreService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlCentreService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ControlCentreService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlCentreService_descriptor_;
}

void ControlCentreService::RegisterModule(const ::node::RegisterRequest&,
                         ::rpcz::reply< ::node::RegisterResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method RegisterModule() not implemented.");
}

void ControlCentreService::RemoveModule(const ::node::RemoveRequest&,
                         ::rpcz::reply< ::node::RemoveResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method RemoveModule() not implemented.");
}

void ControlCentreService::KeepRegister(const ::node::KeepRegisterRequest&,
                         ::rpcz::reply< ::node::KeepRegisterResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method KeepRegister() not implemented.");
}

void ControlCentreService::UserLogin(const ::node::UserLoginRequest&,
                         ::rpcz::reply< ::node::ControlCentreVoid> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method UserLogin() not implemented.");
}

void ControlCentreService::UserLogout(const ::node::UserLogoutRequest&,
                         ::rpcz::reply< ::node::ControlCentreVoid> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method UserLogout() not implemented.");
}

void ControlCentreService::GetLowLoadNode(const ::node::LowLoadNodeRequest&,
                         ::rpcz::reply< ::node::LowLoadNodeResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method GetLowLoadNode() not implemented.");
}

void ControlCentreService::GetRegionLowLoad(const ::node::RegionLowLoadRequest&,
                         ::rpcz::reply< ::node::RegionLowLoadResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method GetRegionLowLoad() not implemented.");
}

void ControlCentreService::GetNodeList(const ::node::NodeListRequest&,
                         ::rpcz::reply< ::node::NodeListResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method GetNodeList() not implemented.");
}

void ControlCentreService::GetUsers(const ::node::GetUserRequest&,
                         ::rpcz::reply< ::node::GetUserResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method GetUsers() not implemented.");
}

void ControlCentreService::CreateUser(const ::node::CreateUserRequest&,
                         ::rpcz::reply< ::node::CreateUserResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method CreateUser() not implemented.");
}

void ControlCentreService::CheckUser(const ::node::CheckUserRequest&,
                         ::rpcz::reply< ::node::CheckUserResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method CheckUser() not implemented.");
}

void ControlCentreService::UpdateUser(const ::node::UpdateUserRequest&,
                         ::rpcz::reply< ::node::UpdateUserResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method UpdateUser() not implemented.");
}

void ControlCentreService::DeleteUser(const ::node::DeleteUserRequest&,
                         ::rpcz::reply< ::node::DeleteUserResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method DeleteUser() not implemented.");
}

void ControlCentreService::GetEndPointFromServant(const ::node::EndPointRequest&,
                         ::rpcz::reply< ::node::EndPointResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method GetEndPointFromServant() not implemented.");
}

void ControlCentreService::SeizeServer(const ::node::SeizeRequest&,
                         ::rpcz::reply< ::node::SeizeResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method SeizeServer() not implemented.");
}

void ControlCentreService::FreeServer(const ::node::FreeRequest&,
                         ::rpcz::reply< ::node::FreeResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method FreeServer() not implemented.");
}

void ControlCentreService::GenerateGuid(const ::node::ControlCentreVoid&,
                         ::rpcz::reply< ::node::GuidResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method GenerateGuid() not implemented.");
}

void ControlCentreService::call_method(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::Message& request,
                             ::rpcz::server_channel* channel) {
  GOOGLE_DCHECK_EQ(method->service(), ControlCentreService_descriptor_);
  switch(method->index()) {
    case 0:
      RegisterModule(
          *::google::protobuf::down_cast<const ::node::RegisterRequest*>(&request),
          ::rpcz::reply< ::node::RegisterResponse>(channel));
      break;
    case 1:
      RemoveModule(
          *::google::protobuf::down_cast<const ::node::RemoveRequest*>(&request),
          ::rpcz::reply< ::node::RemoveResponse>(channel));
      break;
    case 2:
      KeepRegister(
          *::google::protobuf::down_cast<const ::node::KeepRegisterRequest*>(&request),
          ::rpcz::reply< ::node::KeepRegisterResponse>(channel));
      break;
    case 3:
      UserLogin(
          *::google::protobuf::down_cast<const ::node::UserLoginRequest*>(&request),
          ::rpcz::reply< ::node::ControlCentreVoid>(channel));
      break;
    case 4:
      UserLogout(
          *::google::protobuf::down_cast<const ::node::UserLogoutRequest*>(&request),
          ::rpcz::reply< ::node::ControlCentreVoid>(channel));
      break;
    case 5:
      GetLowLoadNode(
          *::google::protobuf::down_cast<const ::node::LowLoadNodeRequest*>(&request),
          ::rpcz::reply< ::node::LowLoadNodeResponse>(channel));
      break;
    case 6:
      GetRegionLowLoad(
          *::google::protobuf::down_cast<const ::node::RegionLowLoadRequest*>(&request),
          ::rpcz::reply< ::node::RegionLowLoadResponse>(channel));
      break;
    case 7:
      GetNodeList(
          *::google::protobuf::down_cast<const ::node::NodeListRequest*>(&request),
          ::rpcz::reply< ::node::NodeListResponse>(channel));
      break;
    case 8:
      GetUsers(
          *::google::protobuf::down_cast<const ::node::GetUserRequest*>(&request),
          ::rpcz::reply< ::node::GetUserResponse>(channel));
      break;
    case 9:
      CreateUser(
          *::google::protobuf::down_cast<const ::node::CreateUserRequest*>(&request),
          ::rpcz::reply< ::node::CreateUserResponse>(channel));
      break;
    case 10:
      CheckUser(
          *::google::protobuf::down_cast<const ::node::CheckUserRequest*>(&request),
          ::rpcz::reply< ::node::CheckUserResponse>(channel));
      break;
    case 11:
      UpdateUser(
          *::google::protobuf::down_cast<const ::node::UpdateUserRequest*>(&request),
          ::rpcz::reply< ::node::UpdateUserResponse>(channel));
      break;
    case 12:
      DeleteUser(
          *::google::protobuf::down_cast<const ::node::DeleteUserRequest*>(&request),
          ::rpcz::reply< ::node::DeleteUserResponse>(channel));
      break;
    case 13:
      GetEndPointFromServant(
          *::google::protobuf::down_cast<const ::node::EndPointRequest*>(&request),
          ::rpcz::reply< ::node::EndPointResponse>(channel));
      break;
    case 14:
      SeizeServer(
          *::google::protobuf::down_cast<const ::node::SeizeRequest*>(&request),
          ::rpcz::reply< ::node::SeizeResponse>(channel));
      break;
    case 15:
      FreeServer(
          *::google::protobuf::down_cast<const ::node::FreeRequest*>(&request),
          ::rpcz::reply< ::node::FreeResponse>(channel));
      break;
    case 16:
      GenerateGuid(
          *::google::protobuf::down_cast<const ::node::ControlCentreVoid*>(&request),
          ::rpcz::reply< ::node::GuidResponse>(channel));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ControlCentreService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::node::RegisterRequest::default_instance();
    case 1:
      return ::node::RemoveRequest::default_instance();
    case 2:
      return ::node::KeepRegisterRequest::default_instance();
    case 3:
      return ::node::UserLoginRequest::default_instance();
    case 4:
      return ::node::UserLogoutRequest::default_instance();
    case 5:
      return ::node::LowLoadNodeRequest::default_instance();
    case 6:
      return ::node::RegionLowLoadRequest::default_instance();
    case 7:
      return ::node::NodeListRequest::default_instance();
    case 8:
      return ::node::GetUserRequest::default_instance();
    case 9:
      return ::node::CreateUserRequest::default_instance();
    case 10:
      return ::node::CheckUserRequest::default_instance();
    case 11:
      return ::node::UpdateUserRequest::default_instance();
    case 12:
      return ::node::DeleteUserRequest::default_instance();
    case 13:
      return ::node::EndPointRequest::default_instance();
    case 14:
      return ::node::SeizeRequest::default_instance();
    case 15:
      return ::node::FreeRequest::default_instance();
    case 16:
      return ::node::ControlCentreVoid::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ControlCentreService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::node::RegisterResponse::default_instance();
    case 1:
      return ::node::RemoveResponse::default_instance();
    case 2:
      return ::node::KeepRegisterResponse::default_instance();
    case 3:
      return ::node::ControlCentreVoid::default_instance();
    case 4:
      return ::node::ControlCentreVoid::default_instance();
    case 5:
      return ::node::LowLoadNodeResponse::default_instance();
    case 6:
      return ::node::RegionLowLoadResponse::default_instance();
    case 7:
      return ::node::NodeListResponse::default_instance();
    case 8:
      return ::node::GetUserResponse::default_instance();
    case 9:
      return ::node::CreateUserResponse::default_instance();
    case 10:
      return ::node::CheckUserResponse::default_instance();
    case 11:
      return ::node::UpdateUserResponse::default_instance();
    case 12:
      return ::node::DeleteUserResponse::default_instance();
    case 13:
      return ::node::EndPointResponse::default_instance();
    case 14:
      return ::node::SeizeResponse::default_instance();
    case 15:
      return ::node::FreeResponse::default_instance();
    case 16:
      return ::node::GuidResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ControlCentreService_Stub::ControlCentreService_Stub(::rpcz::rpc_channel* channel,
                                   const ::std::string& service_name,
                                   bool owns_channel)
  : channel_(channel), service_name_(service_name),
    owns_channel_(owns_channel) {}
ControlCentreService_Stub::ControlCentreService_Stub(::rpcz::rpc_channel* channel,
                                   bool owns_channel)
  : channel_(channel), service_name_(ControlCentreService::descriptor()->name()),
    owns_channel_(owns_channel) {}
ControlCentreService_Stub::~ControlCentreService_Stub() {
  if (owns_channel_) delete channel_;
}

void ControlCentreService_Stub::RegisterModule(const ::node::RegisterRequest& request,
                              ::node::RegisterResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(0),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::RegisterModule(const ::node::RegisterRequest& request,
                              ::node::RegisterResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(0),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::RemoveModule(const ::node::RemoveRequest& request,
                              ::node::RemoveResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(1),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::RemoveModule(const ::node::RemoveRequest& request,
                              ::node::RemoveResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(1),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::KeepRegister(const ::node::KeepRegisterRequest& request,
                              ::node::KeepRegisterResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(2),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::KeepRegister(const ::node::KeepRegisterRequest& request,
                              ::node::KeepRegisterResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(2),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::UserLogin(const ::node::UserLoginRequest& request,
                              ::node::ControlCentreVoid* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(3),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::UserLogin(const ::node::UserLoginRequest& request,
                              ::node::ControlCentreVoid* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(3),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::UserLogout(const ::node::UserLogoutRequest& request,
                              ::node::ControlCentreVoid* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(4),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::UserLogout(const ::node::UserLogoutRequest& request,
                              ::node::ControlCentreVoid* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(4),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::GetLowLoadNode(const ::node::LowLoadNodeRequest& request,
                              ::node::LowLoadNodeResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(5),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::GetLowLoadNode(const ::node::LowLoadNodeRequest& request,
                              ::node::LowLoadNodeResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(5),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::GetRegionLowLoad(const ::node::RegionLowLoadRequest& request,
                              ::node::RegionLowLoadResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(6),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::GetRegionLowLoad(const ::node::RegionLowLoadRequest& request,
                              ::node::RegionLowLoadResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(6),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::GetNodeList(const ::node::NodeListRequest& request,
                              ::node::NodeListResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(7),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::GetNodeList(const ::node::NodeListRequest& request,
                              ::node::NodeListResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(7),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::GetUsers(const ::node::GetUserRequest& request,
                              ::node::GetUserResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(8),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::GetUsers(const ::node::GetUserRequest& request,
                              ::node::GetUserResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(8),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::CreateUser(const ::node::CreateUserRequest& request,
                              ::node::CreateUserResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(9),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::CreateUser(const ::node::CreateUserRequest& request,
                              ::node::CreateUserResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(9),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::CheckUser(const ::node::CheckUserRequest& request,
                              ::node::CheckUserResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(10),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::CheckUser(const ::node::CheckUserRequest& request,
                              ::node::CheckUserResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(10),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::UpdateUser(const ::node::UpdateUserRequest& request,
                              ::node::UpdateUserResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(11),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::UpdateUser(const ::node::UpdateUserRequest& request,
                              ::node::UpdateUserResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(11),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::DeleteUser(const ::node::DeleteUserRequest& request,
                              ::node::DeleteUserResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(12),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::DeleteUser(const ::node::DeleteUserRequest& request,
                              ::node::DeleteUserResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(12),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::GetEndPointFromServant(const ::node::EndPointRequest& request,
                              ::node::EndPointResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(13),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::GetEndPointFromServant(const ::node::EndPointRequest& request,
                              ::node::EndPointResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(13),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::SeizeServer(const ::node::SeizeRequest& request,
                              ::node::SeizeResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(14),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::SeizeServer(const ::node::SeizeRequest& request,
                              ::node::SeizeResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(14),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::FreeServer(const ::node::FreeRequest& request,
                              ::node::FreeResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(15),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::FreeServer(const ::node::FreeRequest& request,
                              ::node::FreeResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(15),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::GenerateGuid(const ::node::ControlCentreVoid& request,
                              ::node::GuidResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(16),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::GenerateGuid(const ::node::ControlCentreVoid& request,
                              ::node::GuidResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(16),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}

}  // namespace node
