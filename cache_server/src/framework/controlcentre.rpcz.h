// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controlcentre.proto

#ifndef RPCZ_controlcentre_2eproto__INCLUDED
#define RPCZ_controlcentre_2eproto__INCLUDED

#include <string>
#include <rpcz/service.hpp>

namespace google {
namespace protobuf {
class ServiceDescriptor;
class MethodDescriptor;
}  // namespace protobuf
}  // namespace google
namespace rpcz {
class rpc_controller;
class closure;
class rpc_channel;
}  //namesacpe rpcz
#include "controlcentre.pb.h"

namespace node {
void rpcz_protobuf_AssignDesc_controlcentre_2eproto();
void rpcz_protobuf_ShutdownFile_controlcentre_2eproto();

class ControlCentreService_Stub;

class ControlCentreService : public rpcz::service {
 protected:
  // This class should be treated as an abstract interface.
  inline ControlCentreService() {};
 public:
  virtual ~ControlCentreService();

  typedef ControlCentreService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void RegisterModule(const ::node::RegisterRequest& request,
                       ::rpcz::reply< ::node::OperateResponse> response);
  virtual void RemoveModule(const ::node::RemoveRequest& request,
                       ::rpcz::reply< ::node::OperateResponse> response);
  virtual void KeepRegister(const ::node::KeepRegisterRequest& request,
                       ::rpcz::reply< ::node::KeepRegisterResponse> response);
  virtual void UserLogin(const ::node::UserLoginRequest& request,
                       ::rpcz::reply< ::node::ControlCentreVoid> response);
  virtual void UserLogout(const ::node::UserLogoutRequest& request,
                       ::rpcz::reply< ::node::ControlCentreVoid> response);
  virtual void GetLowLoadNode(const ::node::LowLoadNodeRequest& request,
                       ::rpcz::reply< ::node::LowLoadNodeResponse> response);
  virtual void GetRegionLowLoad(const ::node::RegionLowLoadRequest& request,
                       ::rpcz::reply< ::node::RegionLowLoadResponse> response);
  virtual void GetNodeList(const ::node::NodeListRequest& request,
                       ::rpcz::reply< ::node::NodeListResponse> response);
  virtual void CreateUserId(const ::node::CreateIdRequest& request,
                       ::rpcz::reply< ::node::CreateIdResponse> response);
  virtual void CheckUserId(const ::node::CheckIdRequest& request,
                       ::rpcz::reply< ::node::CheckIdResponse> response);
  virtual void UpdateUserRegion(const ::node::UpdateRegionRequest& request,
                       ::rpcz::reply< ::node::UpdateRegionResponse> response);
  virtual void CacheServerStore(const ::node::CacheStoreRequest& request,
                       ::rpcz::reply< ::node::CacheStoreResponse> response);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void call_method(const ::google::protobuf::MethodDescriptor* method,
                  const ::google::protobuf::Message& request,
                  ::rpcz::server_channel* channel);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ControlCentreService);
};

class ControlCentreService_Stub {
 public:
  ControlCentreService_Stub(::rpcz::rpc_channel* channel, 
                   bool owns_channel=false);
  ControlCentreService_Stub(::rpcz::rpc_channel* channel, 
                   const ::std::string& service_name,
                   bool owns_channel=false);
  ~ControlCentreService_Stub();

  inline ::rpcz::rpc_channel* channel() { return channel_; }


  void RegisterModule(const ::node::RegisterRequest& request,
                       ::node::OperateResponse* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void RegisterModule(const ::node::RegisterRequest& request,
                       ::node::OperateResponse* response,
                       long deadline_ms = -1);
  void RemoveModule(const ::node::RemoveRequest& request,
                       ::node::OperateResponse* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void RemoveModule(const ::node::RemoveRequest& request,
                       ::node::OperateResponse* response,
                       long deadline_ms = -1);
  void KeepRegister(const ::node::KeepRegisterRequest& request,
                       ::node::KeepRegisterResponse* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void KeepRegister(const ::node::KeepRegisterRequest& request,
                       ::node::KeepRegisterResponse* response,
                       long deadline_ms = -1);
  void UserLogin(const ::node::UserLoginRequest& request,
                       ::node::ControlCentreVoid* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void UserLogin(const ::node::UserLoginRequest& request,
                       ::node::ControlCentreVoid* response,
                       long deadline_ms = -1);
  void UserLogout(const ::node::UserLogoutRequest& request,
                       ::node::ControlCentreVoid* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void UserLogout(const ::node::UserLogoutRequest& request,
                       ::node::ControlCentreVoid* response,
                       long deadline_ms = -1);
  void GetLowLoadNode(const ::node::LowLoadNodeRequest& request,
                       ::node::LowLoadNodeResponse* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void GetLowLoadNode(const ::node::LowLoadNodeRequest& request,
                       ::node::LowLoadNodeResponse* response,
                       long deadline_ms = -1);
  void GetRegionLowLoad(const ::node::RegionLowLoadRequest& request,
                       ::node::RegionLowLoadResponse* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void GetRegionLowLoad(const ::node::RegionLowLoadRequest& request,
                       ::node::RegionLowLoadResponse* response,
                       long deadline_ms = -1);
  void GetNodeList(const ::node::NodeListRequest& request,
                       ::node::NodeListResponse* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void GetNodeList(const ::node::NodeListRequest& request,
                       ::node::NodeListResponse* response,
                       long deadline_ms = -1);
  void CreateUserId(const ::node::CreateIdRequest& request,
                       ::node::CreateIdResponse* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void CreateUserId(const ::node::CreateIdRequest& request,
                       ::node::CreateIdResponse* response,
                       long deadline_ms = -1);
  void CheckUserId(const ::node::CheckIdRequest& request,
                       ::node::CheckIdResponse* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void CheckUserId(const ::node::CheckIdRequest& request,
                       ::node::CheckIdResponse* response,
                       long deadline_ms = -1);
  void UpdateUserRegion(const ::node::UpdateRegionRequest& request,
                       ::node::UpdateRegionResponse* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void UpdateUserRegion(const ::node::UpdateRegionRequest& request,
                       ::node::UpdateRegionResponse* response,
                       long deadline_ms = -1);
  void CacheServerStore(const ::node::CacheStoreRequest& request,
                       ::node::CacheStoreResponse* response,
                       ::rpcz::rpc_controller* rpc_controller,
                       ::rpcz::closure* done);
  void CacheServerStore(const ::node::CacheStoreRequest& request,
                       ::node::CacheStoreResponse* response,
                       long deadline_ms = -1);
 private:
  ::rpcz::rpc_channel* channel_;
  ::std::string service_name_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ControlCentreService_Stub);
};


}  // namespace node
#endif  // RPCZ_controlcentre_2eproto__INCLUDED
