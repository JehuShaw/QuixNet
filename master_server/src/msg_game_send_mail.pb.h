// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_send_mail.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fgame_5fsend_5fmail_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fgame_5fsend_5fmail_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fgame_5fsend_5fmail_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fgame_5fsend_5fmail_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fgame_5fsend_5fmail_2eproto;
namespace game {
class MailItem;
class MailItemDefaultTypeInternal;
extern MailItemDefaultTypeInternal _MailItem_default_instance_;
class SendMailPacket;
class SendMailPacketDefaultTypeInternal;
extern SendMailPacketDefaultTypeInternal _SendMailPacket_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::MailItem* Arena::CreateMaybeMessage<::game::MailItem>(Arena*);
template<> ::game::SendMailPacket* Arena::CreateMaybeMessage<::game::SendMailPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

// ===================================================================

class MailItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.MailItem) */ {
 public:
  MailItem();
  virtual ~MailItem();

  MailItem(const MailItem& from);
  MailItem(MailItem&& from) noexcept
    : MailItem() {
    *this = ::std::move(from);
  }

  inline MailItem& operator=(const MailItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailItem& operator=(MailItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MailItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MailItem* internal_default_instance() {
    return reinterpret_cast<const MailItem*>(
               &_MailItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MailItem& a, MailItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MailItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MailItem* New() const final {
    return CreateMaybeMessage<MailItem>(nullptr);
  }

  MailItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MailItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MailItem& from);
  void MergeFrom(const MailItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.MailItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5fsend_5fmail_2eproto);
    return ::descriptor_table_msg_5fgame_5fsend_5fmail_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint32 template_id = 1;
  void clear_template_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 template_id() const;
  void set_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_template_id() const;
  void _internal_set_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.MailItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 template_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5fsend_5fmail_2eproto;
};
// -------------------------------------------------------------------

class SendMailPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SendMailPacket) */ {
 public:
  SendMailPacket();
  virtual ~SendMailPacket();

  SendMailPacket(const SendMailPacket& from);
  SendMailPacket(SendMailPacket&& from) noexcept
    : SendMailPacket() {
    *this = ::std::move(from);
  }

  inline SendMailPacket& operator=(const SendMailPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMailPacket& operator=(SendMailPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMailPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMailPacket* internal_default_instance() {
    return reinterpret_cast<const SendMailPacket*>(
               &_SendMailPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendMailPacket& a, SendMailPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMailPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMailPacket* New() const final {
    return CreateMaybeMessage<SendMailPacket>(nullptr);
  }

  SendMailPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMailPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMailPacket& from);
  void MergeFrom(const SendMailPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMailPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SendMailPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5fsend_5fmail_2eproto);
    return ::descriptor_table_msg_5fgame_5fsend_5fmail_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiversFieldNumber = 4,
    kItemFieldNumber = 10,
    kSenderNameFieldNumber = 2,
    kTitleFieldNumber = 6,
    kContentFieldNumber = 7,
    kSenderFieldNumber = 1,
    kSenderTypeFieldNumber = 3,
    kReceiverTypeFieldNumber = 5,
    kGemFieldNumber = 8,
    kCoinFieldNumber = 9,
  };
  // repeated uint64 receivers = 4;
  int receivers_size() const;
  private:
  int _internal_receivers_size() const;
  public:
  void clear_receivers();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_receivers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_receivers() const;
  void _internal_add_receivers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_receivers();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 receivers(int index) const;
  void set_receivers(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_receivers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      receivers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_receivers();

  // repeated .game.MailItem item = 10;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::game::MailItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::MailItem >*
      mutable_item();
  private:
  const ::game::MailItem& _internal_item(int index) const;
  ::game::MailItem* _internal_add_item();
  public:
  const ::game::MailItem& item(int index) const;
  ::game::MailItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::MailItem >&
      item() const;

  // string sender_name = 2;
  void clear_sender_name();
  const std::string& sender_name() const;
  void set_sender_name(const std::string& value);
  void set_sender_name(std::string&& value);
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  std::string* mutable_sender_name();
  std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // string title = 6;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string content = 7;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 sender = 1;
  void clear_sender();
  ::PROTOBUF_NAMESPACE_ID::uint64 sender() const;
  void set_sender(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sender() const;
  void _internal_set_sender(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 sender_type = 3;
  void clear_sender_type();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_type() const;
  void set_sender_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_type() const;
  void _internal_set_sender_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver_type = 5;
  void clear_receiver_type();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_type() const;
  void set_receiver_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_type() const;
  void _internal_set_receiver_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gem = 8;
  void clear_gem();
  ::PROTOBUF_NAMESPACE_ID::int32 gem() const;
  void set_gem(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gem() const;
  void _internal_set_gem(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 coin = 9;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.SendMailPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > receivers_;
  mutable std::atomic<int> _receivers_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::MailItem > item_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 gem_;
  ::PROTOBUF_NAMESPACE_ID::int32 coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5fsend_5fmail_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MailItem

// uint32 template_id = 1;
inline void MailItem::clear_template_id() {
  template_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MailItem::_internal_template_id() const {
  return template_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MailItem::template_id() const {
  // @@protoc_insertion_point(field_get:game.MailItem.template_id)
  return _internal_template_id();
}
inline void MailItem::_internal_set_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  template_id_ = value;
}
inline void MailItem::set_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_template_id(value);
  // @@protoc_insertion_point(field_set:game.MailItem.template_id)
}

// int32 count = 2;
inline void MailItem::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MailItem::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MailItem::count() const {
  // @@protoc_insertion_point(field_get:game.MailItem.count)
  return _internal_count();
}
inline void MailItem::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void MailItem::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:game.MailItem.count)
}

// -------------------------------------------------------------------

// SendMailPacket

// uint64 sender = 1;
inline void SendMailPacket::clear_sender() {
  sender_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMailPacket::_internal_sender() const {
  return sender_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMailPacket::sender() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.sender)
  return _internal_sender();
}
inline void SendMailPacket::_internal_set_sender(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sender_ = value;
}
inline void SendMailPacket::set_sender(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.sender)
}

// string sender_name = 2;
inline void SendMailPacket::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendMailPacket::sender_name() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.sender_name)
  return _internal_sender_name();
}
inline void SendMailPacket::set_sender_name(const std::string& value) {
  _internal_set_sender_name(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.sender_name)
}
inline std::string* SendMailPacket::mutable_sender_name() {
  // @@protoc_insertion_point(field_mutable:game.SendMailPacket.sender_name)
  return _internal_mutable_sender_name();
}
inline const std::string& SendMailPacket::_internal_sender_name() const {
  return sender_name_.GetNoArena();
}
inline void SendMailPacket::_internal_set_sender_name(const std::string& value) {
  
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendMailPacket::set_sender_name(std::string&& value) {
  
  sender_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.SendMailPacket.sender_name)
}
inline void SendMailPacket::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.SendMailPacket.sender_name)
}
inline void SendMailPacket::set_sender_name(const char* value, size_t size) {
  
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.SendMailPacket.sender_name)
}
inline std::string* SendMailPacket::_internal_mutable_sender_name() {
  
  return sender_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendMailPacket::release_sender_name() {
  // @@protoc_insertion_point(field_release:game.SendMailPacket.sender_name)
  
  return sender_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailPacket::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    
  } else {
    
  }
  sender_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:game.SendMailPacket.sender_name)
}

// int32 sender_type = 3;
inline void SendMailPacket::clear_sender_type() {
  sender_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::_internal_sender_type() const {
  return sender_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::sender_type() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.sender_type)
  return _internal_sender_type();
}
inline void SendMailPacket::_internal_set_sender_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_type_ = value;
}
inline void SendMailPacket::set_sender_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_type(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.sender_type)
}

// repeated uint64 receivers = 4;
inline int SendMailPacket::_internal_receivers_size() const {
  return receivers_.size();
}
inline int SendMailPacket::receivers_size() const {
  return _internal_receivers_size();
}
inline void SendMailPacket::clear_receivers() {
  receivers_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMailPacket::_internal_receivers(int index) const {
  return receivers_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMailPacket::receivers(int index) const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.receivers)
  return _internal_receivers(index);
}
inline void SendMailPacket::set_receivers(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  receivers_.Set(index, value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.receivers)
}
inline void SendMailPacket::_internal_add_receivers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  receivers_.Add(value);
}
inline void SendMailPacket::add_receivers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_receivers(value);
  // @@protoc_insertion_point(field_add:game.SendMailPacket.receivers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SendMailPacket::_internal_receivers() const {
  return receivers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SendMailPacket::receivers() const {
  // @@protoc_insertion_point(field_list:game.SendMailPacket.receivers)
  return _internal_receivers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SendMailPacket::_internal_mutable_receivers() {
  return &receivers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SendMailPacket::mutable_receivers() {
  // @@protoc_insertion_point(field_mutable_list:game.SendMailPacket.receivers)
  return _internal_mutable_receivers();
}

// int32 receiver_type = 5;
inline void SendMailPacket::clear_receiver_type() {
  receiver_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::_internal_receiver_type() const {
  return receiver_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::receiver_type() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.receiver_type)
  return _internal_receiver_type();
}
inline void SendMailPacket::_internal_set_receiver_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_type_ = value;
}
inline void SendMailPacket::set_receiver_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_type(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.receiver_type)
}

// string title = 6;
inline void SendMailPacket::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendMailPacket::title() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.title)
  return _internal_title();
}
inline void SendMailPacket::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.title)
}
inline std::string* SendMailPacket::mutable_title() {
  // @@protoc_insertion_point(field_mutable:game.SendMailPacket.title)
  return _internal_mutable_title();
}
inline const std::string& SendMailPacket::_internal_title() const {
  return title_.GetNoArena();
}
inline void SendMailPacket::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendMailPacket::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.SendMailPacket.title)
}
inline void SendMailPacket::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.SendMailPacket.title)
}
inline void SendMailPacket::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.SendMailPacket.title)
}
inline std::string* SendMailPacket::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendMailPacket::release_title() {
  // @@protoc_insertion_point(field_release:game.SendMailPacket.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailPacket::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:game.SendMailPacket.title)
}

// string content = 7;
inline void SendMailPacket::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendMailPacket::content() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.content)
  return _internal_content();
}
inline void SendMailPacket::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.content)
}
inline std::string* SendMailPacket::mutable_content() {
  // @@protoc_insertion_point(field_mutable:game.SendMailPacket.content)
  return _internal_mutable_content();
}
inline const std::string& SendMailPacket::_internal_content() const {
  return content_.GetNoArena();
}
inline void SendMailPacket::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendMailPacket::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.SendMailPacket.content)
}
inline void SendMailPacket::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.SendMailPacket.content)
}
inline void SendMailPacket::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.SendMailPacket.content)
}
inline std::string* SendMailPacket::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendMailPacket::release_content() {
  // @@protoc_insertion_point(field_release:game.SendMailPacket.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailPacket::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:game.SendMailPacket.content)
}

// int32 gem = 8;
inline void SendMailPacket::clear_gem() {
  gem_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::_internal_gem() const {
  return gem_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::gem() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.gem)
  return _internal_gem();
}
inline void SendMailPacket::_internal_set_gem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gem_ = value;
}
inline void SendMailPacket::set_gem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gem(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.gem)
}

// int32 coin = 9;
inline void SendMailPacket::clear_coin() {
  coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::coin() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.coin)
  return _internal_coin();
}
inline void SendMailPacket::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coin_ = value;
}
inline void SendMailPacket::set_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.coin)
}

// repeated .game.MailItem item = 10;
inline int SendMailPacket::_internal_item_size() const {
  return item_.size();
}
inline int SendMailPacket::item_size() const {
  return _internal_item_size();
}
inline void SendMailPacket::clear_item() {
  item_.Clear();
}
inline ::game::MailItem* SendMailPacket::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:game.SendMailPacket.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::MailItem >*
SendMailPacket::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:game.SendMailPacket.item)
  return &item_;
}
inline const ::game::MailItem& SendMailPacket::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::game::MailItem& SendMailPacket::item(int index) const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.item)
  return _internal_item(index);
}
inline ::game::MailItem* SendMailPacket::_internal_add_item() {
  return item_.Add();
}
inline ::game::MailItem* SendMailPacket::add_item() {
  // @@protoc_insertion_point(field_add:game.SendMailPacket.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::MailItem >&
SendMailPacket::item() const {
  // @@protoc_insertion_point(field_list:game.SendMailPacket.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fgame_5fsend_5fmail_2eproto
