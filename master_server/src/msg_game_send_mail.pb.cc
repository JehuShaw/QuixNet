// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_send_mail.proto

#include "msg_game_send_mail.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_msg_5fgame_5fsend_5fmail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MailItem_msg_5fgame_5fsend_5fmail_2eproto;
namespace game {
class MailItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MailItem> _instance;
} _MailItem_default_instance_;
class SendMailPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMailPacket> _instance;
} _SendMailPacket_default_instance_;
}  // namespace game
static void InitDefaultsscc_info_MailItem_msg_5fgame_5fsend_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_MailItem_default_instance_;
    new (ptr) ::game::MailItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::MailItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MailItem_msg_5fgame_5fsend_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MailItem_msg_5fgame_5fsend_5fmail_2eproto}, {}};

static void InitDefaultsscc_info_SendMailPacket_msg_5fgame_5fsend_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_SendMailPacket_default_instance_;
    new (ptr) ::game::SendMailPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::SendMailPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMailPacket_msg_5fgame_5fsend_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendMailPacket_msg_5fgame_5fsend_5fmail_2eproto}, {
      &scc_info_MailItem_msg_5fgame_5fsend_5fmail_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_5fgame_5fsend_5fmail_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msg_5fgame_5fsend_5fmail_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_5fgame_5fsend_5fmail_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_5fgame_5fsend_5fmail_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::MailItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::MailItem, template_id_),
  PROTOBUF_FIELD_OFFSET(::game::MailItem, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, sender_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, sender_name_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, sender_type_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, receivers_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, receiver_type_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, title_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, content_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, gem_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, coin_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, item_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::game::MailItem)},
  { 7, -1, sizeof(::game::SendMailPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_MailItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_SendMailPacket_default_instance_),
};

const char descriptor_table_protodef_msg_5fgame_5fsend_5fmail_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030msg_game_send_mail.proto\022\004game\".\n\010Mail"
  "Item\022\023\n\013template_id\030\001 \001(\r\022\r\n\005count\030\002 \001(\005"
  "\"\315\001\n\016SendMailPacket\022\016\n\006sender\030\001 \001(\004\022\023\n\013s"
  "ender_name\030\002 \001(\t\022\023\n\013sender_type\030\003 \001(\005\022\021\n"
  "\treceivers\030\004 \003(\004\022\025\n\rreceiver_type\030\005 \001(\005\022"
  "\r\n\005title\030\006 \001(\t\022\017\n\007content\030\007 \001(\t\022\013\n\003gem\030\010"
  " \001(\005\022\014\n\004coin\030\t \001(\005\022\034\n\004item\030\n \003(\0132\016.game."
  "MailItemb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_5fgame_5fsend_5fmail_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_5fgame_5fsend_5fmail_2eproto_sccs[2] = {
  &scc_info_MailItem_msg_5fgame_5fsend_5fmail_2eproto.base,
  &scc_info_SendMailPacket_msg_5fgame_5fsend_5fmail_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_5fgame_5fsend_5fmail_2eproto_once;
static bool descriptor_table_msg_5fgame_5fsend_5fmail_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fgame_5fsend_5fmail_2eproto = {
  &descriptor_table_msg_5fgame_5fsend_5fmail_2eproto_initialized, descriptor_table_protodef_msg_5fgame_5fsend_5fmail_2eproto, "msg_game_send_mail.proto", 296,
  &descriptor_table_msg_5fgame_5fsend_5fmail_2eproto_once, descriptor_table_msg_5fgame_5fsend_5fmail_2eproto_sccs, descriptor_table_msg_5fgame_5fsend_5fmail_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_msg_5fgame_5fsend_5fmail_2eproto::offsets,
  file_level_metadata_msg_5fgame_5fsend_5fmail_2eproto, 2, file_level_enum_descriptors_msg_5fgame_5fsend_5fmail_2eproto, file_level_service_descriptors_msg_5fgame_5fsend_5fmail_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_5fgame_5fsend_5fmail_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_5fgame_5fsend_5fmail_2eproto), true);
namespace game {

// ===================================================================

void MailItem::InitAsDefaultInstance() {
}
class MailItem::_Internal {
 public:
};

MailItem::MailItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.MailItem)
}
MailItem::MailItem(const MailItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&template_id_, &from.template_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&template_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:game.MailItem)
}

void MailItem::SharedCtor() {
  ::memset(&template_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&template_id_)) + sizeof(count_));
}

MailItem::~MailItem() {
  // @@protoc_insertion_point(destructor:game.MailItem)
  SharedDtor();
}

void MailItem::SharedDtor() {
}

void MailItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MailItem& MailItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MailItem_msg_5fgame_5fsend_5fmail_2eproto.base);
  return *internal_default_instance();
}


void MailItem::Clear() {
// @@protoc_insertion_point(message_clear_start:game.MailItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&template_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&template_id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* MailItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 template_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          template_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.MailItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 template_id = 1;
  if (this->template_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_template_id(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.MailItem)
  return target;
}

size_t MailItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.MailItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 template_id = 1;
  if (this->template_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_template_id());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.MailItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MailItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.MailItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.MailItem)
    MergeFrom(*source);
  }
}

void MailItem::MergeFrom(const MailItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.MailItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.template_id() != 0) {
    _internal_set_template_id(from._internal_template_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void MailItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.MailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailItem::CopyFrom(const MailItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.MailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailItem::IsInitialized() const {
  return true;
}

void MailItem::InternalSwap(MailItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(template_id_, other->template_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MailItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendMailPacket::InitAsDefaultInstance() {
}
class SendMailPacket::_Internal {
 public:
};

SendMailPacket::SendMailPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.SendMailPacket)
}
SendMailPacket::SendMailPacket(const SendMailPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      receivers_(from.receivers_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_name().empty()) {
    sender_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&sender_, &from.sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&coin_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(coin_));
  // @@protoc_insertion_point(copy_constructor:game.SendMailPacket)
}

void SendMailPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMailPacket_msg_5fgame_5fsend_5fmail_2eproto.base);
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(coin_));
}

SendMailPacket::~SendMailPacket() {
  // @@protoc_insertion_point(destructor:game.SendMailPacket)
  SharedDtor();
}

void SendMailPacket::SharedDtor() {
  sender_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendMailPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMailPacket& SendMailPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMailPacket_msg_5fgame_5fsend_5fmail_2eproto.base);
  return *internal_default_instance();
}


void SendMailPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SendMailPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receivers_.Clear();
  item_.Clear();
  sender_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(coin_));
  _internal_metadata_.Clear();
}

const char* SendMailPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.SendMailPacket.sender_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sender_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sender_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 receivers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_receivers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_receivers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receiver_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          receiver_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.SendMailPacket.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.SendMailPacket.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gem = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .game.MailItem item = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMailPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SendMailPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sender = 1;
  if (this->sender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sender(), target);
  }

  // string sender_name = 2;
  if (this->sender_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SendMailPacket.sender_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sender_name(), target);
  }

  // int32 sender_type = 3;
  if (this->sender_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sender_type(), target);
  }

  // repeated uint64 receivers = 4;
  {
    int byte_size = _receivers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_receivers(), byte_size, target);
    }
  }

  // int32 receiver_type = 5;
  if (this->receiver_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_receiver_type(), target);
  }

  // string title = 6;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SendMailPacket.title");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_title(), target);
  }

  // string content = 7;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SendMailPacket.content");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_content(), target);
  }

  // int32 gem = 8;
  if (this->gem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_gem(), target);
  }

  // int32 coin = 9;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_coin(), target);
  }

  // repeated .game.MailItem item = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SendMailPacket)
  return target;
}

size_t SendMailPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SendMailPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 receivers = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->receivers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _receivers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .game.MailItem item = 10;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sender_name = 2;
  if (this->sender_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_name());
  }

  // string title = 6;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content = 7;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 sender = 1;
  if (this->sender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sender());
  }

  // int32 sender_type = 3;
  if (this->sender_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_type());
  }

  // int32 receiver_type = 5;
  if (this->receiver_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receiver_type());
  }

  // int32 gem = 8;
  if (this->gem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gem());
  }

  // int32 coin = 9;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMailPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.SendMailPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMailPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMailPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.SendMailPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.SendMailPacket)
    MergeFrom(*source);
  }
}

void SendMailPacket::MergeFrom(const SendMailPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.SendMailPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receivers_.MergeFrom(from.receivers_);
  item_.MergeFrom(from.item_);
  if (from.sender_name().size() > 0) {

    sender_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.sender() != 0) {
    _internal_set_sender(from._internal_sender());
  }
  if (from.sender_type() != 0) {
    _internal_set_sender_type(from._internal_sender_type());
  }
  if (from.receiver_type() != 0) {
    _internal_set_receiver_type(from._internal_receiver_type());
  }
  if (from.gem() != 0) {
    _internal_set_gem(from._internal_gem());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
}

void SendMailPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.SendMailPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMailPacket::CopyFrom(const SendMailPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SendMailPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailPacket::IsInitialized() const {
  return true;
}

void SendMailPacket::InternalSwap(SendMailPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  receivers_.InternalSwap(&other->receivers_);
  item_.InternalSwap(&other->item_);
  sender_name_.Swap(&other->sender_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_, other->sender_);
  swap(sender_type_, other->sender_type_);
  swap(receiver_type_, other->receiver_type_);
  swap(gem_, other->gem_);
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMailPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::MailItem* Arena::CreateMaybeMessage< ::game::MailItem >(Arena* arena) {
  return Arena::CreateInternal< ::game::MailItem >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SendMailPacket* Arena::CreateMaybeMessage< ::game::SendMailPacket >(Arena* arena) {
  return Arena::CreateInternal< ::game::SendMailPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
