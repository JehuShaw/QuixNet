// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "controlcentre.rpcz.h"
#include "controlcentre.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/stubs/once.h>
#include <rpcz/rpcz.hpp>
namespace {
const ::google::protobuf::ServiceDescriptor* ControlCentreService_descriptor_ = NULL;
}  // anonymouse namespace

namespace node {

void rpcz_protobuf_AssignDesc_controlcentre_2eproto() {
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "controlcentre.proto");
  GOOGLE_CHECK(file != NULL);
  ControlCentreService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &rpcz_protobuf_AssignDesc_controlcentre_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void rpcz_protobuf_ShutdownFile_controlcentre_2eproto() {
}

void rpcz_protobuf_AddDesc_controlcentre_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023controlcentre.proto\022\004node\"\023\n\021ControlCe"
    "ntreVoid\"\307\001\n\017RegisterRequest\022\022\n\nserverty"
    "pe\030\001 \002(\005\022\020\n\010endpoint\030\002 \002(\t\022\022\n\nservername"
    "\030\003 \002(\014\022\020\n\010serverid\030\004 \002(\r\022\024\n\014serverregion"
    "\030\005 \002(\r\022\023\n\013projectname\030\006 \001(\014\022\025\n\racceptadd"
    "ress\030\007 \001(\t\022\023\n\013processpath\030\010 \001(\014\022\021\n\tserva"
    "ntid\030\t \001(\r\"I\n\rRemoveRequest\022\022\n\nservernam"
    "e\030\001 \002(\014\022\020\n\010serverid\030\002 \002(\r\022\022\n\nservertype\030"
    "\003 \001(\005\"!\n\017OperateResponse\022\016\n\006result\030\001 \002(\005"
    "\"\240\001\n\023KeepRegisterRequest\022\020\n\010serverid\030\001 \002"
    "(\r\022\022\n\nservername\030\002 \001(\014\022\020\n\010endpoint\030\003 \001(\t"
    "\022\022\n\nservertype\030\004 \001(\005\022\022\n\nserverload\030\005 \001(\r"
    "\022\024\n\014serverstatus\030\006 \001(\005\022\023\n\013serverstate\030\007 "
    "\001(\014\"*\n\024KeepRegisterResponse\022\022\n\nreregiste"
    "r\030\001 \002(\010\"H\n\020UserLoginRequest\022\022\n\nservernam"
    "e\030\001 \002(\014\022\020\n\010serverid\030\002 \002(\r\022\016\n\006userid\030\003 \002("
    "\004\"7\n\021UserLogoutRequest\022\022\n\nservername\030\001 \002"
    "(\014\022\016\n\006userid\030\002 \002(\004\"(\n\022LowLoadNodeRequest"
    "\022\022\n\nservername\030\001 \002(\014\"B\n\023LowLoadNodeRespo"
    "nse\022\025\n\racceptaddress\030\001 \002(\t\022\024\n\014serverregi"
    "on\030\002 \002(\r\"@\n\024RegionLowLoadRequest\022\022\n\nserv"
    "ername\030\001 \002(\014\022\024\n\014serverregion\030\002 \002(\r\".\n\025Re"
    "gionLowLoadResponse\022\025\n\racceptaddress\030\001 \002"
    "(\t\"%\n\017NodeListRequest\022\022\n\nservername\030\001 \002("
    "\014\"M\n\nNodeDetail\022\024\n\014serverregion\030\001 \002(\r\022\025\n"
    "\racceptaddress\030\002 \002(\t\022\022\n\nserverload\030\003 \002(\005"
    "\"3\n\020NodeListResponse\022\037\n\005nodes\030\001 \003(\0132\020.no"
    "de.NodeDetail\"\"\n\017CreateIdRequest\022\017\n\007acco"
    "unt\030\001 \002(\004\"\\\n\020CreateIdResponse\022\016\n\006result\030"
    "\001 \002(\005\022\016\n\006userid\030\002 \001(\004\022\024\n\014serverregion\030\003 "
    "\001(\r\022\022\n\ncreatetime\030\004 \001(\t\"!\n\016CheckIdReques"
    "t\022\017\n\007account\030\001 \002(\004\"h\n\017CheckIdResponse\022\016\n"
    "\006result\030\001 \002(\005\022\016\n\006userid\030\002 \001(\004\022\022\n\ncreatet"
    "ime\030\003 \001(\t\022\024\n\014serverregion\030\004 \001(\r\022\013\n\003cas\030\005"
    " \001(\004\"I\n\023UpdateRegionRequest\022\017\n\007account\030\001"
    " \002(\004\022\024\n\014serverregion\030\002 \002(\r\022\013\n\003cas\030\003 \002(\004\""
    "&\n\024UpdateRegionResponse\022\016\n\006result\030\001 \002(\005\""
    "U\n\021CacheStoreRequest\022\020\n\010serverid\030\001 \002(\r\022\021"
    "\n\troutetype\030\002 \002(\005\022\r\n\005route\030\003 \002(\004\022\014\n\004keys"
    "\030\004 \003(\t\"-\n\016CacheKeyResult\022\013\n\003key\030\001 \002(\t\022\016\n"
    "\006result\030\002 \002(\005\"N\n\022CacheStoreResponse\022\016\n\006r"
    "esult\030\001 \002(\005\022(\n\nkeyresults\030\002 \003(\0132\024.node.C"
    "acheKeyResult2\266\006\n\024ControlCentreService\022>"
    "\n\016RegisterModule\022\025.node.RegisterRequest\032"
    "\025.node.OperateResponse\022:\n\014RemoveModule\022\023"
    ".node.RemoveRequest\032\025.node.OperateRespon"
    "se\022E\n\014KeepRegister\022\031.node.KeepRegisterRe"
    "quest\032\032.node.KeepRegisterResponse\022<\n\tUse"
    "rLogin\022\026.node.UserLoginRequest\032\027.node.Co"
    "ntrolCentreVoid\022>\n\nUserLogout\022\027.node.Use"
    "rLogoutRequest\032\027.node.ControlCentreVoid\022"
    "E\n\016GetLowLoadNode\022\030.node.LowLoadNodeRequ"
    "est\032\031.node.LowLoadNodeResponse\022K\n\020GetReg"
    "ionLowLoad\022\032.node.RegionLowLoadRequest\032\033"
    ".node.RegionLowLoadResponse\022<\n\013GetNodeLi"
    "st\022\025.node.NodeListRequest\032\026.node.NodeLis"
    "tResponse\022=\n\014CreateUserId\022\025.node.CreateI"
    "dRequest\032\026.node.CreateIdResponse\022:\n\013Chec"
    "kUserId\022\024.node.CheckIdRequest\032\025.node.Che"
    "ckIdResponse\022I\n\020UpdateUserRegion\022\031.node."
    "UpdateRegionRequest\032\032.node.UpdateRegionR"
    "esponse\022E\n\020CacheServerStore\022\027.node.Cache"
    "StoreRequest\032\030.node.CacheStoreResponse", 2518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "controlcentre.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&rpcz_protobuf_ShutdownFile_controlcentre_2eproto);
}

// ===================================================================

ControlCentreService::~ControlCentreService() {}

const ::google::protobuf::ServiceDescriptor* ControlCentreService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlCentreService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ControlCentreService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlCentreService_descriptor_;
}

void ControlCentreService::RegisterModule(const ::node::RegisterRequest&,
                         ::rpcz::reply< ::node::OperateResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method RegisterModule() not implemented.");
}

void ControlCentreService::RemoveModule(const ::node::RemoveRequest&,
                         ::rpcz::reply< ::node::OperateResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method RemoveModule() not implemented.");
}

void ControlCentreService::KeepRegister(const ::node::KeepRegisterRequest&,
                         ::rpcz::reply< ::node::KeepRegisterResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method KeepRegister() not implemented.");
}

void ControlCentreService::UserLogin(const ::node::UserLoginRequest&,
                         ::rpcz::reply< ::node::ControlCentreVoid> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method UserLogin() not implemented.");
}

void ControlCentreService::UserLogout(const ::node::UserLogoutRequest&,
                         ::rpcz::reply< ::node::ControlCentreVoid> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method UserLogout() not implemented.");
}

void ControlCentreService::GetLowLoadNode(const ::node::LowLoadNodeRequest&,
                         ::rpcz::reply< ::node::LowLoadNodeResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method GetLowLoadNode() not implemented.");
}

void ControlCentreService::GetRegionLowLoad(const ::node::RegionLowLoadRequest&,
                         ::rpcz::reply< ::node::RegionLowLoadResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method GetRegionLowLoad() not implemented.");
}

void ControlCentreService::GetNodeList(const ::node::NodeListRequest&,
                         ::rpcz::reply< ::node::NodeListResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method GetNodeList() not implemented.");
}

void ControlCentreService::CreateUserId(const ::node::CreateIdRequest&,
                         ::rpcz::reply< ::node::CreateIdResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method CreateUserId() not implemented.");
}

void ControlCentreService::CheckUserId(const ::node::CheckIdRequest&,
                         ::rpcz::reply< ::node::CheckIdResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method CheckUserId() not implemented.");
}

void ControlCentreService::UpdateUserRegion(const ::node::UpdateRegionRequest&,
                         ::rpcz::reply< ::node::UpdateRegionResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method UpdateUserRegion() not implemented.");
}

void ControlCentreService::CacheServerStore(const ::node::CacheStoreRequest&,
                         ::rpcz::reply< ::node::CacheStoreResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method CacheServerStore() not implemented.");
}

void ControlCentreService::call_method(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::Message& request,
                             ::rpcz::server_channel* channel) {
  GOOGLE_DCHECK_EQ(method->service(), ControlCentreService_descriptor_);
  switch(method->index()) {
    case 0:
      RegisterModule(
          *::google::protobuf::down_cast<const ::node::RegisterRequest*>(&request),
          ::rpcz::reply< ::node::OperateResponse>(channel));
      break;
    case 1:
      RemoveModule(
          *::google::protobuf::down_cast<const ::node::RemoveRequest*>(&request),
          ::rpcz::reply< ::node::OperateResponse>(channel));
      break;
    case 2:
      KeepRegister(
          *::google::protobuf::down_cast<const ::node::KeepRegisterRequest*>(&request),
          ::rpcz::reply< ::node::KeepRegisterResponse>(channel));
      break;
    case 3:
      UserLogin(
          *::google::protobuf::down_cast<const ::node::UserLoginRequest*>(&request),
          ::rpcz::reply< ::node::ControlCentreVoid>(channel));
      break;
    case 4:
      UserLogout(
          *::google::protobuf::down_cast<const ::node::UserLogoutRequest*>(&request),
          ::rpcz::reply< ::node::ControlCentreVoid>(channel));
      break;
    case 5:
      GetLowLoadNode(
          *::google::protobuf::down_cast<const ::node::LowLoadNodeRequest*>(&request),
          ::rpcz::reply< ::node::LowLoadNodeResponse>(channel));
      break;
    case 6:
      GetRegionLowLoad(
          *::google::protobuf::down_cast<const ::node::RegionLowLoadRequest*>(&request),
          ::rpcz::reply< ::node::RegionLowLoadResponse>(channel));
      break;
    case 7:
      GetNodeList(
          *::google::protobuf::down_cast<const ::node::NodeListRequest*>(&request),
          ::rpcz::reply< ::node::NodeListResponse>(channel));
      break;
    case 8:
      CreateUserId(
          *::google::protobuf::down_cast<const ::node::CreateIdRequest*>(&request),
          ::rpcz::reply< ::node::CreateIdResponse>(channel));
      break;
    case 9:
      CheckUserId(
          *::google::protobuf::down_cast<const ::node::CheckIdRequest*>(&request),
          ::rpcz::reply< ::node::CheckIdResponse>(channel));
      break;
    case 10:
      UpdateUserRegion(
          *::google::protobuf::down_cast<const ::node::UpdateRegionRequest*>(&request),
          ::rpcz::reply< ::node::UpdateRegionResponse>(channel));
      break;
    case 11:
      CacheServerStore(
          *::google::protobuf::down_cast<const ::node::CacheStoreRequest*>(&request),
          ::rpcz::reply< ::node::CacheStoreResponse>(channel));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ControlCentreService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::node::RegisterRequest::default_instance();
    case 1:
      return ::node::RemoveRequest::default_instance();
    case 2:
      return ::node::KeepRegisterRequest::default_instance();
    case 3:
      return ::node::UserLoginRequest::default_instance();
    case 4:
      return ::node::UserLogoutRequest::default_instance();
    case 5:
      return ::node::LowLoadNodeRequest::default_instance();
    case 6:
      return ::node::RegionLowLoadRequest::default_instance();
    case 7:
      return ::node::NodeListRequest::default_instance();
    case 8:
      return ::node::CreateIdRequest::default_instance();
    case 9:
      return ::node::CheckIdRequest::default_instance();
    case 10:
      return ::node::UpdateRegionRequest::default_instance();
    case 11:
      return ::node::CacheStoreRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ControlCentreService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::node::OperateResponse::default_instance();
    case 1:
      return ::node::OperateResponse::default_instance();
    case 2:
      return ::node::KeepRegisterResponse::default_instance();
    case 3:
      return ::node::ControlCentreVoid::default_instance();
    case 4:
      return ::node::ControlCentreVoid::default_instance();
    case 5:
      return ::node::LowLoadNodeResponse::default_instance();
    case 6:
      return ::node::RegionLowLoadResponse::default_instance();
    case 7:
      return ::node::NodeListResponse::default_instance();
    case 8:
      return ::node::CreateIdResponse::default_instance();
    case 9:
      return ::node::CheckIdResponse::default_instance();
    case 10:
      return ::node::UpdateRegionResponse::default_instance();
    case 11:
      return ::node::CacheStoreResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ControlCentreService_Stub::ControlCentreService_Stub(::rpcz::rpc_channel* channel,
                                   const ::std::string& service_name,
                                   bool owns_channel)
  : channel_(channel), service_name_(service_name),
    owns_channel_(owns_channel) {}
ControlCentreService_Stub::ControlCentreService_Stub(::rpcz::rpc_channel* channel,
                                   bool owns_channel)
  : channel_(channel), service_name_(ControlCentreService::descriptor()->name()),
    owns_channel_(owns_channel) {}
ControlCentreService_Stub::~ControlCentreService_Stub() {
  if (owns_channel_) delete channel_;
}

void ControlCentreService_Stub::RegisterModule(const ::node::RegisterRequest& request,
                              ::node::OperateResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(0),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::RegisterModule(const ::node::RegisterRequest& request,
                              ::node::OperateResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(0),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::RemoveModule(const ::node::RemoveRequest& request,
                              ::node::OperateResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(1),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::RemoveModule(const ::node::RemoveRequest& request,
                              ::node::OperateResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(1),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::KeepRegister(const ::node::KeepRegisterRequest& request,
                              ::node::KeepRegisterResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(2),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::KeepRegister(const ::node::KeepRegisterRequest& request,
                              ::node::KeepRegisterResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(2),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::UserLogin(const ::node::UserLoginRequest& request,
                              ::node::ControlCentreVoid* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(3),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::UserLogin(const ::node::UserLoginRequest& request,
                              ::node::ControlCentreVoid* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(3),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::UserLogout(const ::node::UserLogoutRequest& request,
                              ::node::ControlCentreVoid* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(4),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::UserLogout(const ::node::UserLogoutRequest& request,
                              ::node::ControlCentreVoid* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(4),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::GetLowLoadNode(const ::node::LowLoadNodeRequest& request,
                              ::node::LowLoadNodeResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(5),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::GetLowLoadNode(const ::node::LowLoadNodeRequest& request,
                              ::node::LowLoadNodeResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(5),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::GetRegionLowLoad(const ::node::RegionLowLoadRequest& request,
                              ::node::RegionLowLoadResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(6),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::GetRegionLowLoad(const ::node::RegionLowLoadRequest& request,
                              ::node::RegionLowLoadResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(6),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::GetNodeList(const ::node::NodeListRequest& request,
                              ::node::NodeListResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(7),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::GetNodeList(const ::node::NodeListRequest& request,
                              ::node::NodeListResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(7),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::CreateUserId(const ::node::CreateIdRequest& request,
                              ::node::CreateIdResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(8),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::CreateUserId(const ::node::CreateIdRequest& request,
                              ::node::CreateIdResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(8),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::CheckUserId(const ::node::CheckIdRequest& request,
                              ::node::CheckIdResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(9),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::CheckUserId(const ::node::CheckIdRequest& request,
                              ::node::CheckIdResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(9),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::UpdateUserRegion(const ::node::UpdateRegionRequest& request,
                              ::node::UpdateRegionResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(10),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::UpdateUserRegion(const ::node::UpdateRegionRequest& request,
                              ::node::UpdateRegionResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(10),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}
void ControlCentreService_Stub::CacheServerStore(const ::node::CacheStoreRequest& request,
                              ::node::CacheStoreResponse* response,
                              ::rpcz::rpc_controller* rpc_controller,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(11),
                        request, response, rpc_controller, done);
}
void ControlCentreService_Stub::CacheServerStore(const ::node::CacheStoreRequest& request,
                              ::node::CacheStoreResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc_controller rpc_controller;
  rpc_controller.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        ControlCentreService::descriptor()->method(11),
                        request, response, &rpc_controller, NULL);
  rpc_controller.wait();
  if (!rpc_controller.ok()) {
    throw ::rpcz::rpc_error(rpc_controller);
  }
}

}  // namespace node
