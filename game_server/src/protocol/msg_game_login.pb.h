// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fgame_5flogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fgame_5flogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common_packet.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fgame_5flogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fgame_5flogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fgame_5flogin_2eproto;
namespace game {
class CharacterBasic;
class CharacterBasicDefaultTypeInternal;
extern CharacterBasicDefaultTypeInternal _CharacterBasic_default_instance_;
class CharacterMap;
class CharacterMapDefaultTypeInternal;
extern CharacterMapDefaultTypeInternal _CharacterMap_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::CharacterBasic* Arena::CreateMaybeMessage<::game::CharacterBasic>(Arena*);
template<> ::game::CharacterMap* Arena::CreateMaybeMessage<::game::CharacterMap>(Arena*);
template<> ::game::LoginResponse* Arena::CreateMaybeMessage<::game::LoginResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

// ===================================================================

class CharacterBasic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CharacterBasic) */ {
 public:
  CharacterBasic();
  virtual ~CharacterBasic();

  CharacterBasic(const CharacterBasic& from);
  CharacterBasic(CharacterBasic&& from) noexcept
    : CharacterBasic() {
    *this = ::std::move(from);
  }

  inline CharacterBasic& operator=(const CharacterBasic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterBasic& operator=(CharacterBasic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CharacterBasic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacterBasic* internal_default_instance() {
    return reinterpret_cast<const CharacterBasic*>(
               &_CharacterBasic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CharacterBasic& a, CharacterBasic& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterBasic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterBasic* New() const final {
    return CreateMaybeMessage<CharacterBasic>(nullptr);
  }

  CharacterBasic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterBasic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterBasic& from);
  void MergeFrom(const CharacterBasic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterBasic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CharacterBasic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5flogin_2eproto);
    return ::descriptor_table_msg_5fgame_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAccountFieldNumber = 1,
    kCfgidFieldNumber = 2,
    kLevelFieldNumber = 4,
    kExpFieldNumber = 5,
    kGemFieldNumber = 6,
    kCurtimeFieldNumber = 8,
    kCoinFieldNumber = 7,
    kPrologueprocessFieldNumber = 9,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 cfgid = 2;
  void clear_cfgid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cfgid() const;
  void set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cfgid() const;
  void _internal_set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exp = 5;
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gem = 6;
  void clear_gem();
  ::PROTOBUF_NAMESPACE_ID::int32 gem() const;
  void set_gem(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gem() const;
  void _internal_set_gem(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 curtime = 8;
  void clear_curtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 curtime() const;
  void set_curtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_curtime() const;
  void _internal_set_curtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 coin = 7;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prologueprocess = 9;
  void clear_prologueprocess();
  ::PROTOBUF_NAMESPACE_ID::int32 prologueprocess() const;
  void set_prologueprocess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prologueprocess() const;
  void _internal_set_prologueprocess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.CharacterBasic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cfgid_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_;
  ::PROTOBUF_NAMESPACE_ID::int32 gem_;
  ::PROTOBUF_NAMESPACE_ID::uint64 curtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 prologueprocess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CharacterMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CharacterMap) */ {
 public:
  CharacterMap();
  virtual ~CharacterMap();

  CharacterMap(const CharacterMap& from);
  CharacterMap(CharacterMap&& from) noexcept
    : CharacterMap() {
    *this = ::std::move(from);
  }

  inline CharacterMap& operator=(const CharacterMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterMap& operator=(CharacterMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CharacterMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacterMap* internal_default_instance() {
    return reinterpret_cast<const CharacterMap*>(
               &_CharacterMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CharacterMap& a, CharacterMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterMap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterMap* New() const final {
    return CreateMaybeMessage<CharacterMap>(nullptr);
  }

  CharacterMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterMap& from);
  void MergeFrom(const CharacterMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CharacterMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5flogin_2eproto);
    return ::descriptor_table_msg_5fgame_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kFaceFieldNumber = 3,
    kMapidFieldNumber = 1,
  };
  // .game.VectorPacket pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::game::VectorPacket& pos() const;
  ::game::VectorPacket* release_pos();
  ::game::VectorPacket* mutable_pos();
  void set_allocated_pos(::game::VectorPacket* pos);
  private:
  const ::game::VectorPacket& _internal_pos() const;
  ::game::VectorPacket* _internal_mutable_pos();
  public:

  // .game.VectorPacket face = 3;
  bool has_face() const;
  private:
  bool _internal_has_face() const;
  public:
  void clear_face();
  const ::game::VectorPacket& face() const;
  ::game::VectorPacket* release_face();
  ::game::VectorPacket* mutable_face();
  void set_allocated_face(::game::VectorPacket* face);
  private:
  const ::game::VectorPacket& _internal_face() const;
  ::game::VectorPacket* _internal_mutable_face();
  public:

  // uint32 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.CharacterMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::game::VectorPacket* pos_;
  ::game::VectorPacket* face_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5flogin_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.LoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5flogin_2eproto);
    return ::descriptor_table_msg_5fgame_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicFieldNumber = 1,
    kMapFieldNumber = 2,
  };
  // .game.CharacterBasic basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::game::CharacterBasic& basic() const;
  ::game::CharacterBasic* release_basic();
  ::game::CharacterBasic* mutable_basic();
  void set_allocated_basic(::game::CharacterBasic* basic);
  private:
  const ::game::CharacterBasic& _internal_basic() const;
  ::game::CharacterBasic* _internal_mutable_basic();
  public:

  // .game.CharacterMap map = 2;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::game::CharacterMap& map() const;
  ::game::CharacterMap* release_map();
  ::game::CharacterMap* mutable_map();
  void set_allocated_map(::game::CharacterMap* map);
  private:
  const ::game::CharacterMap& _internal_map() const;
  ::game::CharacterMap* _internal_mutable_map();
  public:

  // @@protoc_insertion_point(class_scope:game.LoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::game::CharacterBasic* basic_;
  ::game::CharacterMap* map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5flogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CharacterBasic

// uint64 account = 1;
inline void CharacterBasic::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CharacterBasic::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CharacterBasic::account() const {
  // @@protoc_insertion_point(field_get:game.CharacterBasic.account)
  return _internal_account();
}
inline void CharacterBasic::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void CharacterBasic::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:game.CharacterBasic.account)
}

// uint32 cfgid = 2;
inline void CharacterBasic::clear_cfgid() {
  cfgid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CharacterBasic::_internal_cfgid() const {
  return cfgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CharacterBasic::cfgid() const {
  // @@protoc_insertion_point(field_get:game.CharacterBasic.cfgid)
  return _internal_cfgid();
}
inline void CharacterBasic::_internal_set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cfgid_ = value;
}
inline void CharacterBasic::set_cfgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cfgid(value);
  // @@protoc_insertion_point(field_set:game.CharacterBasic.cfgid)
}

// string name = 3;
inline void CharacterBasic::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CharacterBasic::name() const {
  // @@protoc_insertion_point(field_get:game.CharacterBasic.name)
  return _internal_name();
}
inline void CharacterBasic::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:game.CharacterBasic.name)
}
inline std::string* CharacterBasic::mutable_name() {
  // @@protoc_insertion_point(field_mutable:game.CharacterBasic.name)
  return _internal_mutable_name();
}
inline const std::string& CharacterBasic::_internal_name() const {
  return name_.GetNoArena();
}
inline void CharacterBasic::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CharacterBasic::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.CharacterBasic.name)
}
inline void CharacterBasic::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.CharacterBasic.name)
}
inline void CharacterBasic::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.CharacterBasic.name)
}
inline std::string* CharacterBasic::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CharacterBasic::release_name() {
  // @@protoc_insertion_point(field_release:game.CharacterBasic.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CharacterBasic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:game.CharacterBasic.name)
}

// int32 level = 4;
inline void CharacterBasic::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterBasic::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterBasic::level() const {
  // @@protoc_insertion_point(field_get:game.CharacterBasic.level)
  return _internal_level();
}
inline void CharacterBasic::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CharacterBasic::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:game.CharacterBasic.level)
}

// int32 exp = 5;
inline void CharacterBasic::clear_exp() {
  exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterBasic::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterBasic::exp() const {
  // @@protoc_insertion_point(field_get:game.CharacterBasic.exp)
  return _internal_exp();
}
inline void CharacterBasic::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exp_ = value;
}
inline void CharacterBasic::set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:game.CharacterBasic.exp)
}

// int32 gem = 6;
inline void CharacterBasic::clear_gem() {
  gem_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterBasic::_internal_gem() const {
  return gem_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterBasic::gem() const {
  // @@protoc_insertion_point(field_get:game.CharacterBasic.gem)
  return _internal_gem();
}
inline void CharacterBasic::_internal_set_gem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gem_ = value;
}
inline void CharacterBasic::set_gem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gem(value);
  // @@protoc_insertion_point(field_set:game.CharacterBasic.gem)
}

// int32 coin = 7;
inline void CharacterBasic::clear_coin() {
  coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterBasic::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterBasic::coin() const {
  // @@protoc_insertion_point(field_get:game.CharacterBasic.coin)
  return _internal_coin();
}
inline void CharacterBasic::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coin_ = value;
}
inline void CharacterBasic::set_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:game.CharacterBasic.coin)
}

// uint64 curtime = 8;
inline void CharacterBasic::clear_curtime() {
  curtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CharacterBasic::_internal_curtime() const {
  return curtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CharacterBasic::curtime() const {
  // @@protoc_insertion_point(field_get:game.CharacterBasic.curtime)
  return _internal_curtime();
}
inline void CharacterBasic::_internal_set_curtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  curtime_ = value;
}
inline void CharacterBasic::set_curtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_curtime(value);
  // @@protoc_insertion_point(field_set:game.CharacterBasic.curtime)
}

// int32 prologueprocess = 9;
inline void CharacterBasic::clear_prologueprocess() {
  prologueprocess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterBasic::_internal_prologueprocess() const {
  return prologueprocess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterBasic::prologueprocess() const {
  // @@protoc_insertion_point(field_get:game.CharacterBasic.prologueprocess)
  return _internal_prologueprocess();
}
inline void CharacterBasic::_internal_set_prologueprocess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prologueprocess_ = value;
}
inline void CharacterBasic::set_prologueprocess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prologueprocess(value);
  // @@protoc_insertion_point(field_set:game.CharacterBasic.prologueprocess)
}

// -------------------------------------------------------------------

// CharacterMap

// uint32 mapid = 1;
inline void CharacterMap::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CharacterMap::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CharacterMap::mapid() const {
  // @@protoc_insertion_point(field_get:game.CharacterMap.mapid)
  return _internal_mapid();
}
inline void CharacterMap::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void CharacterMap::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:game.CharacterMap.mapid)
}

// .game.VectorPacket pos = 2;
inline bool CharacterMap::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool CharacterMap::has_pos() const {
  return _internal_has_pos();
}
inline const ::game::VectorPacket& CharacterMap::_internal_pos() const {
  const ::game::VectorPacket* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::VectorPacket*>(
      &::game::_VectorPacket_default_instance_);
}
inline const ::game::VectorPacket& CharacterMap::pos() const {
  // @@protoc_insertion_point(field_get:game.CharacterMap.pos)
  return _internal_pos();
}
inline ::game::VectorPacket* CharacterMap::release_pos() {
  // @@protoc_insertion_point(field_release:game.CharacterMap.pos)
  
  ::game::VectorPacket* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::game::VectorPacket* CharacterMap::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::VectorPacket>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::game::VectorPacket* CharacterMap::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:game.CharacterMap.pos)
  return _internal_mutable_pos();
}
inline void CharacterMap::set_allocated_pos(::game::VectorPacket* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:game.CharacterMap.pos)
}

// .game.VectorPacket face = 3;
inline bool CharacterMap::_internal_has_face() const {
  return this != internal_default_instance() && face_ != nullptr;
}
inline bool CharacterMap::has_face() const {
  return _internal_has_face();
}
inline const ::game::VectorPacket& CharacterMap::_internal_face() const {
  const ::game::VectorPacket* p = face_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::VectorPacket*>(
      &::game::_VectorPacket_default_instance_);
}
inline const ::game::VectorPacket& CharacterMap::face() const {
  // @@protoc_insertion_point(field_get:game.CharacterMap.face)
  return _internal_face();
}
inline ::game::VectorPacket* CharacterMap::release_face() {
  // @@protoc_insertion_point(field_release:game.CharacterMap.face)
  
  ::game::VectorPacket* temp = face_;
  face_ = nullptr;
  return temp;
}
inline ::game::VectorPacket* CharacterMap::_internal_mutable_face() {
  
  if (face_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::VectorPacket>(GetArenaNoVirtual());
    face_ = p;
  }
  return face_;
}
inline ::game::VectorPacket* CharacterMap::mutable_face() {
  // @@protoc_insertion_point(field_mutable:game.CharacterMap.face)
  return _internal_mutable_face();
}
inline void CharacterMap::set_allocated_face(::game::VectorPacket* face) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(face_);
  }
  if (face) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face, submessage_arena);
    }
    
  } else {
    
  }
  face_ = face;
  // @@protoc_insertion_point(field_set_allocated:game.CharacterMap.face)
}

// -------------------------------------------------------------------

// LoginResponse

// .game.CharacterBasic basic = 1;
inline bool LoginResponse::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool LoginResponse::has_basic() const {
  return _internal_has_basic();
}
inline void LoginResponse::clear_basic() {
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::game::CharacterBasic& LoginResponse::_internal_basic() const {
  const ::game::CharacterBasic* p = basic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::CharacterBasic*>(
      &::game::_CharacterBasic_default_instance_);
}
inline const ::game::CharacterBasic& LoginResponse::basic() const {
  // @@protoc_insertion_point(field_get:game.LoginResponse.basic)
  return _internal_basic();
}
inline ::game::CharacterBasic* LoginResponse::release_basic() {
  // @@protoc_insertion_point(field_release:game.LoginResponse.basic)
  
  ::game::CharacterBasic* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::game::CharacterBasic* LoginResponse::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::CharacterBasic>(GetArenaNoVirtual());
    basic_ = p;
  }
  return basic_;
}
inline ::game::CharacterBasic* LoginResponse::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:game.LoginResponse.basic)
  return _internal_mutable_basic();
}
inline void LoginResponse::set_allocated_basic(::game::CharacterBasic* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:game.LoginResponse.basic)
}

// .game.CharacterMap map = 2;
inline bool LoginResponse::_internal_has_map() const {
  return this != internal_default_instance() && map_ != nullptr;
}
inline bool LoginResponse::has_map() const {
  return _internal_has_map();
}
inline void LoginResponse::clear_map() {
  if (GetArenaNoVirtual() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
}
inline const ::game::CharacterMap& LoginResponse::_internal_map() const {
  const ::game::CharacterMap* p = map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::CharacterMap*>(
      &::game::_CharacterMap_default_instance_);
}
inline const ::game::CharacterMap& LoginResponse::map() const {
  // @@protoc_insertion_point(field_get:game.LoginResponse.map)
  return _internal_map();
}
inline ::game::CharacterMap* LoginResponse::release_map() {
  // @@protoc_insertion_point(field_release:game.LoginResponse.map)
  
  ::game::CharacterMap* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::game::CharacterMap* LoginResponse::_internal_mutable_map() {
  
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::CharacterMap>(GetArenaNoVirtual());
    map_ = p;
  }
  return map_;
}
inline ::game::CharacterMap* LoginResponse::mutable_map() {
  // @@protoc_insertion_point(field_mutable:game.LoginResponse.map)
  return _internal_mutable_map();
}
inline void LoginResponse::set_allocated_map(::game::CharacterMap* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:game.LoginResponse.map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fgame_5flogin_2eproto
