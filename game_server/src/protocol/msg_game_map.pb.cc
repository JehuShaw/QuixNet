// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_map.proto

#include "msg_game_map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapCharacterPacket_map_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorPacket_common_5fpacket_2eproto;
namespace game {
class SyncPositionDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncPositionDataRequest> _instance;
} _SyncPositionDataRequest_default_instance_;
class SyncPositionDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncPositionDataResponse> _instance;
} _SyncPositionDataResponse_default_instance_;
class SwitchMapResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwitchMapResponse> _instance;
} _SwitchMapResponse_default_instance_;
class WorldListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldListRequest> _instance;
} _WorldListRequest_default_instance_;
class WorldListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldListResponse> _instance;
} _WorldListResponse_default_instance_;
class EnterWorldRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterWorldRequest> _instance;
} _EnterWorldRequest_default_instance_;
class EnterWorldResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterWorldResponse> _instance;
} _EnterWorldResponse_default_instance_;
}  // namespace game
static void InitDefaultsscc_info_EnterWorldRequest_msg_5fgame_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_EnterWorldRequest_default_instance_;
    new (ptr) ::game::EnterWorldRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::EnterWorldRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterWorldRequest_msg_5fgame_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterWorldRequest_msg_5fgame_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_EnterWorldResponse_msg_5fgame_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_EnterWorldResponse_default_instance_;
    new (ptr) ::game::EnterWorldResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::EnterWorldResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterWorldResponse_msg_5fgame_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterWorldResponse_msg_5fgame_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_SwitchMapResponse_msg_5fgame_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_SwitchMapResponse_default_instance_;
    new (ptr) ::game::SwitchMapResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::SwitchMapResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwitchMapResponse_msg_5fgame_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SwitchMapResponse_msg_5fgame_5fmap_2eproto}, {
      &scc_info_VectorPacket_common_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_SyncPositionDataRequest_msg_5fgame_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_SyncPositionDataRequest_default_instance_;
    new (ptr) ::game::SyncPositionDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::SyncPositionDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncPositionDataRequest_msg_5fgame_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncPositionDataRequest_msg_5fgame_5fmap_2eproto}, {
      &scc_info_VectorPacket_common_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_SyncPositionDataResponse_msg_5fgame_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_SyncPositionDataResponse_default_instance_;
    new (ptr) ::game::SyncPositionDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::SyncPositionDataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncPositionDataResponse_msg_5fgame_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncPositionDataResponse_msg_5fgame_5fmap_2eproto}, {
      &scc_info_MapCharacterPacket_map_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_WorldListRequest_msg_5fgame_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_WorldListRequest_default_instance_;
    new (ptr) ::game::WorldListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::WorldListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldListRequest_msg_5fgame_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorldListRequest_msg_5fgame_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_WorldListResponse_msg_5fgame_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_WorldListResponse_default_instance_;
    new (ptr) ::game::WorldListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::WorldListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldListResponse_msg_5fgame_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorldListResponse_msg_5fgame_5fmap_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_5fgame_5fmap_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msg_5fgame_5fmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_5fgame_5fmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_5fgame_5fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SyncPositionDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::SyncPositionDataRequest, pos_),
  PROTOBUF_FIELD_OFFSET(::game::SyncPositionDataRequest, face_),
  PROTOBUF_FIELD_OFFSET(::game::SyncPositionDataRequest, grididxs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SyncPositionDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::SyncPositionDataResponse, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SwitchMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::SwitchMapResponse, mapid_),
  PROTOBUF_FIELD_OFFSET(::game::SwitchMapResponse, pos_),
  PROTOBUF_FIELD_OFFSET(::game::SwitchMapResponse, face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::WorldListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::WorldListRequest, mapid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::WorldListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::WorldListResponse, mapid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::EnterWorldRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::EnterWorldRequest, mapid_),
  PROTOBUF_FIELD_OFFSET(::game::EnterWorldRequest, worldid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::EnterWorldResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::EnterWorldResponse, mapid_),
  PROTOBUF_FIELD_OFFSET(::game::EnterWorldResponse, worldid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::game::SyncPositionDataRequest)},
  { 8, -1, sizeof(::game::SyncPositionDataResponse)},
  { 14, -1, sizeof(::game::SwitchMapResponse)},
  { 22, -1, sizeof(::game::WorldListRequest)},
  { 28, -1, sizeof(::game::WorldListResponse)},
  { 34, -1, sizeof(::game::EnterWorldRequest)},
  { 41, -1, sizeof(::game::EnterWorldResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_SyncPositionDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_SyncPositionDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_SwitchMapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_WorldListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_WorldListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_EnterWorldRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_EnterWorldResponse_default_instance_),
};

const char descriptor_table_protodef_msg_5fgame_5fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022msg_game_map.proto\022\004game\032\023common_packe"
  "t.proto\032\020map_packet.proto\"n\n\027SyncPositio"
  "nDataRequest\022\037\n\003pos\030\001 \001(\0132\022.game.VectorP"
  "acket\022 \n\004face\030\002 \001(\0132\022.game.VectorPacket\022"
  "\020\n\010grididxs\030\003 \003(\005\"H\n\030SyncPositionDataRes"
  "ponse\022,\n\ncharacters\030\001 \003(\0132\030.game.MapChar"
  "acterPacket\"e\n\021SwitchMapResponse\022\r\n\005mapi"
  "d\030\001 \001(\r\022\037\n\003pos\030\002 \001(\0132\022.game.VectorPacket"
  "\022 \n\004face\030\003 \001(\0132\022.game.VectorPacket\"!\n\020Wo"
  "rldListRequest\022\r\n\005mapid\030\001 \001(\r\"\"\n\021WorldLi"
  "stResponse\022\r\n\005mapid\030\001 \001(\r\"3\n\021EnterWorldR"
  "equest\022\r\n\005mapid\030\001 \001(\r\022\017\n\007worldid\030\002 \001(\004\"4"
  "\n\022EnterWorldResponse\022\r\n\005mapid\030\001 \001(\r\022\017\n\007w"
  "orldid\030\002 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_5fgame_5fmap_2eproto_deps[2] = {
  &::descriptor_table_common_5fpacket_2eproto,
  &::descriptor_table_map_5fpacket_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_5fgame_5fmap_2eproto_sccs[7] = {
  &scc_info_EnterWorldRequest_msg_5fgame_5fmap_2eproto.base,
  &scc_info_EnterWorldResponse_msg_5fgame_5fmap_2eproto.base,
  &scc_info_SwitchMapResponse_msg_5fgame_5fmap_2eproto.base,
  &scc_info_SyncPositionDataRequest_msg_5fgame_5fmap_2eproto.base,
  &scc_info_SyncPositionDataResponse_msg_5fgame_5fmap_2eproto.base,
  &scc_info_WorldListRequest_msg_5fgame_5fmap_2eproto.base,
  &scc_info_WorldListResponse_msg_5fgame_5fmap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_5fgame_5fmap_2eproto_once;
static bool descriptor_table_msg_5fgame_5fmap_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fgame_5fmap_2eproto = {
  &descriptor_table_msg_5fgame_5fmap_2eproto_initialized, descriptor_table_protodef_msg_5fgame_5fmap_2eproto, "msg_game_map.proto", 540,
  &descriptor_table_msg_5fgame_5fmap_2eproto_once, descriptor_table_msg_5fgame_5fmap_2eproto_sccs, descriptor_table_msg_5fgame_5fmap_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_msg_5fgame_5fmap_2eproto::offsets,
  file_level_metadata_msg_5fgame_5fmap_2eproto, 7, file_level_enum_descriptors_msg_5fgame_5fmap_2eproto, file_level_service_descriptors_msg_5fgame_5fmap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_5fgame_5fmap_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_5fgame_5fmap_2eproto), true);
namespace game {

// ===================================================================

void SyncPositionDataRequest::InitAsDefaultInstance() {
  ::game::_SyncPositionDataRequest_default_instance_._instance.get_mutable()->pos_ = const_cast< ::game::VectorPacket*>(
      ::game::VectorPacket::internal_default_instance());
  ::game::_SyncPositionDataRequest_default_instance_._instance.get_mutable()->face_ = const_cast< ::game::VectorPacket*>(
      ::game::VectorPacket::internal_default_instance());
}
class SyncPositionDataRequest::_Internal {
 public:
  static const ::game::VectorPacket& pos(const SyncPositionDataRequest* msg);
  static const ::game::VectorPacket& face(const SyncPositionDataRequest* msg);
};

const ::game::VectorPacket&
SyncPositionDataRequest::_Internal::pos(const SyncPositionDataRequest* msg) {
  return *msg->pos_;
}
const ::game::VectorPacket&
SyncPositionDataRequest::_Internal::face(const SyncPositionDataRequest* msg) {
  return *msg->face_;
}
void SyncPositionDataRequest::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void SyncPositionDataRequest::clear_face() {
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
}
SyncPositionDataRequest::SyncPositionDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.SyncPositionDataRequest)
}
SyncPositionDataRequest::SyncPositionDataRequest(const SyncPositionDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      grididxs_(from.grididxs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::game::VectorPacket(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_face()) {
    face_ = new ::game::VectorPacket(*from.face_);
  } else {
    face_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:game.SyncPositionDataRequest)
}

void SyncPositionDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncPositionDataRequest_msg_5fgame_5fmap_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(face_));
}

SyncPositionDataRequest::~SyncPositionDataRequest() {
  // @@protoc_insertion_point(destructor:game.SyncPositionDataRequest)
  SharedDtor();
}

void SyncPositionDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete face_;
}

void SyncPositionDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncPositionDataRequest& SyncPositionDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncPositionDataRequest_msg_5fgame_5fmap_2eproto.base);
  return *internal_default_instance();
}


void SyncPositionDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SyncPositionDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grididxs_.Clear();
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SyncPositionDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .game.VectorPacket pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.VectorPacket face = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_face(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 grididxs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_grididxs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_grididxs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPositionDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SyncPositionDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.VectorPacket pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // .game.VectorPacket face = 2;
  if (this->has_face()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::face(this), target, stream);
  }

  // repeated int32 grididxs = 3;
  {
    int byte_size = _grididxs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_grididxs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SyncPositionDataRequest)
  return target;
}

size_t SyncPositionDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SyncPositionDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 grididxs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->grididxs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _grididxs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .game.VectorPacket pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .game.VectorPacket face = 2;
  if (this->has_face()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPositionDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.SyncPositionDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPositionDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPositionDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.SyncPositionDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.SyncPositionDataRequest)
    MergeFrom(*source);
  }
}

void SyncPositionDataRequest::MergeFrom(const SyncPositionDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.SyncPositionDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grididxs_.MergeFrom(from.grididxs_);
  if (from.has_pos()) {
    _internal_mutable_pos()->::game::VectorPacket::MergeFrom(from._internal_pos());
  }
  if (from.has_face()) {
    _internal_mutable_face()->::game::VectorPacket::MergeFrom(from._internal_face());
  }
}

void SyncPositionDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.SyncPositionDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPositionDataRequest::CopyFrom(const SyncPositionDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SyncPositionDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPositionDataRequest::IsInitialized() const {
  return true;
}

void SyncPositionDataRequest::InternalSwap(SyncPositionDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  grididxs_.InternalSwap(&other->grididxs_);
  swap(pos_, other->pos_);
  swap(face_, other->face_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPositionDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncPositionDataResponse::InitAsDefaultInstance() {
}
class SyncPositionDataResponse::_Internal {
 public:
};

void SyncPositionDataResponse::clear_characters() {
  characters_.Clear();
}
SyncPositionDataResponse::SyncPositionDataResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.SyncPositionDataResponse)
}
SyncPositionDataResponse::SyncPositionDataResponse(const SyncPositionDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.SyncPositionDataResponse)
}

void SyncPositionDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncPositionDataResponse_msg_5fgame_5fmap_2eproto.base);
}

SyncPositionDataResponse::~SyncPositionDataResponse() {
  // @@protoc_insertion_point(destructor:game.SyncPositionDataResponse)
  SharedDtor();
}

void SyncPositionDataResponse::SharedDtor() {
}

void SyncPositionDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncPositionDataResponse& SyncPositionDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncPositionDataResponse_msg_5fgame_5fmap_2eproto.base);
  return *internal_default_instance();
}


void SyncPositionDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SyncPositionDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_.Clear();
  _internal_metadata_.Clear();
}

const char* SyncPositionDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .game.MapCharacterPacket characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPositionDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SyncPositionDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.MapCharacterPacket characters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_characters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SyncPositionDataResponse)
  return target;
}

size_t SyncPositionDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SyncPositionDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.MapCharacterPacket characters = 1;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPositionDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.SyncPositionDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPositionDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPositionDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.SyncPositionDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.SyncPositionDataResponse)
    MergeFrom(*source);
  }
}

void SyncPositionDataResponse::MergeFrom(const SyncPositionDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.SyncPositionDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characters_.MergeFrom(from.characters_);
}

void SyncPositionDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.SyncPositionDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPositionDataResponse::CopyFrom(const SyncPositionDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SyncPositionDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPositionDataResponse::IsInitialized() const {
  return true;
}

void SyncPositionDataResponse::InternalSwap(SyncPositionDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  characters_.InternalSwap(&other->characters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPositionDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwitchMapResponse::InitAsDefaultInstance() {
  ::game::_SwitchMapResponse_default_instance_._instance.get_mutable()->pos_ = const_cast< ::game::VectorPacket*>(
      ::game::VectorPacket::internal_default_instance());
  ::game::_SwitchMapResponse_default_instance_._instance.get_mutable()->face_ = const_cast< ::game::VectorPacket*>(
      ::game::VectorPacket::internal_default_instance());
}
class SwitchMapResponse::_Internal {
 public:
  static const ::game::VectorPacket& pos(const SwitchMapResponse* msg);
  static const ::game::VectorPacket& face(const SwitchMapResponse* msg);
};

const ::game::VectorPacket&
SwitchMapResponse::_Internal::pos(const SwitchMapResponse* msg) {
  return *msg->pos_;
}
const ::game::VectorPacket&
SwitchMapResponse::_Internal::face(const SwitchMapResponse* msg) {
  return *msg->face_;
}
void SwitchMapResponse::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void SwitchMapResponse::clear_face() {
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
}
SwitchMapResponse::SwitchMapResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.SwitchMapResponse)
}
SwitchMapResponse::SwitchMapResponse(const SwitchMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::game::VectorPacket(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_face()) {
    face_ = new ::game::VectorPacket(*from.face_);
  } else {
    face_ = nullptr;
  }
  mapid_ = from.mapid_;
  // @@protoc_insertion_point(copy_constructor:game.SwitchMapResponse)
}

void SwitchMapResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwitchMapResponse_msg_5fgame_5fmap_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapid_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(mapid_));
}

SwitchMapResponse::~SwitchMapResponse() {
  // @@protoc_insertion_point(destructor:game.SwitchMapResponse)
  SharedDtor();
}

void SwitchMapResponse::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete face_;
}

void SwitchMapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchMapResponse& SwitchMapResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwitchMapResponse_msg_5fgame_5fmap_2eproto.base);
  return *internal_default_instance();
}


void SwitchMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SwitchMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
  mapid_ = 0u;
  _internal_metadata_.Clear();
}

const char* SwitchMapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.VectorPacket pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.VectorPacket face = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_face(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwitchMapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SwitchMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // .game.VectorPacket pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // .game.VectorPacket face = 3;
  if (this->has_face()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::face(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SwitchMapResponse)
  return target;
}

size_t SwitchMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SwitchMapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.VectorPacket pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .game.VectorPacket face = 3;
  if (this->has_face()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_);
  }

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchMapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.SwitchMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchMapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwitchMapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.SwitchMapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.SwitchMapResponse)
    MergeFrom(*source);
  }
}

void SwitchMapResponse::MergeFrom(const SwitchMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.SwitchMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::game::VectorPacket::MergeFrom(from._internal_pos());
  }
  if (from.has_face()) {
    _internal_mutable_face()->::game::VectorPacket::MergeFrom(from._internal_face());
  }
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
}

void SwitchMapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.SwitchMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchMapResponse::CopyFrom(const SwitchMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SwitchMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchMapResponse::IsInitialized() const {
  return true;
}

void SwitchMapResponse::InternalSwap(SwitchMapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(face_, other->face_);
  swap(mapid_, other->mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchMapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldListRequest::InitAsDefaultInstance() {
}
class WorldListRequest::_Internal {
 public:
};

WorldListRequest::WorldListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.WorldListRequest)
}
WorldListRequest::WorldListRequest(const WorldListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapid_ = from.mapid_;
  // @@protoc_insertion_point(copy_constructor:game.WorldListRequest)
}

void WorldListRequest::SharedCtor() {
  mapid_ = 0u;
}

WorldListRequest::~WorldListRequest() {
  // @@protoc_insertion_point(destructor:game.WorldListRequest)
  SharedDtor();
}

void WorldListRequest::SharedDtor() {
}

void WorldListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldListRequest& WorldListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldListRequest_msg_5fgame_5fmap_2eproto.base);
  return *internal_default_instance();
}


void WorldListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.WorldListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapid_ = 0u;
  _internal_metadata_.Clear();
}

const char* WorldListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.WorldListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.WorldListRequest)
  return target;
}

size_t WorldListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.WorldListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.WorldListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.WorldListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.WorldListRequest)
    MergeFrom(*source);
  }
}

void WorldListRequest::MergeFrom(const WorldListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.WorldListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
}

void WorldListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.WorldListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldListRequest::CopyFrom(const WorldListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.WorldListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldListRequest::IsInitialized() const {
  return true;
}

void WorldListRequest::InternalSwap(WorldListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldListResponse::InitAsDefaultInstance() {
}
class WorldListResponse::_Internal {
 public:
};

WorldListResponse::WorldListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.WorldListResponse)
}
WorldListResponse::WorldListResponse(const WorldListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapid_ = from.mapid_;
  // @@protoc_insertion_point(copy_constructor:game.WorldListResponse)
}

void WorldListResponse::SharedCtor() {
  mapid_ = 0u;
}

WorldListResponse::~WorldListResponse() {
  // @@protoc_insertion_point(destructor:game.WorldListResponse)
  SharedDtor();
}

void WorldListResponse::SharedDtor() {
}

void WorldListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldListResponse& WorldListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldListResponse_msg_5fgame_5fmap_2eproto.base);
  return *internal_default_instance();
}


void WorldListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.WorldListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapid_ = 0u;
  _internal_metadata_.Clear();
}

const char* WorldListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.WorldListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.WorldListResponse)
  return target;
}

size_t WorldListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.WorldListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.WorldListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.WorldListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.WorldListResponse)
    MergeFrom(*source);
  }
}

void WorldListResponse::MergeFrom(const WorldListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.WorldListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
}

void WorldListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.WorldListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldListResponse::CopyFrom(const WorldListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.WorldListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldListResponse::IsInitialized() const {
  return true;
}

void WorldListResponse::InternalSwap(WorldListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterWorldRequest::InitAsDefaultInstance() {
}
class EnterWorldRequest::_Internal {
 public:
};

EnterWorldRequest::EnterWorldRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.EnterWorldRequest)
}
EnterWorldRequest::EnterWorldRequest(const EnterWorldRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mapid_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(mapid_));
  // @@protoc_insertion_point(copy_constructor:game.EnterWorldRequest)
}

void EnterWorldRequest::SharedCtor() {
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapid_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(mapid_));
}

EnterWorldRequest::~EnterWorldRequest() {
  // @@protoc_insertion_point(destructor:game.EnterWorldRequest)
  SharedDtor();
}

void EnterWorldRequest::SharedDtor() {
}

void EnterWorldRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterWorldRequest& EnterWorldRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterWorldRequest_msg_5fgame_5fmap_2eproto.base);
  return *internal_default_instance();
}


void EnterWorldRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.EnterWorldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapid_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(mapid_));
  _internal_metadata_.Clear();
}

const char* EnterWorldRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 worldid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterWorldRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.EnterWorldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // uint64 worldid = 2;
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_worldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.EnterWorldRequest)
  return target;
}

size_t EnterWorldRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.EnterWorldRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 worldid = 2;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_worldid());
  }

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterWorldRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.EnterWorldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterWorldRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterWorldRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.EnterWorldRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.EnterWorldRequest)
    MergeFrom(*source);
  }
}

void EnterWorldRequest::MergeFrom(const EnterWorldRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.EnterWorldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
}

void EnterWorldRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.EnterWorldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterWorldRequest::CopyFrom(const EnterWorldRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.EnterWorldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterWorldRequest::IsInitialized() const {
  return true;
}

void EnterWorldRequest::InternalSwap(EnterWorldRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(worldid_, other->worldid_);
  swap(mapid_, other->mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterWorldRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterWorldResponse::InitAsDefaultInstance() {
}
class EnterWorldResponse::_Internal {
 public:
};

EnterWorldResponse::EnterWorldResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.EnterWorldResponse)
}
EnterWorldResponse::EnterWorldResponse(const EnterWorldResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mapid_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(mapid_));
  // @@protoc_insertion_point(copy_constructor:game.EnterWorldResponse)
}

void EnterWorldResponse::SharedCtor() {
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapid_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(mapid_));
}

EnterWorldResponse::~EnterWorldResponse() {
  // @@protoc_insertion_point(destructor:game.EnterWorldResponse)
  SharedDtor();
}

void EnterWorldResponse::SharedDtor() {
}

void EnterWorldResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterWorldResponse& EnterWorldResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterWorldResponse_msg_5fgame_5fmap_2eproto.base);
  return *internal_default_instance();
}


void EnterWorldResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.EnterWorldResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapid_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(mapid_));
  _internal_metadata_.Clear();
}

const char* EnterWorldResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 worldid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterWorldResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.EnterWorldResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // uint64 worldid = 2;
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_worldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.EnterWorldResponse)
  return target;
}

size_t EnterWorldResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.EnterWorldResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 worldid = 2;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_worldid());
  }

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterWorldResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.EnterWorldResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterWorldResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterWorldResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.EnterWorldResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.EnterWorldResponse)
    MergeFrom(*source);
  }
}

void EnterWorldResponse::MergeFrom(const EnterWorldResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.EnterWorldResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
}

void EnterWorldResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.EnterWorldResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterWorldResponse::CopyFrom(const EnterWorldResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.EnterWorldResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterWorldResponse::IsInitialized() const {
  return true;
}

void EnterWorldResponse::InternalSwap(EnterWorldResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(worldid_, other->worldid_);
  swap(mapid_, other->mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterWorldResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::SyncPositionDataRequest* Arena::CreateMaybeMessage< ::game::SyncPositionDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::game::SyncPositionDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SyncPositionDataResponse* Arena::CreateMaybeMessage< ::game::SyncPositionDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::game::SyncPositionDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SwitchMapResponse* Arena::CreateMaybeMessage< ::game::SwitchMapResponse >(Arena* arena) {
  return Arena::CreateInternal< ::game::SwitchMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::WorldListRequest* Arena::CreateMaybeMessage< ::game::WorldListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::game::WorldListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::WorldListResponse* Arena::CreateMaybeMessage< ::game::WorldListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::game::WorldListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::EnterWorldRequest* Arena::CreateMaybeMessage< ::game::EnterWorldRequest >(Arena* arena) {
  return Arena::CreateInternal< ::game::EnterWorldRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::EnterWorldResponse* Arena::CreateMaybeMessage< ::game::EnterWorldResponse >(Arena* arena) {
  return Arena::CreateInternal< ::game::EnterWorldResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
