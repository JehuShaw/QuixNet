// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_mail.proto

#include "msg_game_mail.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_msg_5fgame_5fmail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MailBriefPacket_msg_5fgame_5fmail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mail_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MailCharacter_mail_5fpacket_2eproto;
namespace game {
class MailBriefPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MailBriefPacket> _instance;
} _MailBriefPacket_default_instance_;
class SendMailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMailRequest> _instance;
} _SendMailRequest_default_instance_;
class NotifMailPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotifMailPacket> _instance;
} _NotifMailPacket_default_instance_;
class GetMailListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMailListRequest> _instance;
} _GetMailListRequest_default_instance_;
class GetMailListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMailListResponse> _instance;
} _GetMailListResponse_default_instance_;
class GetMailDetailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMailDetailRequest> _instance;
} _GetMailDetailRequest_default_instance_;
class GetMailDetailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMailDetailResponse> _instance;
} _GetMailDetailResponse_default_instance_;
class GetMailAttachmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMailAttachmentRequest> _instance;
} _GetMailAttachmentRequest_default_instance_;
class GetMailAttachmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMailAttachmentResponse> _instance;
} _GetMailAttachmentResponse_default_instance_;
class DelMailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelMailRequest> _instance;
} _DelMailRequest_default_instance_;
class DelMailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelMailResponse> _instance;
} _DelMailResponse_default_instance_;
}  // namespace game
static void InitDefaultsscc_info_DelMailRequest_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_DelMailRequest_default_instance_;
    new (ptr) ::game::DelMailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::DelMailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelMailRequest_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelMailRequest_msg_5fgame_5fmail_2eproto}, {}};

static void InitDefaultsscc_info_DelMailResponse_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_DelMailResponse_default_instance_;
    new (ptr) ::game::DelMailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::DelMailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelMailResponse_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelMailResponse_msg_5fgame_5fmail_2eproto}, {}};

static void InitDefaultsscc_info_GetMailAttachmentRequest_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_GetMailAttachmentRequest_default_instance_;
    new (ptr) ::game::GetMailAttachmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::GetMailAttachmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMailAttachmentRequest_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMailAttachmentRequest_msg_5fgame_5fmail_2eproto}, {}};

static void InitDefaultsscc_info_GetMailAttachmentResponse_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_GetMailAttachmentResponse_default_instance_;
    new (ptr) ::game::GetMailAttachmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::GetMailAttachmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMailAttachmentResponse_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMailAttachmentResponse_msg_5fgame_5fmail_2eproto}, {}};

static void InitDefaultsscc_info_GetMailDetailRequest_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_GetMailDetailRequest_default_instance_;
    new (ptr) ::game::GetMailDetailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::GetMailDetailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMailDetailRequest_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMailDetailRequest_msg_5fgame_5fmail_2eproto}, {}};

static void InitDefaultsscc_info_GetMailDetailResponse_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_GetMailDetailResponse_default_instance_;
    new (ptr) ::game::GetMailDetailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::GetMailDetailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMailDetailResponse_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMailDetailResponse_msg_5fgame_5fmail_2eproto}, {}};

static void InitDefaultsscc_info_GetMailListRequest_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_GetMailListRequest_default_instance_;
    new (ptr) ::game::GetMailListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::GetMailListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMailListRequest_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMailListRequest_msg_5fgame_5fmail_2eproto}, {}};

static void InitDefaultsscc_info_GetMailListResponse_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_GetMailListResponse_default_instance_;
    new (ptr) ::game::GetMailListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::GetMailListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMailListResponse_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMailListResponse_msg_5fgame_5fmail_2eproto}, {
      &scc_info_MailBriefPacket_msg_5fgame_5fmail_2eproto.base,}};

static void InitDefaultsscc_info_MailBriefPacket_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_MailBriefPacket_default_instance_;
    new (ptr) ::game::MailBriefPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::MailBriefPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MailBriefPacket_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MailBriefPacket_msg_5fgame_5fmail_2eproto}, {
      &scc_info_MailCharacter_mail_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_NotifMailPacket_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_NotifMailPacket_default_instance_;
    new (ptr) ::game::NotifMailPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::NotifMailPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NotifMailPacket_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NotifMailPacket_msg_5fgame_5fmail_2eproto}, {
      &scc_info_MailCharacter_mail_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_SendMailRequest_msg_5fgame_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_SendMailRequest_default_instance_;
    new (ptr) ::game::SendMailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::SendMailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendMailRequest_msg_5fgame_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendMailRequest_msg_5fgame_5fmail_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_5fgame_5fmail_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msg_5fgame_5fmail_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_5fgame_5fmail_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_5fgame_5fmail_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::MailBriefPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::MailBriefPacket, index_),
  PROTOBUF_FIELD_OFFSET(::game::MailBriefPacket, mailtype_),
  PROTOBUF_FIELD_OFFSET(::game::MailBriefPacket, sender_),
  PROTOBUF_FIELD_OFFSET(::game::MailBriefPacket, titletype_),
  PROTOBUF_FIELD_OFFSET(::game::MailBriefPacket, title_),
  PROTOBUF_FIELD_OFFSET(::game::MailBriefPacket, sendtime_),
  PROTOBUF_FIELD_OFFSET(::game::MailBriefPacket, read_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SendMailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::SendMailRequest, receiverid_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailRequest, titletype_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailRequest, title_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailRequest, contenttype_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailRequest, content_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailRequest, attachmenttype_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailRequest, attachment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::NotifMailPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::NotifMailPacket, index_),
  PROTOBUF_FIELD_OFFSET(::game::NotifMailPacket, sender_),
  PROTOBUF_FIELD_OFFSET(::game::NotifMailPacket, title_),
  PROTOBUF_FIELD_OFFSET(::game::NotifMailPacket, sendtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::GetMailListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::GetMailListRequest, page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::GetMailListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::GetMailListResponse, page_),
  PROTOBUF_FIELD_OFFSET(::game::GetMailListResponse, mails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::GetMailDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::GetMailDetailRequest, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::GetMailDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::GetMailDetailResponse, index_),
  PROTOBUF_FIELD_OFFSET(::game::GetMailDetailResponse, mailtype_),
  PROTOBUF_FIELD_OFFSET(::game::GetMailDetailResponse, contenttype_),
  PROTOBUF_FIELD_OFFSET(::game::GetMailDetailResponse, content_),
  PROTOBUF_FIELD_OFFSET(::game::GetMailDetailResponse, attachmenttype_),
  PROTOBUF_FIELD_OFFSET(::game::GetMailDetailResponse, attachment_),
  PROTOBUF_FIELD_OFFSET(::game::GetMailDetailResponse, taken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::GetMailAttachmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::GetMailAttachmentRequest, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::GetMailAttachmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::GetMailAttachmentResponse, index_),
  PROTOBUF_FIELD_OFFSET(::game::GetMailAttachmentResponse, attachmenttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::DelMailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::DelMailRequest, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::DelMailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::DelMailResponse, index_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::game::MailBriefPacket)},
  { 12, -1, sizeof(::game::SendMailRequest)},
  { 24, -1, sizeof(::game::NotifMailPacket)},
  { 33, -1, sizeof(::game::GetMailListRequest)},
  { 39, -1, sizeof(::game::GetMailListResponse)},
  { 46, -1, sizeof(::game::GetMailDetailRequest)},
  { 52, -1, sizeof(::game::GetMailDetailResponse)},
  { 64, -1, sizeof(::game::GetMailAttachmentRequest)},
  { 70, -1, sizeof(::game::GetMailAttachmentResponse)},
  { 77, -1, sizeof(::game::DelMailRequest)},
  { 83, -1, sizeof(::game::DelMailResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_MailBriefPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_SendMailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_NotifMailPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_GetMailListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_GetMailListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_GetMailDetailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_GetMailDetailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_GetMailAttachmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_GetMailAttachmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_DelMailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_DelMailResponse_default_instance_),
};

const char descriptor_table_protodef_msg_5fgame_5fmail_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023msg_game_mail.proto\022\004game\032\021mail_packet"
  ".proto\"\231\001\n\017MailBriefPacket\022\r\n\005index\030\001 \001("
  "\r\022\020\n\010mailtype\030\002 \001(\005\022#\n\006sender\030\003 \001(\0132\023.ga"
  "me.MailCharacter\022\021\n\ttitletype\030\004 \001(\005\022\r\n\005t"
  "itle\030\005 \001(\t\022\020\n\010sendtime\030\006 \001(\004\022\014\n\004read\030\007 \001"
  "(\005\"\231\001\n\017SendMailRequest\022\022\n\nreceiverid\030\001 \001"
  "(\004\022\021\n\ttitletype\030\002 \001(\005\022\r\n\005title\030\003 \001(\t\022\023\n\013"
  "contenttype\030\004 \001(\005\022\017\n\007content\030\005 \001(\014\022\026\n\016at"
  "tachmenttype\030\006 \001(\005\022\022\n\nattachment\030\007 \001(\014\"f"
  "\n\017NotifMailPacket\022\r\n\005index\030\001 \001(\r\022#\n\006send"
  "er\030\002 \001(\0132\023.game.MailCharacter\022\r\n\005title\030\003"
  " \001(\t\022\020\n\010sendtime\030\004 \001(\004\"\"\n\022GetMailListReq"
  "uest\022\014\n\004page\030\001 \001(\r\"I\n\023GetMailListRespons"
  "e\022\014\n\004page\030\001 \001(\r\022$\n\005mails\030\002 \003(\0132\025.game.Ma"
  "ilBriefPacket\"%\n\024GetMailDetailRequest\022\r\n"
  "\005index\030\001 \001(\r\"\231\001\n\025GetMailDetailResponse\022\r"
  "\n\005index\030\001 \001(\r\022\020\n\010mailtype\030\002 \001(\005\022\023\n\013conte"
  "nttype\030\003 \001(\005\022\017\n\007content\030\004 \001(\014\022\026\n\016attachm"
  "enttype\030\005 \001(\005\022\022\n\nattachment\030\006 \001(\014\022\r\n\005tak"
  "en\030\007 \001(\005\")\n\030GetMailAttachmentRequest\022\r\n\005"
  "index\030\001 \001(\r\"B\n\031GetMailAttachmentResponse"
  "\022\r\n\005index\030\001 \001(\r\022\026\n\016attachmenttype\030\002 \001(\005\""
  "\037\n\016DelMailRequest\022\r\n\005index\030\001 \001(\r\" \n\017DelM"
  "ailResponse\022\r\n\005index\030\001 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_5fgame_5fmail_2eproto_deps[1] = {
  &::descriptor_table_mail_5fpacket_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_5fgame_5fmail_2eproto_sccs[11] = {
  &scc_info_DelMailRequest_msg_5fgame_5fmail_2eproto.base,
  &scc_info_DelMailResponse_msg_5fgame_5fmail_2eproto.base,
  &scc_info_GetMailAttachmentRequest_msg_5fgame_5fmail_2eproto.base,
  &scc_info_GetMailAttachmentResponse_msg_5fgame_5fmail_2eproto.base,
  &scc_info_GetMailDetailRequest_msg_5fgame_5fmail_2eproto.base,
  &scc_info_GetMailDetailResponse_msg_5fgame_5fmail_2eproto.base,
  &scc_info_GetMailListRequest_msg_5fgame_5fmail_2eproto.base,
  &scc_info_GetMailListResponse_msg_5fgame_5fmail_2eproto.base,
  &scc_info_MailBriefPacket_msg_5fgame_5fmail_2eproto.base,
  &scc_info_NotifMailPacket_msg_5fgame_5fmail_2eproto.base,
  &scc_info_SendMailRequest_msg_5fgame_5fmail_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_5fgame_5fmail_2eproto_once;
static bool descriptor_table_msg_5fgame_5fmail_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fgame_5fmail_2eproto = {
  &descriptor_table_msg_5fgame_5fmail_2eproto_initialized, descriptor_table_protodef_msg_5fgame_5fmail_2eproto, "msg_game_mail.proto", 954,
  &descriptor_table_msg_5fgame_5fmail_2eproto_once, descriptor_table_msg_5fgame_5fmail_2eproto_sccs, descriptor_table_msg_5fgame_5fmail_2eproto_deps, 11, 1,
  schemas, file_default_instances, TableStruct_msg_5fgame_5fmail_2eproto::offsets,
  file_level_metadata_msg_5fgame_5fmail_2eproto, 11, file_level_enum_descriptors_msg_5fgame_5fmail_2eproto, file_level_service_descriptors_msg_5fgame_5fmail_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_5fgame_5fmail_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_5fgame_5fmail_2eproto), true);
namespace game {

// ===================================================================

void MailBriefPacket::InitAsDefaultInstance() {
  ::game::_MailBriefPacket_default_instance_._instance.get_mutable()->sender_ = const_cast< ::game::MailCharacter*>(
      ::game::MailCharacter::internal_default_instance());
}
class MailBriefPacket::_Internal {
 public:
  static const ::game::MailCharacter& sender(const MailBriefPacket* msg);
};

const ::game::MailCharacter&
MailBriefPacket::_Internal::sender(const MailBriefPacket* msg) {
  return *msg->sender_;
}
void MailBriefPacket::clear_sender() {
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
MailBriefPacket::MailBriefPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.MailBriefPacket)
}
MailBriefPacket::MailBriefPacket(const MailBriefPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from._internal_has_sender()) {
    sender_ = new ::game::MailCharacter(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&sendtime_) -
    reinterpret_cast<char*>(&index_)) + sizeof(sendtime_));
  // @@protoc_insertion_point(copy_constructor:game.MailBriefPacket)
}

void MailBriefPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MailBriefPacket_msg_5fgame_5fmail_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendtime_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(sendtime_));
}

MailBriefPacket::~MailBriefPacket() {
  // @@protoc_insertion_point(destructor:game.MailBriefPacket)
  SharedDtor();
}

void MailBriefPacket::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void MailBriefPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MailBriefPacket& MailBriefPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MailBriefPacket_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void MailBriefPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:game.MailBriefPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendtime_) -
      reinterpret_cast<char*>(&index_)) + sizeof(sendtime_));
  _internal_metadata_.Clear();
}

const char* MailBriefPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mailtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mailtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.MailCharacter sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 titletype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          titletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.MailBriefPacket.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sendtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 read = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailBriefPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.MailBriefPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 mailtype = 2;
  if (this->mailtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mailtype(), target);
  }

  // .game.MailCharacter sender = 3;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sender(this), target, stream);
  }

  // int32 titletype = 4;
  if (this->titletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_titletype(), target);
  }

  // string title = 5;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.MailBriefPacket.title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  // uint64 sendtime = 6;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sendtime(), target);
  }

  // int32 read = 7;
  if (this->read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.MailBriefPacket)
  return target;
}

size_t MailBriefPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.MailBriefPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 5;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .game.MailCharacter sender = 3;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // int32 mailtype = 2;
  if (this->mailtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mailtype());
  }

  // int32 titletype = 4;
  if (this->titletype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_titletype());
  }

  // int32 read = 7;
  if (this->read() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_read());
  }

  // uint64 sendtime = 6;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailBriefPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.MailBriefPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const MailBriefPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailBriefPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.MailBriefPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.MailBriefPacket)
    MergeFrom(*source);
  }
}

void MailBriefPacket::MergeFrom(const MailBriefPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.MailBriefPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::game::MailCharacter::MergeFrom(from._internal_sender());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.mailtype() != 0) {
    _internal_set_mailtype(from._internal_mailtype());
  }
  if (from.titletype() != 0) {
    _internal_set_titletype(from._internal_titletype());
  }
  if (from.read() != 0) {
    _internal_set_read(from._internal_read());
  }
  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
}

void MailBriefPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.MailBriefPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailBriefPacket::CopyFrom(const MailBriefPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.MailBriefPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailBriefPacket::IsInitialized() const {
  return true;
}

void MailBriefPacket::InternalSwap(MailBriefPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_, other->sender_);
  swap(index_, other->index_);
  swap(mailtype_, other->mailtype_);
  swap(titletype_, other->titletype_);
  swap(read_, other->read_);
  swap(sendtime_, other->sendtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MailBriefPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendMailRequest::InitAsDefaultInstance() {
}
class SendMailRequest::_Internal {
 public:
};

SendMailRequest::SendMailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.SendMailRequest)
}
SendMailRequest::SendMailRequest(const SendMailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  attachment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attachment().empty()) {
    attachment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  ::memcpy(&receiverid_, &from.receiverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&attachmenttype_) -
    reinterpret_cast<char*>(&receiverid_)) + sizeof(attachmenttype_));
  // @@protoc_insertion_point(copy_constructor:game.SendMailRequest)
}

void SendMailRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMailRequest_msg_5fgame_5fmail_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&receiverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attachmenttype_) -
      reinterpret_cast<char*>(&receiverid_)) + sizeof(attachmenttype_));
}

SendMailRequest::~SendMailRequest() {
  // @@protoc_insertion_point(destructor:game.SendMailRequest)
  SharedDtor();
}

void SendMailRequest::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendMailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMailRequest& SendMailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMailRequest_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void SendMailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SendMailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&receiverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attachmenttype_) -
      reinterpret_cast<char*>(&receiverid_)) + sizeof(attachmenttype_));
  _internal_metadata_.Clear();
}

const char* SendMailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 receiverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          receiverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 titletype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          titletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.SendMailRequest.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contenttype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          contenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attachmenttype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          attachmenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attachment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_attachment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SendMailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 receiverid = 1;
  if (this->receiverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_receiverid(), target);
  }

  // int32 titletype = 2;
  if (this->titletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_titletype(), target);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SendMailRequest.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // int32 contenttype = 4;
  if (this->contenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_contenttype(), target);
  }

  // bytes content = 5;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_content(), target);
  }

  // int32 attachmenttype = 6;
  if (this->attachmenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_attachmenttype(), target);
  }

  // bytes attachment = 7;
  if (this->attachment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_attachment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SendMailRequest)
  return target;
}

size_t SendMailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SendMailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // bytes content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // bytes attachment = 7;
  if (this->attachment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attachment());
  }

  // uint64 receiverid = 1;
  if (this->receiverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_receiverid());
  }

  // int32 titletype = 2;
  if (this->titletype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_titletype());
  }

  // int32 contenttype = 4;
  if (this->contenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contenttype());
  }

  // int32 attachmenttype = 6;
  if (this->attachmenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attachmenttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.SendMailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.SendMailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.SendMailRequest)
    MergeFrom(*source);
  }
}

void SendMailRequest::MergeFrom(const SendMailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.SendMailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.attachment().size() > 0) {

    attachment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  if (from.receiverid() != 0) {
    _internal_set_receiverid(from._internal_receiverid());
  }
  if (from.titletype() != 0) {
    _internal_set_titletype(from._internal_titletype());
  }
  if (from.contenttype() != 0) {
    _internal_set_contenttype(from._internal_contenttype());
  }
  if (from.attachmenttype() != 0) {
    _internal_set_attachmenttype(from._internal_attachmenttype());
  }
}

void SendMailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.SendMailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMailRequest::CopyFrom(const SendMailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SendMailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailRequest::IsInitialized() const {
  return true;
}

void SendMailRequest::InternalSwap(SendMailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attachment_.Swap(&other->attachment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(receiverid_, other->receiverid_);
  swap(titletype_, other->titletype_);
  swap(contenttype_, other->contenttype_);
  swap(attachmenttype_, other->attachmenttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NotifMailPacket::InitAsDefaultInstance() {
  ::game::_NotifMailPacket_default_instance_._instance.get_mutable()->sender_ = const_cast< ::game::MailCharacter*>(
      ::game::MailCharacter::internal_default_instance());
}
class NotifMailPacket::_Internal {
 public:
  static const ::game::MailCharacter& sender(const NotifMailPacket* msg);
};

const ::game::MailCharacter&
NotifMailPacket::_Internal::sender(const NotifMailPacket* msg) {
  return *msg->sender_;
}
void NotifMailPacket::clear_sender() {
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
NotifMailPacket::NotifMailPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.NotifMailPacket)
}
NotifMailPacket::NotifMailPacket(const NotifMailPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from._internal_has_sender()) {
    sender_ = new ::game::MailCharacter(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&sendtime_, &from.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:game.NotifMailPacket)
}

void NotifMailPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotifMailPacket_msg_5fgame_5fmail_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(index_));
}

NotifMailPacket::~NotifMailPacket() {
  // @@protoc_insertion_point(destructor:game.NotifMailPacket)
  SharedDtor();
}

void NotifMailPacket::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void NotifMailPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifMailPacket& NotifMailPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotifMailPacket_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void NotifMailPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:game.NotifMailPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&sendtime_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

const char* NotifMailPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.MailCharacter sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.NotifMailPacket.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sendtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotifMailPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.NotifMailPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .game.MailCharacter sender = 2;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sender(this), target, stream);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.NotifMailPacket.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // uint64 sendtime = 4;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.NotifMailPacket)
  return target;
}

size_t NotifMailPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.NotifMailPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .game.MailCharacter sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // uint64 sendtime = 4;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifMailPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.NotifMailPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifMailPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotifMailPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.NotifMailPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.NotifMailPacket)
    MergeFrom(*source);
  }
}

void NotifMailPacket::MergeFrom(const NotifMailPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.NotifMailPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::game::MailCharacter::MergeFrom(from._internal_sender());
  }
  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void NotifMailPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.NotifMailPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifMailPacket::CopyFrom(const NotifMailPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.NotifMailPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifMailPacket::IsInitialized() const {
  return true;
}

void NotifMailPacket::InternalSwap(NotifMailPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_, other->sender_);
  swap(sendtime_, other->sendtime_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifMailPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMailListRequest::InitAsDefaultInstance() {
}
class GetMailListRequest::_Internal {
 public:
};

GetMailListRequest::GetMailListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.GetMailListRequest)
}
GetMailListRequest::GetMailListRequest(const GetMailListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:game.GetMailListRequest)
}

void GetMailListRequest::SharedCtor() {
  page_ = 0u;
}

GetMailListRequest::~GetMailListRequest() {
  // @@protoc_insertion_point(destructor:game.GetMailListRequest)
  SharedDtor();
}

void GetMailListRequest::SharedDtor() {
}

void GetMailListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMailListRequest& GetMailListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMailListRequest_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void GetMailListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GetMailListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetMailListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMailListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GetMailListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.GetMailListRequest)
  return target;
}

size_t GetMailListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GetMailListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMailListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.GetMailListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMailListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMailListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.GetMailListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.GetMailListRequest)
    MergeFrom(*source);
  }
}

void GetMailListRequest::MergeFrom(const GetMailListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.GetMailListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
}

void GetMailListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.GetMailListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMailListRequest::CopyFrom(const GetMailListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GetMailListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMailListRequest::IsInitialized() const {
  return true;
}

void GetMailListRequest::InternalSwap(GetMailListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMailListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMailListResponse::InitAsDefaultInstance() {
}
class GetMailListResponse::_Internal {
 public:
};

GetMailListResponse::GetMailListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.GetMailListResponse)
}
GetMailListResponse::GetMailListResponse(const GetMailListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mails_(from.mails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:game.GetMailListResponse)
}

void GetMailListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMailListResponse_msg_5fgame_5fmail_2eproto.base);
  page_ = 0u;
}

GetMailListResponse::~GetMailListResponse() {
  // @@protoc_insertion_point(destructor:game.GetMailListResponse)
  SharedDtor();
}

void GetMailListResponse::SharedDtor() {
}

void GetMailListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMailListResponse& GetMailListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMailListResponse_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void GetMailListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GetMailListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mails_.Clear();
  page_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetMailListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .game.MailBriefPacket mails = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMailListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GetMailListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // repeated .game.MailBriefPacket mails = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.GetMailListResponse)
  return target;
}

size_t GetMailListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GetMailListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.MailBriefPacket mails = 2;
  total_size += 1UL * this->_internal_mails_size();
  for (const auto& msg : this->mails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMailListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.GetMailListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMailListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMailListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.GetMailListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.GetMailListResponse)
    MergeFrom(*source);
  }
}

void GetMailListResponse::MergeFrom(const GetMailListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.GetMailListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mails_.MergeFrom(from.mails_);
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
}

void GetMailListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.GetMailListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMailListResponse::CopyFrom(const GetMailListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GetMailListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMailListResponse::IsInitialized() const {
  return true;
}

void GetMailListResponse::InternalSwap(GetMailListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mails_.InternalSwap(&other->mails_);
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMailListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMailDetailRequest::InitAsDefaultInstance() {
}
class GetMailDetailRequest::_Internal {
 public:
};

GetMailDetailRequest::GetMailDetailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.GetMailDetailRequest)
}
GetMailDetailRequest::GetMailDetailRequest(const GetMailDetailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:game.GetMailDetailRequest)
}

void GetMailDetailRequest::SharedCtor() {
  index_ = 0u;
}

GetMailDetailRequest::~GetMailDetailRequest() {
  // @@protoc_insertion_point(destructor:game.GetMailDetailRequest)
  SharedDtor();
}

void GetMailDetailRequest::SharedDtor() {
}

void GetMailDetailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMailDetailRequest& GetMailDetailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMailDetailRequest_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void GetMailDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GetMailDetailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetMailDetailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMailDetailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GetMailDetailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.GetMailDetailRequest)
  return target;
}

size_t GetMailDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GetMailDetailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMailDetailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.GetMailDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMailDetailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMailDetailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.GetMailDetailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.GetMailDetailRequest)
    MergeFrom(*source);
  }
}

void GetMailDetailRequest::MergeFrom(const GetMailDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.GetMailDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void GetMailDetailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.GetMailDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMailDetailRequest::CopyFrom(const GetMailDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GetMailDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMailDetailRequest::IsInitialized() const {
  return true;
}

void GetMailDetailRequest::InternalSwap(GetMailDetailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMailDetailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMailDetailResponse::InitAsDefaultInstance() {
}
class GetMailDetailResponse::_Internal {
 public:
};

GetMailDetailResponse::GetMailDetailResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.GetMailDetailResponse)
}
GetMailDetailResponse::GetMailDetailResponse(const GetMailDetailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  attachment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attachment().empty()) {
    attachment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&taken_) -
    reinterpret_cast<char*>(&index_)) + sizeof(taken_));
  // @@protoc_insertion_point(copy_constructor:game.GetMailDetailResponse)
}

void GetMailDetailResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMailDetailResponse_msg_5fgame_5fmail_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taken_) -
      reinterpret_cast<char*>(&index_)) + sizeof(taken_));
}

GetMailDetailResponse::~GetMailDetailResponse() {
  // @@protoc_insertion_point(destructor:game.GetMailDetailResponse)
  SharedDtor();
}

void GetMailDetailResponse::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMailDetailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMailDetailResponse& GetMailDetailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMailDetailResponse_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void GetMailDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GetMailDetailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taken_) -
      reinterpret_cast<char*>(&index_)) + sizeof(taken_));
  _internal_metadata_.Clear();
}

const char* GetMailDetailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mailtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mailtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contenttype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          contenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attachmenttype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          attachmenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attachment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_attachment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 taken = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMailDetailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GetMailDetailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 mailtype = 2;
  if (this->mailtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mailtype(), target);
  }

  // int32 contenttype = 3;
  if (this->contenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_contenttype(), target);
  }

  // bytes content = 4;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_content(), target);
  }

  // int32 attachmenttype = 5;
  if (this->attachmenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_attachmenttype(), target);
  }

  // bytes attachment = 6;
  if (this->attachment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_attachment(), target);
  }

  // int32 taken = 7;
  if (this->taken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_taken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.GetMailDetailResponse)
  return target;
}

size_t GetMailDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GetMailDetailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // bytes attachment = 6;
  if (this->attachment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attachment());
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // int32 mailtype = 2;
  if (this->mailtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mailtype());
  }

  // int32 contenttype = 3;
  if (this->contenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contenttype());
  }

  // int32 attachmenttype = 5;
  if (this->attachmenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attachmenttype());
  }

  // int32 taken = 7;
  if (this->taken() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMailDetailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.GetMailDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMailDetailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMailDetailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.GetMailDetailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.GetMailDetailResponse)
    MergeFrom(*source);
  }
}

void GetMailDetailResponse::MergeFrom(const GetMailDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.GetMailDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.attachment().size() > 0) {

    attachment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.mailtype() != 0) {
    _internal_set_mailtype(from._internal_mailtype());
  }
  if (from.contenttype() != 0) {
    _internal_set_contenttype(from._internal_contenttype());
  }
  if (from.attachmenttype() != 0) {
    _internal_set_attachmenttype(from._internal_attachmenttype());
  }
  if (from.taken() != 0) {
    _internal_set_taken(from._internal_taken());
  }
}

void GetMailDetailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.GetMailDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMailDetailResponse::CopyFrom(const GetMailDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GetMailDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMailDetailResponse::IsInitialized() const {
  return true;
}

void GetMailDetailResponse::InternalSwap(GetMailDetailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attachment_.Swap(&other->attachment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(mailtype_, other->mailtype_);
  swap(contenttype_, other->contenttype_);
  swap(attachmenttype_, other->attachmenttype_);
  swap(taken_, other->taken_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMailDetailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMailAttachmentRequest::InitAsDefaultInstance() {
}
class GetMailAttachmentRequest::_Internal {
 public:
};

GetMailAttachmentRequest::GetMailAttachmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.GetMailAttachmentRequest)
}
GetMailAttachmentRequest::GetMailAttachmentRequest(const GetMailAttachmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:game.GetMailAttachmentRequest)
}

void GetMailAttachmentRequest::SharedCtor() {
  index_ = 0u;
}

GetMailAttachmentRequest::~GetMailAttachmentRequest() {
  // @@protoc_insertion_point(destructor:game.GetMailAttachmentRequest)
  SharedDtor();
}

void GetMailAttachmentRequest::SharedDtor() {
}

void GetMailAttachmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMailAttachmentRequest& GetMailAttachmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMailAttachmentRequest_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void GetMailAttachmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GetMailAttachmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0u;
  _internal_metadata_.Clear();
}

const char* GetMailAttachmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMailAttachmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GetMailAttachmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.GetMailAttachmentRequest)
  return target;
}

size_t GetMailAttachmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GetMailAttachmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMailAttachmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.GetMailAttachmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMailAttachmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMailAttachmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.GetMailAttachmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.GetMailAttachmentRequest)
    MergeFrom(*source);
  }
}

void GetMailAttachmentRequest::MergeFrom(const GetMailAttachmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.GetMailAttachmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void GetMailAttachmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.GetMailAttachmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMailAttachmentRequest::CopyFrom(const GetMailAttachmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GetMailAttachmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMailAttachmentRequest::IsInitialized() const {
  return true;
}

void GetMailAttachmentRequest::InternalSwap(GetMailAttachmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMailAttachmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMailAttachmentResponse::InitAsDefaultInstance() {
}
class GetMailAttachmentResponse::_Internal {
 public:
};

GetMailAttachmentResponse::GetMailAttachmentResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.GetMailAttachmentResponse)
}
GetMailAttachmentResponse::GetMailAttachmentResponse(const GetMailAttachmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&attachmenttype_) -
    reinterpret_cast<char*>(&index_)) + sizeof(attachmenttype_));
  // @@protoc_insertion_point(copy_constructor:game.GetMailAttachmentResponse)
}

void GetMailAttachmentResponse::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attachmenttype_) -
      reinterpret_cast<char*>(&index_)) + sizeof(attachmenttype_));
}

GetMailAttachmentResponse::~GetMailAttachmentResponse() {
  // @@protoc_insertion_point(destructor:game.GetMailAttachmentResponse)
  SharedDtor();
}

void GetMailAttachmentResponse::SharedDtor() {
}

void GetMailAttachmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMailAttachmentResponse& GetMailAttachmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMailAttachmentResponse_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void GetMailAttachmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GetMailAttachmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attachmenttype_) -
      reinterpret_cast<char*>(&index_)) + sizeof(attachmenttype_));
  _internal_metadata_.Clear();
}

const char* GetMailAttachmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attachmenttype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          attachmenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMailAttachmentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GetMailAttachmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 attachmenttype = 2;
  if (this->attachmenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attachmenttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.GetMailAttachmentResponse)
  return target;
}

size_t GetMailAttachmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GetMailAttachmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // int32 attachmenttype = 2;
  if (this->attachmenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attachmenttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMailAttachmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.GetMailAttachmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMailAttachmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMailAttachmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.GetMailAttachmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.GetMailAttachmentResponse)
    MergeFrom(*source);
  }
}

void GetMailAttachmentResponse::MergeFrom(const GetMailAttachmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.GetMailAttachmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.attachmenttype() != 0) {
    _internal_set_attachmenttype(from._internal_attachmenttype());
  }
}

void GetMailAttachmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.GetMailAttachmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMailAttachmentResponse::CopyFrom(const GetMailAttachmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GetMailAttachmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMailAttachmentResponse::IsInitialized() const {
  return true;
}

void GetMailAttachmentResponse::InternalSwap(GetMailAttachmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(index_, other->index_);
  swap(attachmenttype_, other->attachmenttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMailAttachmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelMailRequest::InitAsDefaultInstance() {
}
class DelMailRequest::_Internal {
 public:
};

DelMailRequest::DelMailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.DelMailRequest)
}
DelMailRequest::DelMailRequest(const DelMailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:game.DelMailRequest)
}

void DelMailRequest::SharedCtor() {
  index_ = 0u;
}

DelMailRequest::~DelMailRequest() {
  // @@protoc_insertion_point(destructor:game.DelMailRequest)
  SharedDtor();
}

void DelMailRequest::SharedDtor() {
}

void DelMailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelMailRequest& DelMailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelMailRequest_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void DelMailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.DelMailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0u;
  _internal_metadata_.Clear();
}

const char* DelMailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelMailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.DelMailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.DelMailRequest)
  return target;
}

size_t DelMailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.DelMailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelMailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.DelMailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DelMailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelMailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.DelMailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.DelMailRequest)
    MergeFrom(*source);
  }
}

void DelMailRequest::MergeFrom(const DelMailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.DelMailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void DelMailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.DelMailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelMailRequest::CopyFrom(const DelMailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.DelMailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelMailRequest::IsInitialized() const {
  return true;
}

void DelMailRequest::InternalSwap(DelMailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelMailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelMailResponse::InitAsDefaultInstance() {
}
class DelMailResponse::_Internal {
 public:
};

DelMailResponse::DelMailResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.DelMailResponse)
}
DelMailResponse::DelMailResponse(const DelMailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:game.DelMailResponse)
}

void DelMailResponse::SharedCtor() {
  index_ = 0u;
}

DelMailResponse::~DelMailResponse() {
  // @@protoc_insertion_point(destructor:game.DelMailResponse)
  SharedDtor();
}

void DelMailResponse::SharedDtor() {
}

void DelMailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelMailResponse& DelMailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelMailResponse_msg_5fgame_5fmail_2eproto.base);
  return *internal_default_instance();
}


void DelMailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.DelMailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0u;
  _internal_metadata_.Clear();
}

const char* DelMailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelMailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.DelMailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.DelMailResponse)
  return target;
}

size_t DelMailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.DelMailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelMailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.DelMailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DelMailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelMailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.DelMailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.DelMailResponse)
    MergeFrom(*source);
  }
}

void DelMailResponse::MergeFrom(const DelMailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.DelMailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void DelMailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.DelMailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelMailResponse::CopyFrom(const DelMailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.DelMailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelMailResponse::IsInitialized() const {
  return true;
}

void DelMailResponse::InternalSwap(DelMailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelMailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::MailBriefPacket* Arena::CreateMaybeMessage< ::game::MailBriefPacket >(Arena* arena) {
  return Arena::CreateInternal< ::game::MailBriefPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SendMailRequest* Arena::CreateMaybeMessage< ::game::SendMailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::game::SendMailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::NotifMailPacket* Arena::CreateMaybeMessage< ::game::NotifMailPacket >(Arena* arena) {
  return Arena::CreateInternal< ::game::NotifMailPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::game::GetMailListRequest* Arena::CreateMaybeMessage< ::game::GetMailListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::game::GetMailListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::GetMailListResponse* Arena::CreateMaybeMessage< ::game::GetMailListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::game::GetMailListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::GetMailDetailRequest* Arena::CreateMaybeMessage< ::game::GetMailDetailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::game::GetMailDetailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::GetMailDetailResponse* Arena::CreateMaybeMessage< ::game::GetMailDetailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::game::GetMailDetailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::GetMailAttachmentRequest* Arena::CreateMaybeMessage< ::game::GetMailAttachmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::game::GetMailAttachmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::GetMailAttachmentResponse* Arena::CreateMaybeMessage< ::game::GetMailAttachmentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::game::GetMailAttachmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::DelMailRequest* Arena::CreateMaybeMessage< ::game::DelMailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::game::DelMailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::DelMailResponse* Arena::CreateMaybeMessage< ::game::DelMailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::game::DelMailResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
