// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_login.proto

#include "msg_game_login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_msg_5fgame_5flogin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterBasic_msg_5fgame_5flogin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_5fgame_5flogin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CharacterMap_msg_5fgame_5flogin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorPacket_common_5fpacket_2eproto;
namespace game {
class CharacterBasicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacterBasic> _instance;
} _CharacterBasic_default_instance_;
class CharacterMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacterMap> _instance;
} _CharacterMap_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginResponse> _instance;
} _LoginResponse_default_instance_;
}  // namespace game
static void InitDefaultsscc_info_CharacterBasic_msg_5fgame_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_CharacterBasic_default_instance_;
    new (ptr) ::game::CharacterBasic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::CharacterBasic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterBasic_msg_5fgame_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CharacterBasic_msg_5fgame_5flogin_2eproto}, {}};

static void InitDefaultsscc_info_CharacterMap_msg_5fgame_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_CharacterMap_default_instance_;
    new (ptr) ::game::CharacterMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::CharacterMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CharacterMap_msg_5fgame_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CharacterMap_msg_5fgame_5flogin_2eproto}, {
      &scc_info_VectorPacket_common_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_LoginResponse_msg_5fgame_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_LoginResponse_default_instance_;
    new (ptr) ::game::LoginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::LoginResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoginResponse_msg_5fgame_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoginResponse_msg_5fgame_5flogin_2eproto}, {
      &scc_info_CharacterBasic_msg_5fgame_5flogin_2eproto.base,
      &scc_info_CharacterMap_msg_5fgame_5flogin_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_5fgame_5flogin_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msg_5fgame_5flogin_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_5fgame_5flogin_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_5fgame_5flogin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CharacterBasic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::CharacterBasic, account_),
  PROTOBUF_FIELD_OFFSET(::game::CharacterBasic, cfgid_),
  PROTOBUF_FIELD_OFFSET(::game::CharacterBasic, name_),
  PROTOBUF_FIELD_OFFSET(::game::CharacterBasic, level_),
  PROTOBUF_FIELD_OFFSET(::game::CharacterBasic, exp_),
  PROTOBUF_FIELD_OFFSET(::game::CharacterBasic, gem_),
  PROTOBUF_FIELD_OFFSET(::game::CharacterBasic, coin_),
  PROTOBUF_FIELD_OFFSET(::game::CharacterBasic, curtime_),
  PROTOBUF_FIELD_OFFSET(::game::CharacterBasic, prologueprocess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CharacterMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::CharacterMap, mapid_),
  PROTOBUF_FIELD_OFFSET(::game::CharacterMap, pos_),
  PROTOBUF_FIELD_OFFSET(::game::CharacterMap, face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::LoginResponse, basic_),
  PROTOBUF_FIELD_OFFSET(::game::LoginResponse, map_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::game::CharacterBasic)},
  { 14, -1, sizeof(::game::CharacterMap)},
  { 22, -1, sizeof(::game::LoginResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_CharacterBasic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_CharacterMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_LoginResponse_default_instance_),
};

const char descriptor_table_protodef_msg_5fgame_5flogin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024msg_game_login.proto\022\004game\032\023common_pac"
  "ket.proto\"\237\001\n\016CharacterBasic\022\017\n\007account\030"
  "\001 \001(\004\022\r\n\005cfgid\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\r\n\005le"
  "vel\030\004 \001(\005\022\013\n\003exp\030\005 \001(\005\022\013\n\003gem\030\006 \001(\005\022\014\n\004c"
  "oin\030\007 \001(\005\022\017\n\007curtime\030\010 \001(\004\022\027\n\017prologuepr"
  "ocess\030\t \001(\005\"`\n\014CharacterMap\022\r\n\005mapid\030\001 \001"
  "(\r\022\037\n\003pos\030\002 \001(\0132\022.game.VectorPacket\022 \n\004f"
  "ace\030\003 \001(\0132\022.game.VectorPacket\"U\n\rLoginRe"
  "sponse\022#\n\005basic\030\001 \001(\0132\024.game.CharacterBa"
  "sic\022\037\n\003map\030\002 \001(\0132\022.game.CharacterMapb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_5fgame_5flogin_2eproto_deps[1] = {
  &::descriptor_table_common_5fpacket_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_5fgame_5flogin_2eproto_sccs[3] = {
  &scc_info_CharacterBasic_msg_5fgame_5flogin_2eproto.base,
  &scc_info_CharacterMap_msg_5fgame_5flogin_2eproto.base,
  &scc_info_LoginResponse_msg_5fgame_5flogin_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_5fgame_5flogin_2eproto_once;
static bool descriptor_table_msg_5fgame_5flogin_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fgame_5flogin_2eproto = {
  &descriptor_table_msg_5fgame_5flogin_2eproto_initialized, descriptor_table_protodef_msg_5fgame_5flogin_2eproto, "msg_game_login.proto", 404,
  &descriptor_table_msg_5fgame_5flogin_2eproto_once, descriptor_table_msg_5fgame_5flogin_2eproto_sccs, descriptor_table_msg_5fgame_5flogin_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_msg_5fgame_5flogin_2eproto::offsets,
  file_level_metadata_msg_5fgame_5flogin_2eproto, 3, file_level_enum_descriptors_msg_5fgame_5flogin_2eproto, file_level_service_descriptors_msg_5fgame_5flogin_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_5fgame_5flogin_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_5fgame_5flogin_2eproto), true);
namespace game {

// ===================================================================

void CharacterBasic::InitAsDefaultInstance() {
}
class CharacterBasic::_Internal {
 public:
};

CharacterBasic::CharacterBasic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.CharacterBasic)
}
CharacterBasic::CharacterBasic(const CharacterBasic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&account_, &from.account_,
    static_cast<size_t>(reinterpret_cast<char*>(&prologueprocess_) -
    reinterpret_cast<char*>(&account_)) + sizeof(prologueprocess_));
  // @@protoc_insertion_point(copy_constructor:game.CharacterBasic)
}

void CharacterBasic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CharacterBasic_msg_5fgame_5flogin_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prologueprocess_) -
      reinterpret_cast<char*>(&account_)) + sizeof(prologueprocess_));
}

CharacterBasic::~CharacterBasic() {
  // @@protoc_insertion_point(destructor:game.CharacterBasic)
  SharedDtor();
}

void CharacterBasic::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CharacterBasic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterBasic& CharacterBasic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacterBasic_msg_5fgame_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CharacterBasic::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CharacterBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prologueprocess_) -
      reinterpret_cast<char*>(&account_)) + sizeof(prologueprocess_));
  _internal_metadata_.Clear();
}

const char* CharacterBasic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cfgid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cfgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.CharacterBasic.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gem = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 curtime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          curtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prologueprocess = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          prologueprocess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterBasic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CharacterBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account = 1;
  if (this->account() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account(), target);
  }

  // uint32 cfgid = 2;
  if (this->cfgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cfgid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CharacterBasic.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // int32 exp = 5;
  if (this->exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_exp(), target);
  }

  // int32 gem = 6;
  if (this->gem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_gem(), target);
  }

  // int32 coin = 7;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_coin(), target);
  }

  // uint64 curtime = 8;
  if (this->curtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_curtime(), target);
  }

  // int32 prologueprocess = 9;
  if (this->prologueprocess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_prologueprocess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CharacterBasic)
  return target;
}

size_t CharacterBasic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CharacterBasic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 account = 1;
  if (this->account() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_account());
  }

  // uint32 cfgid = 2;
  if (this->cfgid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cfgid());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 exp = 5;
  if (this->exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exp());
  }

  // int32 gem = 6;
  if (this->gem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gem());
  }

  // uint64 curtime = 8;
  if (this->curtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_curtime());
  }

  // int32 coin = 7;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coin());
  }

  // int32 prologueprocess = 9;
  if (this->prologueprocess() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prologueprocess());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterBasic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.CharacterBasic)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterBasic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacterBasic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.CharacterBasic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.CharacterBasic)
    MergeFrom(*source);
  }
}

void CharacterBasic::MergeFrom(const CharacterBasic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.CharacterBasic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.account() != 0) {
    _internal_set_account(from._internal_account());
  }
  if (from.cfgid() != 0) {
    _internal_set_cfgid(from._internal_cfgid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from.gem() != 0) {
    _internal_set_gem(from._internal_gem());
  }
  if (from.curtime() != 0) {
    _internal_set_curtime(from._internal_curtime());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.prologueprocess() != 0) {
    _internal_set_prologueprocess(from._internal_prologueprocess());
  }
}

void CharacterBasic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.CharacterBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterBasic::CopyFrom(const CharacterBasic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CharacterBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterBasic::IsInitialized() const {
  return true;
}

void CharacterBasic::InternalSwap(CharacterBasic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(cfgid_, other->cfgid_);
  swap(level_, other->level_);
  swap(exp_, other->exp_);
  swap(gem_, other->gem_);
  swap(curtime_, other->curtime_);
  swap(coin_, other->coin_);
  swap(prologueprocess_, other->prologueprocess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterBasic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CharacterMap::InitAsDefaultInstance() {
  ::game::_CharacterMap_default_instance_._instance.get_mutable()->pos_ = const_cast< ::game::VectorPacket*>(
      ::game::VectorPacket::internal_default_instance());
  ::game::_CharacterMap_default_instance_._instance.get_mutable()->face_ = const_cast< ::game::VectorPacket*>(
      ::game::VectorPacket::internal_default_instance());
}
class CharacterMap::_Internal {
 public:
  static const ::game::VectorPacket& pos(const CharacterMap* msg);
  static const ::game::VectorPacket& face(const CharacterMap* msg);
};

const ::game::VectorPacket&
CharacterMap::_Internal::pos(const CharacterMap* msg) {
  return *msg->pos_;
}
const ::game::VectorPacket&
CharacterMap::_Internal::face(const CharacterMap* msg) {
  return *msg->face_;
}
void CharacterMap::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void CharacterMap::clear_face() {
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
}
CharacterMap::CharacterMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.CharacterMap)
}
CharacterMap::CharacterMap(const CharacterMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::game::VectorPacket(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_face()) {
    face_ = new ::game::VectorPacket(*from.face_);
  } else {
    face_ = nullptr;
  }
  mapid_ = from.mapid_;
  // @@protoc_insertion_point(copy_constructor:game.CharacterMap)
}

void CharacterMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CharacterMap_msg_5fgame_5flogin_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapid_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(mapid_));
}

CharacterMap::~CharacterMap() {
  // @@protoc_insertion_point(destructor:game.CharacterMap)
  SharedDtor();
}

void CharacterMap::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete face_;
}

void CharacterMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterMap& CharacterMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacterMap_msg_5fgame_5flogin_2eproto.base);
  return *internal_default_instance();
}


void CharacterMap::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CharacterMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
  mapid_ = 0u;
  _internal_metadata_.Clear();
}

const char* CharacterMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.VectorPacket pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.VectorPacket face = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_face(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CharacterMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // .game.VectorPacket pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // .game.VectorPacket face = 3;
  if (this->has_face()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::face(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CharacterMap)
  return target;
}

size_t CharacterMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CharacterMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.VectorPacket pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .game.VectorPacket face = 3;
  if (this->has_face()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_);
  }

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.CharacterMap)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacterMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.CharacterMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.CharacterMap)
    MergeFrom(*source);
  }
}

void CharacterMap::MergeFrom(const CharacterMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.CharacterMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::game::VectorPacket::MergeFrom(from._internal_pos());
  }
  if (from.has_face()) {
    _internal_mutable_face()->::game::VectorPacket::MergeFrom(from._internal_face());
  }
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
}

void CharacterMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.CharacterMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMap::CopyFrom(const CharacterMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CharacterMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMap::IsInitialized() const {
  return true;
}

void CharacterMap::InternalSwap(CharacterMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(face_, other->face_);
  swap(mapid_, other->mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
  ::game::_LoginResponse_default_instance_._instance.get_mutable()->basic_ = const_cast< ::game::CharacterBasic*>(
      ::game::CharacterBasic::internal_default_instance());
  ::game::_LoginResponse_default_instance_._instance.get_mutable()->map_ = const_cast< ::game::CharacterMap*>(
      ::game::CharacterMap::internal_default_instance());
}
class LoginResponse::_Internal {
 public:
  static const ::game::CharacterBasic& basic(const LoginResponse* msg);
  static const ::game::CharacterMap& map(const LoginResponse* msg);
};

const ::game::CharacterBasic&
LoginResponse::_Internal::basic(const LoginResponse* msg) {
  return *msg->basic_;
}
const ::game::CharacterMap&
LoginResponse::_Internal::map(const LoginResponse* msg) {
  return *msg->map_;
}
LoginResponse::LoginResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basic()) {
    basic_ = new ::game::CharacterBasic(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  if (from._internal_has_map()) {
    map_ = new ::game::CharacterMap(*from.map_);
  } else {
    map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:game.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginResponse_msg_5fgame_5flogin_2eproto.base);
  ::memset(&basic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_) -
      reinterpret_cast<char*>(&basic_)) + sizeof(map_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:game.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (this != internal_default_instance()) delete basic_;
  if (this != internal_default_instance()) delete map_;
}

void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginResponse& LoginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginResponse_msg_5fgame_5flogin_2eproto.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .game.CharacterBasic basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.CharacterMap map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.CharacterBasic basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // .game.CharacterMap map = 2;
  if (this->has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.LoginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.CharacterBasic basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  // .game.CharacterMap map = 2;
  if (this->has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.LoginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basic()) {
    _internal_mutable_basic()->::game::CharacterBasic::MergeFrom(from._internal_basic());
  }
  if (from.has_map()) {
    _internal_mutable_map()->::game::CharacterMap::MergeFrom(from._internal_map());
  }
}

void LoginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basic_, other->basic_);
  swap(map_, other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::CharacterBasic* Arena::CreateMaybeMessage< ::game::CharacterBasic >(Arena* arena) {
  return Arena::CreateInternal< ::game::CharacterBasic >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CharacterMap* Arena::CreateMaybeMessage< ::game::CharacterMap >(Arena* arena) {
  return Arena::CreateInternal< ::game::CharacterMap >(arena);
}
template<> PROTOBUF_NOINLINE ::game::LoginResponse* Arena::CreateMaybeMessage< ::game::LoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::game::LoginResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
