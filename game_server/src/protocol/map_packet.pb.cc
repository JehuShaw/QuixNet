// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_packet.proto

#include "map_packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorPacket_common_5fpacket_2eproto;
namespace game {
class MapCharacterPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapCharacterPacket> _instance;
} _MapCharacterPacket_default_instance_;
}  // namespace game
static void InitDefaultsscc_info_MapCharacterPacket_map_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_MapCharacterPacket_default_instance_;
    new (ptr) ::game::MapCharacterPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::MapCharacterPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapCharacterPacket_map_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapCharacterPacket_map_5fpacket_2eproto}, {
      &scc_info_VectorPacket_common_5fpacket_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_5fpacket_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_map_5fpacket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_5fpacket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_5fpacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::MapCharacterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::MapCharacterPacket, userid_),
  PROTOBUF_FIELD_OFFSET(::game::MapCharacterPacket, cfgid_),
  PROTOBUF_FIELD_OFFSET(::game::MapCharacterPacket, name_),
  PROTOBUF_FIELD_OFFSET(::game::MapCharacterPacket, pos_),
  PROTOBUF_FIELD_OFFSET(::game::MapCharacterPacket, face_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::game::MapCharacterPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_MapCharacterPacket_default_instance_),
};

const char descriptor_table_protodef_map_5fpacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020map_packet.proto\022\004game\032\023common_packet."
  "proto\"\204\001\n\022MapCharacterPacket\022\016\n\006userid\030\001"
  " \001(\004\022\r\n\005cfgid\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\037\n\003pos"
  "\030\004 \001(\0132\022.game.VectorPacket\022 \n\004face\030\005 \001(\013"
  "2\022.game.VectorPacketb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_5fpacket_2eproto_deps[1] = {
  &::descriptor_table_common_5fpacket_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_5fpacket_2eproto_sccs[1] = {
  &scc_info_MapCharacterPacket_map_5fpacket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_5fpacket_2eproto_once;
static bool descriptor_table_map_5fpacket_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5fpacket_2eproto = {
  &descriptor_table_map_5fpacket_2eproto_initialized, descriptor_table_protodef_map_5fpacket_2eproto, "map_packet.proto", 188,
  &descriptor_table_map_5fpacket_2eproto_once, descriptor_table_map_5fpacket_2eproto_sccs, descriptor_table_map_5fpacket_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_map_5fpacket_2eproto::offsets,
  file_level_metadata_map_5fpacket_2eproto, 1, file_level_enum_descriptors_map_5fpacket_2eproto, file_level_service_descriptors_map_5fpacket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_5fpacket_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_5fpacket_2eproto), true);
namespace game {

// ===================================================================

void MapCharacterPacket::InitAsDefaultInstance() {
  ::game::_MapCharacterPacket_default_instance_._instance.get_mutable()->pos_ = const_cast< ::game::VectorPacket*>(
      ::game::VectorPacket::internal_default_instance());
  ::game::_MapCharacterPacket_default_instance_._instance.get_mutable()->face_ = const_cast< ::game::VectorPacket*>(
      ::game::VectorPacket::internal_default_instance());
}
class MapCharacterPacket::_Internal {
 public:
  static const ::game::VectorPacket& pos(const MapCharacterPacket* msg);
  static const ::game::VectorPacket& face(const MapCharacterPacket* msg);
};

const ::game::VectorPacket&
MapCharacterPacket::_Internal::pos(const MapCharacterPacket* msg) {
  return *msg->pos_;
}
const ::game::VectorPacket&
MapCharacterPacket::_Internal::face(const MapCharacterPacket* msg) {
  return *msg->face_;
}
void MapCharacterPacket::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void MapCharacterPacket::clear_face() {
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
}
MapCharacterPacket::MapCharacterPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.MapCharacterPacket)
}
MapCharacterPacket::MapCharacterPacket(const MapCharacterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_pos()) {
    pos_ = new ::game::VectorPacket(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_face()) {
    face_ = new ::game::VectorPacket(*from.face_);
  } else {
    face_ = nullptr;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cfgid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(cfgid_));
  // @@protoc_insertion_point(copy_constructor:game.MapCharacterPacket)
}

void MapCharacterPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapCharacterPacket_map_5fpacket_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cfgid_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(cfgid_));
}

MapCharacterPacket::~MapCharacterPacket() {
  // @@protoc_insertion_point(destructor:game.MapCharacterPacket)
  SharedDtor();
}

void MapCharacterPacket::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete face_;
}

void MapCharacterPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapCharacterPacket& MapCharacterPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapCharacterPacket_map_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void MapCharacterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:game.MapCharacterPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cfgid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(cfgid_));
  _internal_metadata_.Clear();
}

const char* MapCharacterPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cfgid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cfgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.MapCharacterPacket.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.VectorPacket pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.VectorPacket face = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_face(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapCharacterPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.MapCharacterPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // uint32 cfgid = 2;
  if (this->cfgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cfgid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.MapCharacterPacket.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .game.VectorPacket pos = 4;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pos(this), target, stream);
  }

  // .game.VectorPacket face = 5;
  if (this->has_face()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::face(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.MapCharacterPacket)
  return target;
}

size_t MapCharacterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.MapCharacterPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .game.VectorPacket pos = 4;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .game.VectorPacket face = 5;
  if (this->has_face()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_);
  }

  // uint64 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  // uint32 cfgid = 2;
  if (this->cfgid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cfgid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapCharacterPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.MapCharacterPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const MapCharacterPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapCharacterPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.MapCharacterPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.MapCharacterPacket)
    MergeFrom(*source);
  }
}

void MapCharacterPacket::MergeFrom(const MapCharacterPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.MapCharacterPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::game::VectorPacket::MergeFrom(from._internal_pos());
  }
  if (from.has_face()) {
    _internal_mutable_face()->::game::VectorPacket::MergeFrom(from._internal_face());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.cfgid() != 0) {
    _internal_set_cfgid(from._internal_cfgid());
  }
}

void MapCharacterPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.MapCharacterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapCharacterPacket::CopyFrom(const MapCharacterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.MapCharacterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapCharacterPacket::IsInitialized() const {
  return true;
}

void MapCharacterPacket::InternalSwap(MapCharacterPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(face_, other->face_);
  swap(userid_, other->userid_);
  swap(cfgid_, other->cfgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapCharacterPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::MapCharacterPacket* Arena::CreateMaybeMessage< ::game::MapCharacterPacket >(Arena* arena) {
  return Arena::CreateInternal< ::game::MapCharacterPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
