// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_player_addexp.proto

#ifndef PROTOBUF_msg_5fgame_5fplayer_5faddexp_2eproto__INCLUDED
#define PROTOBUF_msg_5fgame_5fplayer_5faddexp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace game {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_5fgame_5fplayer_5faddexp_2eproto();
void protobuf_AssignDesc_msg_5fgame_5fplayer_5faddexp_2eproto();
void protobuf_ShutdownFile_msg_5fgame_5fplayer_5faddexp_2eproto();

class PlayerUpgradeChangePacket;
class PlayerAddexpPacket;

// ===================================================================

class PlayerUpgradeChangePacket : public ::google::protobuf::Message {
 public:
  PlayerUpgradeChangePacket();
  virtual ~PlayerUpgradeChangePacket();

  PlayerUpgradeChangePacket(const PlayerUpgradeChangePacket& from);

  inline PlayerUpgradeChangePacket& operator=(const PlayerUpgradeChangePacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerUpgradeChangePacket& default_instance();

  void Swap(PlayerUpgradeChangePacket* other);

  // implements Message ----------------------------------------------

  PlayerUpgradeChangePacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerUpgradeChangePacket& from);
  void MergeFrom(const PlayerUpgradeChangePacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 phy_power = 2;
  inline bool has_phy_power() const;
  inline void clear_phy_power();
  static const int kPhyPowerFieldNumber = 2;
  inline ::google::protobuf::int32 phy_power() const;
  inline void set_phy_power(::google::protobuf::int32 value);

  // required int32 phy_power_limit = 3;
  inline bool has_phy_power_limit() const;
  inline void clear_phy_power_limit();
  static const int kPhyPowerLimitFieldNumber = 3;
  inline ::google::protobuf::int32 phy_power_limit() const;
  inline void set_phy_power_limit(::google::protobuf::int32 value);

  // required int32 general_lv_limit = 4;
  inline bool has_general_lv_limit() const;
  inline void clear_general_lv_limit();
  static const int kGeneralLvLimitFieldNumber = 4;
  inline ::google::protobuf::int32 general_lv_limit() const;
  inline void set_general_lv_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.PlayerUpgradeChangePacket)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_phy_power();
  inline void clear_has_phy_power();
  inline void set_has_phy_power_limit();
  inline void clear_has_phy_power_limit();
  inline void set_has_general_lv_limit();
  inline void clear_has_general_lv_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 phy_power_;
  ::google::protobuf::int32 phy_power_limit_;
  ::google::protobuf::int32 general_lv_limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msg_5fgame_5fplayer_5faddexp_2eproto();
  friend void protobuf_AssignDesc_msg_5fgame_5fplayer_5faddexp_2eproto();
  friend void protobuf_ShutdownFile_msg_5fgame_5fplayer_5faddexp_2eproto();

  void InitAsDefaultInstance();
  static PlayerUpgradeChangePacket* default_instance_;
};
// -------------------------------------------------------------------

class PlayerAddexpPacket : public ::google::protobuf::Message {
 public:
  PlayerAddexpPacket();
  virtual ~PlayerAddexpPacket();

  PlayerAddexpPacket(const PlayerAddexpPacket& from);

  inline PlayerAddexpPacket& operator=(const PlayerAddexpPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerAddexpPacket& default_instance();

  void Swap(PlayerAddexpPacket* other);

  // implements Message ----------------------------------------------

  PlayerAddexpPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerAddexpPacket& from);
  void MergeFrom(const PlayerAddexpPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional .game.PlayerUpgradeChangePacket upgrade_change = 3;
  inline bool has_upgrade_change() const;
  inline void clear_upgrade_change();
  static const int kUpgradeChangeFieldNumber = 3;
  inline const ::game::PlayerUpgradeChangePacket& upgrade_change() const;
  inline ::game::PlayerUpgradeChangePacket* mutable_upgrade_change();
  inline ::game::PlayerUpgradeChangePacket* release_upgrade_change();
  inline void set_allocated_upgrade_change(::game::PlayerUpgradeChangePacket* upgrade_change);

  // @@protoc_insertion_point(class_scope:game.PlayerAddexpPacket)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_upgrade_change();
  inline void clear_has_upgrade_change();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::game::PlayerUpgradeChangePacket* upgrade_change_;
  ::google::protobuf::int32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msg_5fgame_5fplayer_5faddexp_2eproto();
  friend void protobuf_AssignDesc_msg_5fgame_5fplayer_5faddexp_2eproto();
  friend void protobuf_ShutdownFile_msg_5fgame_5fplayer_5faddexp_2eproto();

  void InitAsDefaultInstance();
  static PlayerAddexpPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerUpgradeChangePacket

// required int32 level = 1;
inline bool PlayerUpgradeChangePacket::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerUpgradeChangePacket::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerUpgradeChangePacket::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerUpgradeChangePacket::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayerUpgradeChangePacket::level() const {
  return level_;
}
inline void PlayerUpgradeChangePacket::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 phy_power = 2;
inline bool PlayerUpgradeChangePacket::has_phy_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerUpgradeChangePacket::set_has_phy_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerUpgradeChangePacket::clear_has_phy_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerUpgradeChangePacket::clear_phy_power() {
  phy_power_ = 0;
  clear_has_phy_power();
}
inline ::google::protobuf::int32 PlayerUpgradeChangePacket::phy_power() const {
  return phy_power_;
}
inline void PlayerUpgradeChangePacket::set_phy_power(::google::protobuf::int32 value) {
  set_has_phy_power();
  phy_power_ = value;
}

// required int32 phy_power_limit = 3;
inline bool PlayerUpgradeChangePacket::has_phy_power_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerUpgradeChangePacket::set_has_phy_power_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerUpgradeChangePacket::clear_has_phy_power_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerUpgradeChangePacket::clear_phy_power_limit() {
  phy_power_limit_ = 0;
  clear_has_phy_power_limit();
}
inline ::google::protobuf::int32 PlayerUpgradeChangePacket::phy_power_limit() const {
  return phy_power_limit_;
}
inline void PlayerUpgradeChangePacket::set_phy_power_limit(::google::protobuf::int32 value) {
  set_has_phy_power_limit();
  phy_power_limit_ = value;
}

// required int32 general_lv_limit = 4;
inline bool PlayerUpgradeChangePacket::has_general_lv_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerUpgradeChangePacket::set_has_general_lv_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerUpgradeChangePacket::clear_has_general_lv_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerUpgradeChangePacket::clear_general_lv_limit() {
  general_lv_limit_ = 0;
  clear_has_general_lv_limit();
}
inline ::google::protobuf::int32 PlayerUpgradeChangePacket::general_lv_limit() const {
  return general_lv_limit_;
}
inline void PlayerUpgradeChangePacket::set_general_lv_limit(::google::protobuf::int32 value) {
  set_has_general_lv_limit();
  general_lv_limit_ = value;
}

// -------------------------------------------------------------------

// PlayerAddexpPacket

// required int32 exp = 2;
inline bool PlayerAddexpPacket::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerAddexpPacket::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerAddexpPacket::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerAddexpPacket::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 PlayerAddexpPacket::exp() const {
  return exp_;
}
inline void PlayerAddexpPacket::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional .game.PlayerUpgradeChangePacket upgrade_change = 3;
inline bool PlayerAddexpPacket::has_upgrade_change() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerAddexpPacket::set_has_upgrade_change() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerAddexpPacket::clear_has_upgrade_change() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerAddexpPacket::clear_upgrade_change() {
  if (upgrade_change_ != NULL) upgrade_change_->::game::PlayerUpgradeChangePacket::Clear();
  clear_has_upgrade_change();
}
inline const ::game::PlayerUpgradeChangePacket& PlayerAddexpPacket::upgrade_change() const {
  return upgrade_change_ != NULL ? *upgrade_change_ : *default_instance_->upgrade_change_;
}
inline ::game::PlayerUpgradeChangePacket* PlayerAddexpPacket::mutable_upgrade_change() {
  set_has_upgrade_change();
  if (upgrade_change_ == NULL) upgrade_change_ = new ::game::PlayerUpgradeChangePacket;
  return upgrade_change_;
}
inline ::game::PlayerUpgradeChangePacket* PlayerAddexpPacket::release_upgrade_change() {
  clear_has_upgrade_change();
  ::game::PlayerUpgradeChangePacket* temp = upgrade_change_;
  upgrade_change_ = NULL;
  return temp;
}
inline void PlayerAddexpPacket::set_allocated_upgrade_change(::game::PlayerUpgradeChangePacket* upgrade_change) {
  delete upgrade_change_;
  upgrade_change_ = upgrade_change;
  if (upgrade_change) {
    set_has_upgrade_change();
  } else {
    clear_has_upgrade_change();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_5fgame_5fplayer_5faddexp_2eproto__INCLUDED
