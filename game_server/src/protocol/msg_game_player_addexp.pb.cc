// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_player_addexp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_game_player_addexp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game {

namespace {

const ::google::protobuf::Descriptor* PlayerUpgradeChangePacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerUpgradeChangePacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAddexpPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAddexpPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fgame_5fplayer_5faddexp_2eproto() {
  protobuf_AddDesc_msg_5fgame_5fplayer_5faddexp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_game_player_addexp.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerUpgradeChangePacket_descriptor_ = file->message_type(0);
  static const int PlayerUpgradeChangePacket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpgradeChangePacket, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpgradeChangePacket, phy_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpgradeChangePacket, phy_power_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpgradeChangePacket, general_lv_limit_),
  };
  PlayerUpgradeChangePacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerUpgradeChangePacket_descriptor_,
      PlayerUpgradeChangePacket::default_instance_,
      PlayerUpgradeChangePacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpgradeChangePacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpgradeChangePacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerUpgradeChangePacket));
  PlayerAddexpPacket_descriptor_ = file->message_type(1);
  static const int PlayerAddexpPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAddexpPacket, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAddexpPacket, upgrade_change_),
  };
  PlayerAddexpPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAddexpPacket_descriptor_,
      PlayerAddexpPacket::default_instance_,
      PlayerAddexpPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAddexpPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAddexpPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAddexpPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fgame_5fplayer_5faddexp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerUpgradeChangePacket_descriptor_, &PlayerUpgradeChangePacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAddexpPacket_descriptor_, &PlayerAddexpPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fgame_5fplayer_5faddexp_2eproto() {
  delete PlayerUpgradeChangePacket::default_instance_;
  delete PlayerUpgradeChangePacket_reflection_;
  delete PlayerAddexpPacket::default_instance_;
  delete PlayerAddexpPacket_reflection_;
}

void protobuf_AddDesc_msg_5fgame_5fplayer_5faddexp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034msg_game_player_addexp.proto\022\004game\"p\n\031"
    "PlayerUpgradeChangePacket\022\r\n\005level\030\001 \002(\005"
    "\022\021\n\tphy_power\030\002 \002(\005\022\027\n\017phy_power_limit\030\003"
    " \002(\005\022\030\n\020general_lv_limit\030\004 \002(\005\"Z\n\022Player"
    "AddexpPacket\022\013\n\003exp\030\002 \002(\005\0227\n\016upgrade_cha"
    "nge\030\003 \001(\0132\037.game.PlayerUpgradeChangePack"
    "et", 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_game_player_addexp.proto", &protobuf_RegisterTypes);
  PlayerUpgradeChangePacket::default_instance_ = new PlayerUpgradeChangePacket();
  PlayerAddexpPacket::default_instance_ = new PlayerAddexpPacket();
  PlayerUpgradeChangePacket::default_instance_->InitAsDefaultInstance();
  PlayerAddexpPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fgame_5fplayer_5faddexp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fgame_5fplayer_5faddexp_2eproto {
  StaticDescriptorInitializer_msg_5fgame_5fplayer_5faddexp_2eproto() {
    protobuf_AddDesc_msg_5fgame_5fplayer_5faddexp_2eproto();
  }
} static_descriptor_initializer_msg_5fgame_5fplayer_5faddexp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerUpgradeChangePacket::kLevelFieldNumber;
const int PlayerUpgradeChangePacket::kPhyPowerFieldNumber;
const int PlayerUpgradeChangePacket::kPhyPowerLimitFieldNumber;
const int PlayerUpgradeChangePacket::kGeneralLvLimitFieldNumber;
#endif  // !_MSC_VER

PlayerUpgradeChangePacket::PlayerUpgradeChangePacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerUpgradeChangePacket::InitAsDefaultInstance() {
}

PlayerUpgradeChangePacket::PlayerUpgradeChangePacket(const PlayerUpgradeChangePacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerUpgradeChangePacket::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  phy_power_ = 0;
  phy_power_limit_ = 0;
  general_lv_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerUpgradeChangePacket::~PlayerUpgradeChangePacket() {
  SharedDtor();
}

void PlayerUpgradeChangePacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerUpgradeChangePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerUpgradeChangePacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerUpgradeChangePacket_descriptor_;
}

const PlayerUpgradeChangePacket& PlayerUpgradeChangePacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_5fplayer_5faddexp_2eproto();
  return *default_instance_;
}

PlayerUpgradeChangePacket* PlayerUpgradeChangePacket::default_instance_ = NULL;

PlayerUpgradeChangePacket* PlayerUpgradeChangePacket::New() const {
  return new PlayerUpgradeChangePacket;
}

void PlayerUpgradeChangePacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    phy_power_ = 0;
    phy_power_limit_ = 0;
    general_lv_limit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerUpgradeChangePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phy_power;
        break;
      }

      // required int32 phy_power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phy_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_power_)));
          set_has_phy_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_phy_power_limit;
        break;
      }

      // required int32 phy_power_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phy_power_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_power_limit_)));
          set_has_phy_power_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_general_lv_limit;
        break;
      }

      // required int32 general_lv_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_general_lv_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &general_lv_limit_)));
          set_has_general_lv_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerUpgradeChangePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 phy_power = 2;
  if (has_phy_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phy_power(), output);
  }

  // required int32 phy_power_limit = 3;
  if (has_phy_power_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->phy_power_limit(), output);
  }

  // required int32 general_lv_limit = 4;
  if (has_general_lv_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->general_lv_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerUpgradeChangePacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 phy_power = 2;
  if (has_phy_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phy_power(), target);
  }

  // required int32 phy_power_limit = 3;
  if (has_phy_power_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->phy_power_limit(), target);
  }

  // required int32 general_lv_limit = 4;
  if (has_general_lv_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->general_lv_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerUpgradeChangePacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 phy_power = 2;
    if (has_phy_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_power());
    }

    // required int32 phy_power_limit = 3;
    if (has_phy_power_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_power_limit());
    }

    // required int32 general_lv_limit = 4;
    if (has_general_lv_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->general_lv_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerUpgradeChangePacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerUpgradeChangePacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerUpgradeChangePacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerUpgradeChangePacket::MergeFrom(const PlayerUpgradeChangePacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_phy_power()) {
      set_phy_power(from.phy_power());
    }
    if (from.has_phy_power_limit()) {
      set_phy_power_limit(from.phy_power_limit());
    }
    if (from.has_general_lv_limit()) {
      set_general_lv_limit(from.general_lv_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerUpgradeChangePacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUpgradeChangePacket::CopyFrom(const PlayerUpgradeChangePacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUpgradeChangePacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PlayerUpgradeChangePacket::Swap(PlayerUpgradeChangePacket* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(phy_power_, other->phy_power_);
    std::swap(phy_power_limit_, other->phy_power_limit_);
    std::swap(general_lv_limit_, other->general_lv_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerUpgradeChangePacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerUpgradeChangePacket_descriptor_;
  metadata.reflection = PlayerUpgradeChangePacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAddexpPacket::kExpFieldNumber;
const int PlayerAddexpPacket::kUpgradeChangeFieldNumber;
#endif  // !_MSC_VER

PlayerAddexpPacket::PlayerAddexpPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAddexpPacket::InitAsDefaultInstance() {
  upgrade_change_ = const_cast< ::game::PlayerUpgradeChangePacket*>(&::game::PlayerUpgradeChangePacket::default_instance());
}

PlayerAddexpPacket::PlayerAddexpPacket(const PlayerAddexpPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAddexpPacket::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  upgrade_change_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAddexpPacket::~PlayerAddexpPacket() {
  SharedDtor();
}

void PlayerAddexpPacket::SharedDtor() {
  if (this != default_instance_) {
    delete upgrade_change_;
  }
}

void PlayerAddexpPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAddexpPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAddexpPacket_descriptor_;
}

const PlayerAddexpPacket& PlayerAddexpPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_5fplayer_5faddexp_2eproto();
  return *default_instance_;
}

PlayerAddexpPacket* PlayerAddexpPacket::default_instance_ = NULL;

PlayerAddexpPacket* PlayerAddexpPacket::New() const {
  return new PlayerAddexpPacket;
}

void PlayerAddexpPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
    if (has_upgrade_change()) {
      if (upgrade_change_ != NULL) upgrade_change_->::game::PlayerUpgradeChangePacket::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerAddexpPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_upgrade_change;
        break;
      }

      // optional .game.PlayerUpgradeChangePacket upgrade_change = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upgrade_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgrade_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerAddexpPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional .game.PlayerUpgradeChangePacket upgrade_change = 3;
  if (has_upgrade_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upgrade_change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAddexpPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional .game.PlayerUpgradeChangePacket upgrade_change = 3;
  if (has_upgrade_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->upgrade_change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAddexpPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional .game.PlayerUpgradeChangePacket upgrade_change = 3;
    if (has_upgrade_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upgrade_change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAddexpPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAddexpPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAddexpPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAddexpPacket::MergeFrom(const PlayerAddexpPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_upgrade_change()) {
      mutable_upgrade_change()->::game::PlayerUpgradeChangePacket::MergeFrom(from.upgrade_change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerAddexpPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAddexpPacket::CopyFrom(const PlayerAddexpPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAddexpPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_upgrade_change()) {
    if (!this->upgrade_change().IsInitialized()) return false;
  }
  return true;
}

void PlayerAddexpPacket::Swap(PlayerAddexpPacket* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(upgrade_change_, other->upgrade_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerAddexpPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAddexpPacket_descriptor_;
  metadata.reflection = PlayerAddexpPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)
