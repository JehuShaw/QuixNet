// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fgame_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fgame_5fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common_packet.pb.h"
#include "map_packet.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fgame_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fgame_5fmap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fgame_5fmap_2eproto;
namespace game {
class EnterWorldRequest;
class EnterWorldRequestDefaultTypeInternal;
extern EnterWorldRequestDefaultTypeInternal _EnterWorldRequest_default_instance_;
class EnterWorldResponse;
class EnterWorldResponseDefaultTypeInternal;
extern EnterWorldResponseDefaultTypeInternal _EnterWorldResponse_default_instance_;
class SwitchMapResponse;
class SwitchMapResponseDefaultTypeInternal;
extern SwitchMapResponseDefaultTypeInternal _SwitchMapResponse_default_instance_;
class SyncPositionDataRequest;
class SyncPositionDataRequestDefaultTypeInternal;
extern SyncPositionDataRequestDefaultTypeInternal _SyncPositionDataRequest_default_instance_;
class SyncPositionDataResponse;
class SyncPositionDataResponseDefaultTypeInternal;
extern SyncPositionDataResponseDefaultTypeInternal _SyncPositionDataResponse_default_instance_;
class WorldListRequest;
class WorldListRequestDefaultTypeInternal;
extern WorldListRequestDefaultTypeInternal _WorldListRequest_default_instance_;
class WorldListResponse;
class WorldListResponseDefaultTypeInternal;
extern WorldListResponseDefaultTypeInternal _WorldListResponse_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::EnterWorldRequest* Arena::CreateMaybeMessage<::game::EnterWorldRequest>(Arena*);
template<> ::game::EnterWorldResponse* Arena::CreateMaybeMessage<::game::EnterWorldResponse>(Arena*);
template<> ::game::SwitchMapResponse* Arena::CreateMaybeMessage<::game::SwitchMapResponse>(Arena*);
template<> ::game::SyncPositionDataRequest* Arena::CreateMaybeMessage<::game::SyncPositionDataRequest>(Arena*);
template<> ::game::SyncPositionDataResponse* Arena::CreateMaybeMessage<::game::SyncPositionDataResponse>(Arena*);
template<> ::game::WorldListRequest* Arena::CreateMaybeMessage<::game::WorldListRequest>(Arena*);
template<> ::game::WorldListResponse* Arena::CreateMaybeMessage<::game::WorldListResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

// ===================================================================

class SyncPositionDataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SyncPositionDataRequest) */ {
 public:
  SyncPositionDataRequest();
  virtual ~SyncPositionDataRequest();

  SyncPositionDataRequest(const SyncPositionDataRequest& from);
  SyncPositionDataRequest(SyncPositionDataRequest&& from) noexcept
    : SyncPositionDataRequest() {
    *this = ::std::move(from);
  }

  inline SyncPositionDataRequest& operator=(const SyncPositionDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPositionDataRequest& operator=(SyncPositionDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPositionDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPositionDataRequest* internal_default_instance() {
    return reinterpret_cast<const SyncPositionDataRequest*>(
               &_SyncPositionDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncPositionDataRequest& a, SyncPositionDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPositionDataRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPositionDataRequest* New() const final {
    return CreateMaybeMessage<SyncPositionDataRequest>(nullptr);
  }

  SyncPositionDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPositionDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPositionDataRequest& from);
  void MergeFrom(const SyncPositionDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPositionDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SyncPositionDataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5fmap_2eproto);
    return ::descriptor_table_msg_5fgame_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrididxsFieldNumber = 3,
    kPosFieldNumber = 1,
    kFaceFieldNumber = 2,
  };
  // repeated int32 grididxs = 3;
  int grididxs_size() const;
  private:
  int _internal_grididxs_size() const;
  public:
  void clear_grididxs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grididxs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_grididxs() const;
  void _internal_add_grididxs(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_grididxs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 grididxs(int index) const;
  void set_grididxs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_grididxs(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      grididxs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_grididxs();

  // .game.VectorPacket pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::game::VectorPacket& pos() const;
  ::game::VectorPacket* release_pos();
  ::game::VectorPacket* mutable_pos();
  void set_allocated_pos(::game::VectorPacket* pos);
  private:
  const ::game::VectorPacket& _internal_pos() const;
  ::game::VectorPacket* _internal_mutable_pos();
  public:

  // .game.VectorPacket face = 2;
  bool has_face() const;
  private:
  bool _internal_has_face() const;
  public:
  void clear_face();
  const ::game::VectorPacket& face() const;
  ::game::VectorPacket* release_face();
  ::game::VectorPacket* mutable_face();
  void set_allocated_face(::game::VectorPacket* face);
  private:
  const ::game::VectorPacket& _internal_face() const;
  ::game::VectorPacket* _internal_mutable_face();
  public:

  // @@protoc_insertion_point(class_scope:game.SyncPositionDataRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > grididxs_;
  mutable std::atomic<int> _grididxs_cached_byte_size_;
  ::game::VectorPacket* pos_;
  ::game::VectorPacket* face_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5fmap_2eproto;
};
// -------------------------------------------------------------------

class SyncPositionDataResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SyncPositionDataResponse) */ {
 public:
  SyncPositionDataResponse();
  virtual ~SyncPositionDataResponse();

  SyncPositionDataResponse(const SyncPositionDataResponse& from);
  SyncPositionDataResponse(SyncPositionDataResponse&& from) noexcept
    : SyncPositionDataResponse() {
    *this = ::std::move(from);
  }

  inline SyncPositionDataResponse& operator=(const SyncPositionDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPositionDataResponse& operator=(SyncPositionDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPositionDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPositionDataResponse* internal_default_instance() {
    return reinterpret_cast<const SyncPositionDataResponse*>(
               &_SyncPositionDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncPositionDataResponse& a, SyncPositionDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPositionDataResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPositionDataResponse* New() const final {
    return CreateMaybeMessage<SyncPositionDataResponse>(nullptr);
  }

  SyncPositionDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPositionDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPositionDataResponse& from);
  void MergeFrom(const SyncPositionDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPositionDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SyncPositionDataResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5fmap_2eproto);
    return ::descriptor_table_msg_5fgame_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 1,
  };
  // repeated .game.MapCharacterPacket characters = 1;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::game::MapCharacterPacket* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::MapCharacterPacket >*
      mutable_characters();
  private:
  const ::game::MapCharacterPacket& _internal_characters(int index) const;
  ::game::MapCharacterPacket* _internal_add_characters();
  public:
  const ::game::MapCharacterPacket& characters(int index) const;
  ::game::MapCharacterPacket* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::MapCharacterPacket >&
      characters() const;

  // @@protoc_insertion_point(class_scope:game.SyncPositionDataResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::MapCharacterPacket > characters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5fmap_2eproto;
};
// -------------------------------------------------------------------

class SwitchMapResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SwitchMapResponse) */ {
 public:
  SwitchMapResponse();
  virtual ~SwitchMapResponse();

  SwitchMapResponse(const SwitchMapResponse& from);
  SwitchMapResponse(SwitchMapResponse&& from) noexcept
    : SwitchMapResponse() {
    *this = ::std::move(from);
  }

  inline SwitchMapResponse& operator=(const SwitchMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchMapResponse& operator=(SwitchMapResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwitchMapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchMapResponse* internal_default_instance() {
    return reinterpret_cast<const SwitchMapResponse*>(
               &_SwitchMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SwitchMapResponse& a, SwitchMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchMapResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwitchMapResponse* New() const final {
    return CreateMaybeMessage<SwitchMapResponse>(nullptr);
  }

  SwitchMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwitchMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwitchMapResponse& from);
  void MergeFrom(const SwitchMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SwitchMapResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5fmap_2eproto);
    return ::descriptor_table_msg_5fgame_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kFaceFieldNumber = 3,
    kMapidFieldNumber = 1,
  };
  // .game.VectorPacket pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::game::VectorPacket& pos() const;
  ::game::VectorPacket* release_pos();
  ::game::VectorPacket* mutable_pos();
  void set_allocated_pos(::game::VectorPacket* pos);
  private:
  const ::game::VectorPacket& _internal_pos() const;
  ::game::VectorPacket* _internal_mutable_pos();
  public:

  // .game.VectorPacket face = 3;
  bool has_face() const;
  private:
  bool _internal_has_face() const;
  public:
  void clear_face();
  const ::game::VectorPacket& face() const;
  ::game::VectorPacket* release_face();
  ::game::VectorPacket* mutable_face();
  void set_allocated_face(::game::VectorPacket* face);
  private:
  const ::game::VectorPacket& _internal_face() const;
  ::game::VectorPacket* _internal_mutable_face();
  public:

  // uint32 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.SwitchMapResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::game::VectorPacket* pos_;
  ::game::VectorPacket* face_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5fmap_2eproto;
};
// -------------------------------------------------------------------

class WorldListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.WorldListRequest) */ {
 public:
  WorldListRequest();
  virtual ~WorldListRequest();

  WorldListRequest(const WorldListRequest& from);
  WorldListRequest(WorldListRequest&& from) noexcept
    : WorldListRequest() {
    *this = ::std::move(from);
  }

  inline WorldListRequest& operator=(const WorldListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldListRequest& operator=(WorldListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldListRequest* internal_default_instance() {
    return reinterpret_cast<const WorldListRequest*>(
               &_WorldListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WorldListRequest& a, WorldListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldListRequest* New() const final {
    return CreateMaybeMessage<WorldListRequest>(nullptr);
  }

  WorldListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldListRequest& from);
  void MergeFrom(const WorldListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.WorldListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5fmap_2eproto);
    return ::descriptor_table_msg_5fgame_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
  };
  // uint32 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.WorldListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5fmap_2eproto;
};
// -------------------------------------------------------------------

class WorldListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.WorldListResponse) */ {
 public:
  WorldListResponse();
  virtual ~WorldListResponse();

  WorldListResponse(const WorldListResponse& from);
  WorldListResponse(WorldListResponse&& from) noexcept
    : WorldListResponse() {
    *this = ::std::move(from);
  }

  inline WorldListResponse& operator=(const WorldListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldListResponse& operator=(WorldListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldListResponse* internal_default_instance() {
    return reinterpret_cast<const WorldListResponse*>(
               &_WorldListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WorldListResponse& a, WorldListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldListResponse* New() const final {
    return CreateMaybeMessage<WorldListResponse>(nullptr);
  }

  WorldListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldListResponse& from);
  void MergeFrom(const WorldListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.WorldListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5fmap_2eproto);
    return ::descriptor_table_msg_5fgame_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
  };
  // uint32 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.WorldListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5fmap_2eproto;
};
// -------------------------------------------------------------------

class EnterWorldRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.EnterWorldRequest) */ {
 public:
  EnterWorldRequest();
  virtual ~EnterWorldRequest();

  EnterWorldRequest(const EnterWorldRequest& from);
  EnterWorldRequest(EnterWorldRequest&& from) noexcept
    : EnterWorldRequest() {
    *this = ::std::move(from);
  }

  inline EnterWorldRequest& operator=(const EnterWorldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterWorldRequest& operator=(EnterWorldRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterWorldRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterWorldRequest* internal_default_instance() {
    return reinterpret_cast<const EnterWorldRequest*>(
               &_EnterWorldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EnterWorldRequest& a, EnterWorldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterWorldRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterWorldRequest* New() const final {
    return CreateMaybeMessage<EnterWorldRequest>(nullptr);
  }

  EnterWorldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterWorldRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterWorldRequest& from);
  void MergeFrom(const EnterWorldRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterWorldRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.EnterWorldRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5fmap_2eproto);
    return ::descriptor_table_msg_5fgame_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldidFieldNumber = 2,
    kMapidFieldNumber = 1,
  };
  // uint64 worldid = 2;
  void clear_worldid();
  ::PROTOBUF_NAMESPACE_ID::uint64 worldid() const;
  void set_worldid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_worldid() const;
  void _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.EnterWorldRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 worldid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5fmap_2eproto;
};
// -------------------------------------------------------------------

class EnterWorldResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.EnterWorldResponse) */ {
 public:
  EnterWorldResponse();
  virtual ~EnterWorldResponse();

  EnterWorldResponse(const EnterWorldResponse& from);
  EnterWorldResponse(EnterWorldResponse&& from) noexcept
    : EnterWorldResponse() {
    *this = ::std::move(from);
  }

  inline EnterWorldResponse& operator=(const EnterWorldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterWorldResponse& operator=(EnterWorldResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterWorldResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterWorldResponse* internal_default_instance() {
    return reinterpret_cast<const EnterWorldResponse*>(
               &_EnterWorldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EnterWorldResponse& a, EnterWorldResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterWorldResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterWorldResponse* New() const final {
    return CreateMaybeMessage<EnterWorldResponse>(nullptr);
  }

  EnterWorldResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterWorldResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterWorldResponse& from);
  void MergeFrom(const EnterWorldResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterWorldResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.EnterWorldResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fgame_5fmap_2eproto);
    return ::descriptor_table_msg_5fgame_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldidFieldNumber = 2,
    kMapidFieldNumber = 1,
  };
  // uint64 worldid = 2;
  void clear_worldid();
  ::PROTOBUF_NAMESPACE_ID::uint64 worldid() const;
  void set_worldid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_worldid() const;
  void _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 mapid = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.EnterWorldResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 worldid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fgame_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPositionDataRequest

// .game.VectorPacket pos = 1;
inline bool SyncPositionDataRequest::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool SyncPositionDataRequest::has_pos() const {
  return _internal_has_pos();
}
inline const ::game::VectorPacket& SyncPositionDataRequest::_internal_pos() const {
  const ::game::VectorPacket* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::VectorPacket*>(
      &::game::_VectorPacket_default_instance_);
}
inline const ::game::VectorPacket& SyncPositionDataRequest::pos() const {
  // @@protoc_insertion_point(field_get:game.SyncPositionDataRequest.pos)
  return _internal_pos();
}
inline ::game::VectorPacket* SyncPositionDataRequest::release_pos() {
  // @@protoc_insertion_point(field_release:game.SyncPositionDataRequest.pos)
  
  ::game::VectorPacket* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::game::VectorPacket* SyncPositionDataRequest::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::VectorPacket>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::game::VectorPacket* SyncPositionDataRequest::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:game.SyncPositionDataRequest.pos)
  return _internal_mutable_pos();
}
inline void SyncPositionDataRequest::set_allocated_pos(::game::VectorPacket* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:game.SyncPositionDataRequest.pos)
}

// .game.VectorPacket face = 2;
inline bool SyncPositionDataRequest::_internal_has_face() const {
  return this != internal_default_instance() && face_ != nullptr;
}
inline bool SyncPositionDataRequest::has_face() const {
  return _internal_has_face();
}
inline const ::game::VectorPacket& SyncPositionDataRequest::_internal_face() const {
  const ::game::VectorPacket* p = face_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::VectorPacket*>(
      &::game::_VectorPacket_default_instance_);
}
inline const ::game::VectorPacket& SyncPositionDataRequest::face() const {
  // @@protoc_insertion_point(field_get:game.SyncPositionDataRequest.face)
  return _internal_face();
}
inline ::game::VectorPacket* SyncPositionDataRequest::release_face() {
  // @@protoc_insertion_point(field_release:game.SyncPositionDataRequest.face)
  
  ::game::VectorPacket* temp = face_;
  face_ = nullptr;
  return temp;
}
inline ::game::VectorPacket* SyncPositionDataRequest::_internal_mutable_face() {
  
  if (face_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::VectorPacket>(GetArenaNoVirtual());
    face_ = p;
  }
  return face_;
}
inline ::game::VectorPacket* SyncPositionDataRequest::mutable_face() {
  // @@protoc_insertion_point(field_mutable:game.SyncPositionDataRequest.face)
  return _internal_mutable_face();
}
inline void SyncPositionDataRequest::set_allocated_face(::game::VectorPacket* face) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(face_);
  }
  if (face) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face, submessage_arena);
    }
    
  } else {
    
  }
  face_ = face;
  // @@protoc_insertion_point(field_set_allocated:game.SyncPositionDataRequest.face)
}

// repeated int32 grididxs = 3;
inline int SyncPositionDataRequest::_internal_grididxs_size() const {
  return grididxs_.size();
}
inline int SyncPositionDataRequest::grididxs_size() const {
  return _internal_grididxs_size();
}
inline void SyncPositionDataRequest::clear_grididxs() {
  grididxs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPositionDataRequest::_internal_grididxs(int index) const {
  return grididxs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPositionDataRequest::grididxs(int index) const {
  // @@protoc_insertion_point(field_get:game.SyncPositionDataRequest.grididxs)
  return _internal_grididxs(index);
}
inline void SyncPositionDataRequest::set_grididxs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  grididxs_.Set(index, value);
  // @@protoc_insertion_point(field_set:game.SyncPositionDataRequest.grididxs)
}
inline void SyncPositionDataRequest::_internal_add_grididxs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  grididxs_.Add(value);
}
inline void SyncPositionDataRequest::add_grididxs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_grididxs(value);
  // @@protoc_insertion_point(field_add:game.SyncPositionDataRequest.grididxs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SyncPositionDataRequest::_internal_grididxs() const {
  return grididxs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SyncPositionDataRequest::grididxs() const {
  // @@protoc_insertion_point(field_list:game.SyncPositionDataRequest.grididxs)
  return _internal_grididxs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SyncPositionDataRequest::_internal_mutable_grididxs() {
  return &grididxs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SyncPositionDataRequest::mutable_grididxs() {
  // @@protoc_insertion_point(field_mutable_list:game.SyncPositionDataRequest.grididxs)
  return _internal_mutable_grididxs();
}

// -------------------------------------------------------------------

// SyncPositionDataResponse

// repeated .game.MapCharacterPacket characters = 1;
inline int SyncPositionDataResponse::_internal_characters_size() const {
  return characters_.size();
}
inline int SyncPositionDataResponse::characters_size() const {
  return _internal_characters_size();
}
inline ::game::MapCharacterPacket* SyncPositionDataResponse::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:game.SyncPositionDataResponse.characters)
  return characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::MapCharacterPacket >*
SyncPositionDataResponse::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:game.SyncPositionDataResponse.characters)
  return &characters_;
}
inline const ::game::MapCharacterPacket& SyncPositionDataResponse::_internal_characters(int index) const {
  return characters_.Get(index);
}
inline const ::game::MapCharacterPacket& SyncPositionDataResponse::characters(int index) const {
  // @@protoc_insertion_point(field_get:game.SyncPositionDataResponse.characters)
  return _internal_characters(index);
}
inline ::game::MapCharacterPacket* SyncPositionDataResponse::_internal_add_characters() {
  return characters_.Add();
}
inline ::game::MapCharacterPacket* SyncPositionDataResponse::add_characters() {
  // @@protoc_insertion_point(field_add:game.SyncPositionDataResponse.characters)
  return _internal_add_characters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::MapCharacterPacket >&
SyncPositionDataResponse::characters() const {
  // @@protoc_insertion_point(field_list:game.SyncPositionDataResponse.characters)
  return characters_;
}

// -------------------------------------------------------------------

// SwitchMapResponse

// uint32 mapid = 1;
inline void SwitchMapResponse::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SwitchMapResponse::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SwitchMapResponse::mapid() const {
  // @@protoc_insertion_point(field_get:game.SwitchMapResponse.mapid)
  return _internal_mapid();
}
inline void SwitchMapResponse::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void SwitchMapResponse::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:game.SwitchMapResponse.mapid)
}

// .game.VectorPacket pos = 2;
inline bool SwitchMapResponse::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool SwitchMapResponse::has_pos() const {
  return _internal_has_pos();
}
inline const ::game::VectorPacket& SwitchMapResponse::_internal_pos() const {
  const ::game::VectorPacket* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::VectorPacket*>(
      &::game::_VectorPacket_default_instance_);
}
inline const ::game::VectorPacket& SwitchMapResponse::pos() const {
  // @@protoc_insertion_point(field_get:game.SwitchMapResponse.pos)
  return _internal_pos();
}
inline ::game::VectorPacket* SwitchMapResponse::release_pos() {
  // @@protoc_insertion_point(field_release:game.SwitchMapResponse.pos)
  
  ::game::VectorPacket* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::game::VectorPacket* SwitchMapResponse::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::VectorPacket>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::game::VectorPacket* SwitchMapResponse::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:game.SwitchMapResponse.pos)
  return _internal_mutable_pos();
}
inline void SwitchMapResponse::set_allocated_pos(::game::VectorPacket* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:game.SwitchMapResponse.pos)
}

// .game.VectorPacket face = 3;
inline bool SwitchMapResponse::_internal_has_face() const {
  return this != internal_default_instance() && face_ != nullptr;
}
inline bool SwitchMapResponse::has_face() const {
  return _internal_has_face();
}
inline const ::game::VectorPacket& SwitchMapResponse::_internal_face() const {
  const ::game::VectorPacket* p = face_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::VectorPacket*>(
      &::game::_VectorPacket_default_instance_);
}
inline const ::game::VectorPacket& SwitchMapResponse::face() const {
  // @@protoc_insertion_point(field_get:game.SwitchMapResponse.face)
  return _internal_face();
}
inline ::game::VectorPacket* SwitchMapResponse::release_face() {
  // @@protoc_insertion_point(field_release:game.SwitchMapResponse.face)
  
  ::game::VectorPacket* temp = face_;
  face_ = nullptr;
  return temp;
}
inline ::game::VectorPacket* SwitchMapResponse::_internal_mutable_face() {
  
  if (face_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::VectorPacket>(GetArenaNoVirtual());
    face_ = p;
  }
  return face_;
}
inline ::game::VectorPacket* SwitchMapResponse::mutable_face() {
  // @@protoc_insertion_point(field_mutable:game.SwitchMapResponse.face)
  return _internal_mutable_face();
}
inline void SwitchMapResponse::set_allocated_face(::game::VectorPacket* face) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(face_);
  }
  if (face) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face, submessage_arena);
    }
    
  } else {
    
  }
  face_ = face;
  // @@protoc_insertion_point(field_set_allocated:game.SwitchMapResponse.face)
}

// -------------------------------------------------------------------

// WorldListRequest

// uint32 mapid = 1;
inline void WorldListRequest::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorldListRequest::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorldListRequest::mapid() const {
  // @@protoc_insertion_point(field_get:game.WorldListRequest.mapid)
  return _internal_mapid();
}
inline void WorldListRequest::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void WorldListRequest::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:game.WorldListRequest.mapid)
}

// -------------------------------------------------------------------

// WorldListResponse

// uint32 mapid = 1;
inline void WorldListResponse::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorldListResponse::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorldListResponse::mapid() const {
  // @@protoc_insertion_point(field_get:game.WorldListResponse.mapid)
  return _internal_mapid();
}
inline void WorldListResponse::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void WorldListResponse::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:game.WorldListResponse.mapid)
}

// -------------------------------------------------------------------

// EnterWorldRequest

// uint32 mapid = 1;
inline void EnterWorldRequest::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterWorldRequest::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterWorldRequest::mapid() const {
  // @@protoc_insertion_point(field_get:game.EnterWorldRequest.mapid)
  return _internal_mapid();
}
inline void EnterWorldRequest::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void EnterWorldRequest::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:game.EnterWorldRequest.mapid)
}

// uint64 worldid = 2;
inline void EnterWorldRequest::clear_worldid() {
  worldid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterWorldRequest::_internal_worldid() const {
  return worldid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterWorldRequest::worldid() const {
  // @@protoc_insertion_point(field_get:game.EnterWorldRequest.worldid)
  return _internal_worldid();
}
inline void EnterWorldRequest::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  worldid_ = value;
}
inline void EnterWorldRequest::set_worldid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:game.EnterWorldRequest.worldid)
}

// -------------------------------------------------------------------

// EnterWorldResponse

// uint32 mapid = 1;
inline void EnterWorldResponse::clear_mapid() {
  mapid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterWorldResponse::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterWorldResponse::mapid() const {
  // @@protoc_insertion_point(field_get:game.EnterWorldResponse.mapid)
  return _internal_mapid();
}
inline void EnterWorldResponse::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapid_ = value;
}
inline void EnterWorldResponse::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:game.EnterWorldResponse.mapid)
}

// uint64 worldid = 2;
inline void EnterWorldResponse::clear_worldid() {
  worldid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterWorldResponse::_internal_worldid() const {
  return worldid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterWorldResponse::worldid() const {
  // @@protoc_insertion_point(field_get:game.EnterWorldResponse.worldid)
  return _internal_worldid();
}
inline void EnterWorldResponse::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  worldid_ = value;
}
inline void EnterWorldResponse::set_worldid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:game.EnterWorldResponse.worldid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fgame_5fmap_2eproto
