// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: broadcast_packet.proto

#include "broadcast_packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_data_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPacket_data_5fpacket_2eproto;
namespace node {
class BroadcastRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastRequest> _instance;
} _BroadcastRequest_default_instance_;
class ForwardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForwardRequest> _instance;
} _ForwardRequest_default_instance_;
}  // namespace node
static void InitDefaultsscc_info_BroadcastRequest_broadcast_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::node::_BroadcastRequest_default_instance_;
    new (ptr) ::node::BroadcastRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::node::BroadcastRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastRequest_broadcast_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastRequest_broadcast_5fpacket_2eproto}, {}};

static void InitDefaultsscc_info_ForwardRequest_broadcast_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::node::_ForwardRequest_default_instance_;
    new (ptr) ::node::ForwardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::node::ForwardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ForwardRequest_broadcast_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ForwardRequest_broadcast_5fpacket_2eproto}, {
      &scc_info_DataPacket_data_5fpacket_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_broadcast_5fpacket_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_broadcast_5fpacket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_broadcast_5fpacket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_broadcast_5fpacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::BroadcastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::node::BroadcastRequest, data_),
  PROTOBUF_FIELD_OFFSET(::node::BroadcastRequest, excludeids_),
  PROTOBUF_FIELD_OFFSET(::node::BroadcastRequest, includeids_),
  PROTOBUF_FIELD_OFFSET(::node::BroadcastRequest, agentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::ForwardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::node::ForwardRequest, data_),
  PROTOBUF_FIELD_OFFSET(::node::ForwardRequest, agentids_),
  PROTOBUF_FIELD_OFFSET(::node::ForwardRequest, mapid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::node::BroadcastRequest)},
  { 9, -1, sizeof(::node::ForwardRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::_BroadcastRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::_ForwardRequest_default_instance_),
};

const char descriptor_table_protodef_broadcast_5fpacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026broadcast_packet.proto\022\004node\032\021data_pac"
  "ket.proto\"Z\n\020BroadcastRequest\022\014\n\004data\030\001 "
  "\001(\014\022\022\n\nexcludeids\030\002 \003(\004\022\022\n\nincludeids\030\003 "
  "\003(\004\022\020\n\010agentids\030\004 \003(\r\"Q\n\016ForwardRequest\022"
  "\036\n\004data\030\001 \001(\0132\020.node.DataPacket\022\020\n\010agent"
  "ids\030\002 \003(\r\022\r\n\005mapid\030\003 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_broadcast_5fpacket_2eproto_deps[1] = {
  &::descriptor_table_data_5fpacket_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_broadcast_5fpacket_2eproto_sccs[2] = {
  &scc_info_BroadcastRequest_broadcast_5fpacket_2eproto.base,
  &scc_info_ForwardRequest_broadcast_5fpacket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_broadcast_5fpacket_2eproto_once;
static bool descriptor_table_broadcast_5fpacket_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_broadcast_5fpacket_2eproto = {
  &descriptor_table_broadcast_5fpacket_2eproto_initialized, descriptor_table_protodef_broadcast_5fpacket_2eproto, "broadcast_packet.proto", 232,
  &descriptor_table_broadcast_5fpacket_2eproto_once, descriptor_table_broadcast_5fpacket_2eproto_sccs, descriptor_table_broadcast_5fpacket_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_broadcast_5fpacket_2eproto::offsets,
  file_level_metadata_broadcast_5fpacket_2eproto, 2, file_level_enum_descriptors_broadcast_5fpacket_2eproto, file_level_service_descriptors_broadcast_5fpacket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_broadcast_5fpacket_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_broadcast_5fpacket_2eproto), true);
namespace node {

// ===================================================================

void BroadcastRequest::InitAsDefaultInstance() {
}
class BroadcastRequest::_Internal {
 public:
};

BroadcastRequest::BroadcastRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:node.BroadcastRequest)
}
BroadcastRequest::BroadcastRequest(const BroadcastRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      excludeids_(from.excludeids_),
      includeids_(from.includeids_),
      agentids_(from.agentids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:node.BroadcastRequest)
}

void BroadcastRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastRequest_broadcast_5fpacket_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BroadcastRequest::~BroadcastRequest() {
  // @@protoc_insertion_point(destructor:node.BroadcastRequest)
  SharedDtor();
}

void BroadcastRequest::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadcastRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastRequest& BroadcastRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastRequest_broadcast_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void BroadcastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.BroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excludeids_.Clear();
  includeids_.Clear();
  agentids_.Clear();
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BroadcastRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 excludeids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_excludeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_excludeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 includeids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_includeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_includeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 agentids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_agentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_agentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.BroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // repeated uint64 excludeids = 2;
  {
    int byte_size = _excludeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_excludeids(), byte_size, target);
    }
  }

  // repeated uint64 includeids = 3;
  {
    int byte_size = _includeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_includeids(), byte_size, target);
    }
  }

  // repeated uint32 agentids = 4;
  {
    int byte_size = _agentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_agentids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.BroadcastRequest)
  return target;
}

size_t BroadcastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.BroadcastRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 excludeids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->excludeids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _excludeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 includeids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->includeids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _includeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 agentids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->agentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _agentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:node.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:node.BroadcastRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:node.BroadcastRequest)
    MergeFrom(*source);
  }
}

void BroadcastRequest::MergeFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  excludeids_.MergeFrom(from.excludeids_);
  includeids_.MergeFrom(from.includeids_);
  agentids_.MergeFrom(from.agentids_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void BroadcastRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:node.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRequest::CopyFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRequest::IsInitialized() const {
  return true;
}

void BroadcastRequest::InternalSwap(BroadcastRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  excludeids_.InternalSwap(&other->excludeids_);
  includeids_.InternalSwap(&other->includeids_);
  agentids_.InternalSwap(&other->agentids_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForwardRequest::InitAsDefaultInstance() {
  ::node::_ForwardRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::node::DataPacket*>(
      ::node::DataPacket::internal_default_instance());
}
class ForwardRequest::_Internal {
 public:
  static const ::node::DataPacket& data(const ForwardRequest* msg);
};

const ::node::DataPacket&
ForwardRequest::_Internal::data(const ForwardRequest* msg) {
  return *msg->data_;
}
void ForwardRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
ForwardRequest::ForwardRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:node.ForwardRequest)
}
ForwardRequest::ForwardRequest(const ForwardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      agentids_(from.agentids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::node::DataPacket(*from.data_);
  } else {
    data_ = nullptr;
  }
  mapid_ = from.mapid_;
  // @@protoc_insertion_point(copy_constructor:node.ForwardRequest)
}

void ForwardRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForwardRequest_broadcast_5fpacket_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapid_) -
      reinterpret_cast<char*>(&data_)) + sizeof(mapid_));
}

ForwardRequest::~ForwardRequest() {
  // @@protoc_insertion_point(destructor:node.ForwardRequest)
  SharedDtor();
}

void ForwardRequest::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void ForwardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForwardRequest& ForwardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForwardRequest_broadcast_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void ForwardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.ForwardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agentids_.Clear();
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  mapid_ = 0u;
  _internal_metadata_.Clear();
}

const char* ForwardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .node.DataPacket data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 agentids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_agentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_agentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mapid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.ForwardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .node.DataPacket data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // repeated uint32 agentids = 2;
  {
    int byte_size = _agentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_agentids(), byte_size, target);
    }
  }

  // uint32 mapid = 3;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mapid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.ForwardRequest)
  return target;
}

size_t ForwardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.ForwardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 agentids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->agentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _agentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .node.DataPacket data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint32 mapid = 3;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForwardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:node.ForwardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForwardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:node.ForwardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:node.ForwardRequest)
    MergeFrom(*source);
  }
}

void ForwardRequest::MergeFrom(const ForwardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.ForwardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agentids_.MergeFrom(from.agentids_);
  if (from.has_data()) {
    _internal_mutable_data()->::node::DataPacket::MergeFrom(from._internal_data());
  }
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
}

void ForwardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:node.ForwardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardRequest::CopyFrom(const ForwardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.ForwardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardRequest::IsInitialized() const {
  return true;
}

void ForwardRequest::InternalSwap(ForwardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  agentids_.InternalSwap(&other->agentids_);
  swap(data_, other->data_);
  swap(mapid_, other->mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::node::BroadcastRequest* Arena::CreateMaybeMessage< ::node::BroadcastRequest >(Arena* arena) {
  return Arena::CreateInternal< ::node::BroadcastRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::ForwardRequest* Arena::CreateMaybeMessage< ::node::ForwardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::node::ForwardRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
