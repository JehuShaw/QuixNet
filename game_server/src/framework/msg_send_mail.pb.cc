// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_send_mail.proto

#include "msg_send_mail.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mail_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MailCharacter_mail_5fpacket_2eproto;
namespace game {
class SendMailPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMailPacket> _instance;
} _SendMailPacket_default_instance_;
}  // namespace game
static void InitDefaultsscc_info_SendMailPacket_msg_5fsend_5fmail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_SendMailPacket_default_instance_;
    new (ptr) ::game::SendMailPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::SendMailPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMailPacket_msg_5fsend_5fmail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendMailPacket_msg_5fsend_5fmail_2eproto}, {
      &scc_info_MailCharacter_mail_5fpacket_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_5fsend_5fmail_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msg_5fsend_5fmail_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_5fsend_5fmail_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_5fsend_5fmail_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, mailtype_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, sender_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, titletype_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, title_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, contenttype_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, content_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, attachmenttype_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, attachment_),
  PROTOBUF_FIELD_OFFSET(::game::SendMailPacket, sendtime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::game::SendMailPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_SendMailPacket_default_instance_),
};

const char descriptor_table_protodef_msg_5fsend_5fmail_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023msg_send_mail.proto\022\004game\032\021mail_packet"
  ".proto\"\315\001\n\016SendMailPacket\022\020\n\010mailtype\030\001 "
  "\001(\005\022#\n\006sender\030\002 \001(\0132\023.game.MailCharacter"
  "\022\021\n\ttitletype\030\003 \001(\005\022\r\n\005title\030\004 \001(\t\022\023\n\013co"
  "ntenttype\030\005 \001(\005\022\017\n\007content\030\006 \001(\014\022\026\n\016atta"
  "chmenttype\030\007 \001(\005\022\022\n\nattachment\030\010 \001(\014\022\020\n\010"
  "sendtime\030\t \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_5fsend_5fmail_2eproto_deps[1] = {
  &::descriptor_table_mail_5fpacket_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_5fsend_5fmail_2eproto_sccs[1] = {
  &scc_info_SendMailPacket_msg_5fsend_5fmail_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_5fsend_5fmail_2eproto_once;
static bool descriptor_table_msg_5fsend_5fmail_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fsend_5fmail_2eproto = {
  &descriptor_table_msg_5fsend_5fmail_2eproto_initialized, descriptor_table_protodef_msg_5fsend_5fmail_2eproto, "msg_send_mail.proto", 262,
  &descriptor_table_msg_5fsend_5fmail_2eproto_once, descriptor_table_msg_5fsend_5fmail_2eproto_sccs, descriptor_table_msg_5fsend_5fmail_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_msg_5fsend_5fmail_2eproto::offsets,
  file_level_metadata_msg_5fsend_5fmail_2eproto, 1, file_level_enum_descriptors_msg_5fsend_5fmail_2eproto, file_level_service_descriptors_msg_5fsend_5fmail_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_5fsend_5fmail_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_5fsend_5fmail_2eproto), true);
namespace game {

// ===================================================================

void SendMailPacket::InitAsDefaultInstance() {
  ::game::_SendMailPacket_default_instance_._instance.get_mutable()->sender_ = const_cast< ::game::MailCharacter*>(
      ::game::MailCharacter::internal_default_instance());
}
class SendMailPacket::_Internal {
 public:
  static const ::game::MailCharacter& sender(const SendMailPacket* msg);
};

const ::game::MailCharacter&
SendMailPacket::_Internal::sender(const SendMailPacket* msg) {
  return *msg->sender_;
}
void SendMailPacket::clear_sender() {
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
SendMailPacket::SendMailPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.SendMailPacket)
}
SendMailPacket::SendMailPacket(const SendMailPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  attachment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attachment().empty()) {
    attachment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  if (from._internal_has_sender()) {
    sender_ = new ::game::MailCharacter(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&mailtype_, &from.mailtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&sendtime_) -
    reinterpret_cast<char*>(&mailtype_)) + sizeof(sendtime_));
  // @@protoc_insertion_point(copy_constructor:game.SendMailPacket)
}

void SendMailPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMailPacket_msg_5fsend_5fmail_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendtime_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(sendtime_));
}

SendMailPacket::~SendMailPacket() {
  // @@protoc_insertion_point(destructor:game.SendMailPacket)
  SharedDtor();
}

void SendMailPacket::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void SendMailPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMailPacket& SendMailPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMailPacket_msg_5fsend_5fmail_2eproto.base);
  return *internal_default_instance();
}


void SendMailPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SendMailPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&mailtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendtime_) -
      reinterpret_cast<char*>(&mailtype_)) + sizeof(sendtime_));
  _internal_metadata_.Clear();
}

const char* SendMailPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mailtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mailtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.MailCharacter sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 titletype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          titletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.SendMailPacket.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contenttype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          contenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attachmenttype = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          attachmenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attachment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_attachment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sendtime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMailPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SendMailPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mailtype = 1;
  if (this->mailtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mailtype(), target);
  }

  // .game.MailCharacter sender = 2;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sender(this), target, stream);
  }

  // int32 titletype = 3;
  if (this->titletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_titletype(), target);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SendMailPacket.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // int32 contenttype = 5;
  if (this->contenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_contenttype(), target);
  }

  // bytes content = 6;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_content(), target);
  }

  // int32 attachmenttype = 7;
  if (this->attachmenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_attachmenttype(), target);
  }

  // bytes attachment = 8;
  if (this->attachment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_attachment(), target);
  }

  // uint64 sendtime = 9;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_sendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SendMailPacket)
  return target;
}

size_t SendMailPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SendMailPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 4;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // bytes content = 6;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // bytes attachment = 8;
  if (this->attachment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attachment());
  }

  // .game.MailCharacter sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int32 mailtype = 1;
  if (this->mailtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mailtype());
  }

  // int32 titletype = 3;
  if (this->titletype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_titletype());
  }

  // int32 contenttype = 5;
  if (this->contenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contenttype());
  }

  // int32 attachmenttype = 7;
  if (this->attachmenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attachmenttype());
  }

  // uint64 sendtime = 9;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMailPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.SendMailPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMailPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMailPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.SendMailPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.SendMailPacket)
    MergeFrom(*source);
  }
}

void SendMailPacket::MergeFrom(const SendMailPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.SendMailPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.attachment().size() > 0) {

    attachment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::game::MailCharacter::MergeFrom(from._internal_sender());
  }
  if (from.mailtype() != 0) {
    _internal_set_mailtype(from._internal_mailtype());
  }
  if (from.titletype() != 0) {
    _internal_set_titletype(from._internal_titletype());
  }
  if (from.contenttype() != 0) {
    _internal_set_contenttype(from._internal_contenttype());
  }
  if (from.attachmenttype() != 0) {
    _internal_set_attachmenttype(from._internal_attachmenttype());
  }
  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
}

void SendMailPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.SendMailPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMailPacket::CopyFrom(const SendMailPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SendMailPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailPacket::IsInitialized() const {
  return true;
}

void SendMailPacket::InternalSwap(SendMailPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attachment_.Swap(&other->attachment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_, other->sender_);
  swap(mailtype_, other->mailtype_);
  swap(titletype_, other->titletype_);
  swap(contenttype_, other->contenttype_);
  swap(attachmenttype_, other->attachmenttype_);
  swap(sendtime_, other->sendtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMailPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::SendMailPacket* Arena::CreateMaybeMessage< ::game::SendMailPacket >(Arena* arena) {
  return Arena::CreateInternal< ::game::SendMailPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
