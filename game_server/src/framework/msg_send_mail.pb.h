// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_send_mail.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fsend_5fmail_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fsend_5fmail_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mail_packet.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fsend_5fmail_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fsend_5fmail_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fsend_5fmail_2eproto;
namespace game {
class SendMailPacket;
class SendMailPacketDefaultTypeInternal;
extern SendMailPacketDefaultTypeInternal _SendMailPacket_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::SendMailPacket* Arena::CreateMaybeMessage<::game::SendMailPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

// ===================================================================

class SendMailPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SendMailPacket) */ {
 public:
  SendMailPacket();
  virtual ~SendMailPacket();

  SendMailPacket(const SendMailPacket& from);
  SendMailPacket(SendMailPacket&& from) noexcept
    : SendMailPacket() {
    *this = ::std::move(from);
  }

  inline SendMailPacket& operator=(const SendMailPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMailPacket& operator=(SendMailPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMailPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMailPacket* internal_default_instance() {
    return reinterpret_cast<const SendMailPacket*>(
               &_SendMailPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendMailPacket& a, SendMailPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMailPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMailPacket* New() const final {
    return CreateMaybeMessage<SendMailPacket>(nullptr);
  }

  SendMailPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMailPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMailPacket& from);
  void MergeFrom(const SendMailPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMailPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SendMailPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fsend_5fmail_2eproto);
    return ::descriptor_table_msg_5fsend_5fmail_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 4,
    kContentFieldNumber = 6,
    kAttachmentFieldNumber = 8,
    kSenderFieldNumber = 2,
    kMailtypeFieldNumber = 1,
    kTitletypeFieldNumber = 3,
    kContenttypeFieldNumber = 5,
    kAttachmenttypeFieldNumber = 7,
    kSendtimeFieldNumber = 9,
  };
  // string title = 4;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // bytes content = 6;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // bytes attachment = 8;
  void clear_attachment();
  const std::string& attachment() const;
  void set_attachment(const std::string& value);
  void set_attachment(std::string&& value);
  void set_attachment(const char* value);
  void set_attachment(const void* value, size_t size);
  std::string* mutable_attachment();
  std::string* release_attachment();
  void set_allocated_attachment(std::string* attachment);
  private:
  const std::string& _internal_attachment() const;
  void _internal_set_attachment(const std::string& value);
  std::string* _internal_mutable_attachment();
  public:

  // .game.MailCharacter sender = 2;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::game::MailCharacter& sender() const;
  ::game::MailCharacter* release_sender();
  ::game::MailCharacter* mutable_sender();
  void set_allocated_sender(::game::MailCharacter* sender);
  private:
  const ::game::MailCharacter& _internal_sender() const;
  ::game::MailCharacter* _internal_mutable_sender();
  public:

  // int32 mailtype = 1;
  void clear_mailtype();
  ::PROTOBUF_NAMESPACE_ID::int32 mailtype() const;
  void set_mailtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mailtype() const;
  void _internal_set_mailtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 titletype = 3;
  void clear_titletype();
  ::PROTOBUF_NAMESPACE_ID::int32 titletype() const;
  void set_titletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_titletype() const;
  void _internal_set_titletype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 contenttype = 5;
  void clear_contenttype();
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype() const;
  void set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contenttype() const;
  void _internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attachmenttype = 7;
  void clear_attachmenttype();
  ::PROTOBUF_NAMESPACE_ID::int32 attachmenttype() const;
  void set_attachmenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attachmenttype() const;
  void _internal_set_attachmenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 sendtime = 9;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:game.SendMailPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachment_;
  ::game::MailCharacter* sender_;
  ::PROTOBUF_NAMESPACE_ID::int32 mailtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 titletype_;
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 attachmenttype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fsend_5fmail_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendMailPacket

// int32 mailtype = 1;
inline void SendMailPacket::clear_mailtype() {
  mailtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::_internal_mailtype() const {
  return mailtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::mailtype() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.mailtype)
  return _internal_mailtype();
}
inline void SendMailPacket::_internal_set_mailtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mailtype_ = value;
}
inline void SendMailPacket::set_mailtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mailtype(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.mailtype)
}

// .game.MailCharacter sender = 2;
inline bool SendMailPacket::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool SendMailPacket::has_sender() const {
  return _internal_has_sender();
}
inline const ::game::MailCharacter& SendMailPacket::_internal_sender() const {
  const ::game::MailCharacter* p = sender_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::MailCharacter*>(
      &::game::_MailCharacter_default_instance_);
}
inline const ::game::MailCharacter& SendMailPacket::sender() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.sender)
  return _internal_sender();
}
inline ::game::MailCharacter* SendMailPacket::release_sender() {
  // @@protoc_insertion_point(field_release:game.SendMailPacket.sender)
  
  ::game::MailCharacter* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::game::MailCharacter* SendMailPacket::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::MailCharacter>(GetArenaNoVirtual());
    sender_ = p;
  }
  return sender_;
}
inline ::game::MailCharacter* SendMailPacket::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:game.SendMailPacket.sender)
  return _internal_mutable_sender();
}
inline void SendMailPacket::set_allocated_sender(::game::MailCharacter* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:game.SendMailPacket.sender)
}

// int32 titletype = 3;
inline void SendMailPacket::clear_titletype() {
  titletype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::_internal_titletype() const {
  return titletype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::titletype() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.titletype)
  return _internal_titletype();
}
inline void SendMailPacket::_internal_set_titletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  titletype_ = value;
}
inline void SendMailPacket::set_titletype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_titletype(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.titletype)
}

// string title = 4;
inline void SendMailPacket::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendMailPacket::title() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.title)
  return _internal_title();
}
inline void SendMailPacket::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.title)
}
inline std::string* SendMailPacket::mutable_title() {
  // @@protoc_insertion_point(field_mutable:game.SendMailPacket.title)
  return _internal_mutable_title();
}
inline const std::string& SendMailPacket::_internal_title() const {
  return title_.GetNoArena();
}
inline void SendMailPacket::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendMailPacket::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.SendMailPacket.title)
}
inline void SendMailPacket::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.SendMailPacket.title)
}
inline void SendMailPacket::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.SendMailPacket.title)
}
inline std::string* SendMailPacket::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendMailPacket::release_title() {
  // @@protoc_insertion_point(field_release:game.SendMailPacket.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailPacket::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:game.SendMailPacket.title)
}

// int32 contenttype = 5;
inline void SendMailPacket::clear_contenttype() {
  contenttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::_internal_contenttype() const {
  return contenttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::contenttype() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.contenttype)
  return _internal_contenttype();
}
inline void SendMailPacket::_internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contenttype_ = value;
}
inline void SendMailPacket::set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.contenttype)
}

// bytes content = 6;
inline void SendMailPacket::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendMailPacket::content() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.content)
  return _internal_content();
}
inline void SendMailPacket::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.content)
}
inline std::string* SendMailPacket::mutable_content() {
  // @@protoc_insertion_point(field_mutable:game.SendMailPacket.content)
  return _internal_mutable_content();
}
inline const std::string& SendMailPacket::_internal_content() const {
  return content_.GetNoArena();
}
inline void SendMailPacket::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendMailPacket::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.SendMailPacket.content)
}
inline void SendMailPacket::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.SendMailPacket.content)
}
inline void SendMailPacket::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.SendMailPacket.content)
}
inline std::string* SendMailPacket::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendMailPacket::release_content() {
  // @@protoc_insertion_point(field_release:game.SendMailPacket.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailPacket::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:game.SendMailPacket.content)
}

// int32 attachmenttype = 7;
inline void SendMailPacket::clear_attachmenttype() {
  attachmenttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::_internal_attachmenttype() const {
  return attachmenttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMailPacket::attachmenttype() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.attachmenttype)
  return _internal_attachmenttype();
}
inline void SendMailPacket::_internal_set_attachmenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attachmenttype_ = value;
}
inline void SendMailPacket::set_attachmenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attachmenttype(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.attachmenttype)
}

// bytes attachment = 8;
inline void SendMailPacket::clear_attachment() {
  attachment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendMailPacket::attachment() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.attachment)
  return _internal_attachment();
}
inline void SendMailPacket::set_attachment(const std::string& value) {
  _internal_set_attachment(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.attachment)
}
inline std::string* SendMailPacket::mutable_attachment() {
  // @@protoc_insertion_point(field_mutable:game.SendMailPacket.attachment)
  return _internal_mutable_attachment();
}
inline const std::string& SendMailPacket::_internal_attachment() const {
  return attachment_.GetNoArena();
}
inline void SendMailPacket::_internal_set_attachment(const std::string& value) {
  
  attachment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendMailPacket::set_attachment(std::string&& value) {
  
  attachment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.SendMailPacket.attachment)
}
inline void SendMailPacket::set_attachment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attachment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.SendMailPacket.attachment)
}
inline void SendMailPacket::set_attachment(const void* value, size_t size) {
  
  attachment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.SendMailPacket.attachment)
}
inline std::string* SendMailPacket::_internal_mutable_attachment() {
  
  return attachment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendMailPacket::release_attachment() {
  // @@protoc_insertion_point(field_release:game.SendMailPacket.attachment)
  
  return attachment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendMailPacket::set_allocated_attachment(std::string* attachment) {
  if (attachment != nullptr) {
    
  } else {
    
  }
  attachment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attachment);
  // @@protoc_insertion_point(field_set_allocated:game.SendMailPacket.attachment)
}

// uint64 sendtime = 9;
inline void SendMailPacket::clear_sendtime() {
  sendtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMailPacket::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMailPacket::sendtime() const {
  // @@protoc_insertion_point(field_get:game.SendMailPacket.sendtime)
  return _internal_sendtime();
}
inline void SendMailPacket::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void SendMailPacket::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:game.SendMailPacket.sendtime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fsend_5fmail_2eproto
