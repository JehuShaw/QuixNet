// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controlcentre.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "controlcentre.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace node {

namespace {

const ::google::protobuf::Descriptor* ControlCentreVoid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlCentreVoid_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepRegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepRegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepRegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepRegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LowLoadNodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LowLoadNodeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LowLoadNodeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LowLoadNodeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLowLoadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLowLoadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLowLoadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLowLoadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheStoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheStoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheKeyResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheKeyResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheStoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheStoreResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_controlcentre_2eproto() {
  protobuf_AddDesc_controlcentre_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "controlcentre.proto");
  GOOGLE_CHECK(file != NULL);
  ControlCentreVoid_descriptor_ = file->message_type(0);
  static const int ControlCentreVoid_offsets_[1] = {
  };
  ControlCentreVoid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlCentreVoid_descriptor_,
      ControlCentreVoid::default_instance_,
      ControlCentreVoid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCentreVoid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCentreVoid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlCentreVoid));
  RegisterRequest_descriptor_ = file->message_type(1);
  static const int RegisterRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, serverregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, projectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, acceptaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, processpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, servantid_),
  };
  RegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRequest_descriptor_,
      RegisterRequest::default_instance_,
      RegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRequest));
  RemoveRequest_descriptor_ = file->message_type(2);
  static const int RemoveRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRequest, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRequest, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRequest, servertype_),
  };
  RemoveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveRequest_descriptor_,
      RemoveRequest::default_instance_,
      RemoveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveRequest));
  OperateResponse_descriptor_ = file->message_type(3);
  static const int OperateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateResponse, result_),
  };
  OperateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateResponse_descriptor_,
      OperateResponse::default_instance_,
      OperateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateResponse));
  KeepRegisterRequest_descriptor_ = file->message_type(4);
  static const int KeepRegisterRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterRequest, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterRequest, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterRequest, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterRequest, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterRequest, serverload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterRequest, serverstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterRequest, serverstate_),
  };
  KeepRegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeepRegisterRequest_descriptor_,
      KeepRegisterRequest::default_instance_,
      KeepRegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeepRegisterRequest));
  KeepRegisterResponse_descriptor_ = file->message_type(5);
  static const int KeepRegisterResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterResponse, reregister_),
  };
  KeepRegisterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeepRegisterResponse_descriptor_,
      KeepRegisterResponse::default_instance_,
      KeepRegisterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepRegisterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeepRegisterResponse));
  UserLoginRequest_descriptor_ = file->message_type(6);
  static const int UserLoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequest, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequest, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequest, userid_),
  };
  UserLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginRequest_descriptor_,
      UserLoginRequest::default_instance_,
      UserLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginRequest));
  UserLogoutRequest_descriptor_ = file->message_type(7);
  static const int UserLogoutRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogoutRequest, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogoutRequest, userid_),
  };
  UserLogoutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLogoutRequest_descriptor_,
      UserLogoutRequest::default_instance_,
      UserLogoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogoutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogoutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLogoutRequest));
  LowLoadNodeRequest_descriptor_ = file->message_type(8);
  static const int LowLoadNodeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowLoadNodeRequest, servername_),
  };
  LowLoadNodeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LowLoadNodeRequest_descriptor_,
      LowLoadNodeRequest::default_instance_,
      LowLoadNodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowLoadNodeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowLoadNodeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LowLoadNodeRequest));
  LowLoadNodeResponse_descriptor_ = file->message_type(9);
  static const int LowLoadNodeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowLoadNodeResponse, acceptaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowLoadNodeResponse, serverregion_),
  };
  LowLoadNodeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LowLoadNodeResponse_descriptor_,
      LowLoadNodeResponse::default_instance_,
      LowLoadNodeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowLoadNodeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowLoadNodeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LowLoadNodeResponse));
  RegionLowLoadRequest_descriptor_ = file->message_type(10);
  static const int RegionLowLoadRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLowLoadRequest, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLowLoadRequest, serverregion_),
  };
  RegionLowLoadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionLowLoadRequest_descriptor_,
      RegionLowLoadRequest::default_instance_,
      RegionLowLoadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLowLoadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLowLoadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionLowLoadRequest));
  RegionLowLoadResponse_descriptor_ = file->message_type(11);
  static const int RegionLowLoadResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLowLoadResponse, acceptaddress_),
  };
  RegionLowLoadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionLowLoadResponse_descriptor_,
      RegionLowLoadResponse::default_instance_,
      RegionLowLoadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLowLoadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLowLoadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionLowLoadResponse));
  NodeListRequest_descriptor_ = file->message_type(12);
  static const int NodeListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListRequest, servername_),
  };
  NodeListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeListRequest_descriptor_,
      NodeListRequest::default_instance_,
      NodeListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeListRequest));
  NodeDetail_descriptor_ = file->message_type(13);
  static const int NodeDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDetail, serverregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDetail, acceptaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDetail, serverload_),
  };
  NodeDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeDetail_descriptor_,
      NodeDetail::default_instance_,
      NodeDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeDetail));
  NodeListResponse_descriptor_ = file->message_type(14);
  static const int NodeListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListResponse, nodes_),
  };
  NodeListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeListResponse_descriptor_,
      NodeListResponse::default_instance_,
      NodeListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeListResponse));
  CreateIdRequest_descriptor_ = file->message_type(15);
  static const int CreateIdRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIdRequest, account_),
  };
  CreateIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateIdRequest_descriptor_,
      CreateIdRequest::default_instance_,
      CreateIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateIdRequest));
  CreateIdResponse_descriptor_ = file->message_type(16);
  static const int CreateIdResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIdResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIdResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIdResponse, serverregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIdResponse, createtime_),
  };
  CreateIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateIdResponse_descriptor_,
      CreateIdResponse::default_instance_,
      CreateIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateIdResponse));
  CheckIdRequest_descriptor_ = file->message_type(17);
  static const int CheckIdRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckIdRequest, account_),
  };
  CheckIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckIdRequest_descriptor_,
      CheckIdRequest::default_instance_,
      CheckIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckIdRequest));
  CheckIdResponse_descriptor_ = file->message_type(18);
  static const int CheckIdResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckIdResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckIdResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckIdResponse, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckIdResponse, serverregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckIdResponse, cas_),
  };
  CheckIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckIdResponse_descriptor_,
      CheckIdResponse::default_instance_,
      CheckIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckIdResponse));
  UpdateRegionRequest_descriptor_ = file->message_type(19);
  static const int UpdateRegionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRegionRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRegionRequest, serverregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRegionRequest, cas_),
  };
  UpdateRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRegionRequest_descriptor_,
      UpdateRegionRequest::default_instance_,
      UpdateRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRegionRequest));
  UpdateRegionResponse_descriptor_ = file->message_type(20);
  static const int UpdateRegionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRegionResponse, result_),
  };
  UpdateRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRegionResponse_descriptor_,
      UpdateRegionResponse::default_instance_,
      UpdateRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRegionResponse));
  CacheStoreRequest_descriptor_ = file->message_type(21);
  static const int CacheStoreRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheStoreRequest, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheStoreRequest, routetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheStoreRequest, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheStoreRequest, keys_),
  };
  CacheStoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheStoreRequest_descriptor_,
      CacheStoreRequest::default_instance_,
      CacheStoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheStoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheStoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheStoreRequest));
  CacheKeyResult_descriptor_ = file->message_type(22);
  static const int CacheKeyResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheKeyResult, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheKeyResult, result_),
  };
  CacheKeyResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheKeyResult_descriptor_,
      CacheKeyResult::default_instance_,
      CacheKeyResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheKeyResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheKeyResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheKeyResult));
  CacheStoreResponse_descriptor_ = file->message_type(23);
  static const int CacheStoreResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheStoreResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheStoreResponse, keyresults_),
  };
  CacheStoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheStoreResponse_descriptor_,
      CacheStoreResponse::default_instance_,
      CacheStoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheStoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheStoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheStoreResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_controlcentre_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlCentreVoid_descriptor_, &ControlCentreVoid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRequest_descriptor_, &RegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveRequest_descriptor_, &RemoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateResponse_descriptor_, &OperateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeepRegisterRequest_descriptor_, &KeepRegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeepRegisterResponse_descriptor_, &KeepRegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginRequest_descriptor_, &UserLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLogoutRequest_descriptor_, &UserLogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LowLoadNodeRequest_descriptor_, &LowLoadNodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LowLoadNodeResponse_descriptor_, &LowLoadNodeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionLowLoadRequest_descriptor_, &RegionLowLoadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionLowLoadResponse_descriptor_, &RegionLowLoadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeListRequest_descriptor_, &NodeListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeDetail_descriptor_, &NodeDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeListResponse_descriptor_, &NodeListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateIdRequest_descriptor_, &CreateIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateIdResponse_descriptor_, &CreateIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckIdRequest_descriptor_, &CheckIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckIdResponse_descriptor_, &CheckIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRegionRequest_descriptor_, &UpdateRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRegionResponse_descriptor_, &UpdateRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheStoreRequest_descriptor_, &CacheStoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheKeyResult_descriptor_, &CacheKeyResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheStoreResponse_descriptor_, &CacheStoreResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_controlcentre_2eproto() {
  delete ControlCentreVoid::default_instance_;
  delete ControlCentreVoid_reflection_;
  delete RegisterRequest::default_instance_;
  delete RegisterRequest_reflection_;
  delete RemoveRequest::default_instance_;
  delete RemoveRequest_reflection_;
  delete OperateResponse::default_instance_;
  delete OperateResponse_reflection_;
  delete KeepRegisterRequest::default_instance_;
  delete KeepRegisterRequest_reflection_;
  delete KeepRegisterResponse::default_instance_;
  delete KeepRegisterResponse_reflection_;
  delete UserLoginRequest::default_instance_;
  delete UserLoginRequest_reflection_;
  delete UserLogoutRequest::default_instance_;
  delete UserLogoutRequest_reflection_;
  delete LowLoadNodeRequest::default_instance_;
  delete LowLoadNodeRequest_reflection_;
  delete LowLoadNodeResponse::default_instance_;
  delete LowLoadNodeResponse_reflection_;
  delete RegionLowLoadRequest::default_instance_;
  delete RegionLowLoadRequest_reflection_;
  delete RegionLowLoadResponse::default_instance_;
  delete RegionLowLoadResponse_reflection_;
  delete NodeListRequest::default_instance_;
  delete NodeListRequest_reflection_;
  delete NodeDetail::default_instance_;
  delete NodeDetail_reflection_;
  delete NodeListResponse::default_instance_;
  delete NodeListResponse_reflection_;
  delete CreateIdRequest::default_instance_;
  delete CreateIdRequest_reflection_;
  delete CreateIdResponse::default_instance_;
  delete CreateIdResponse_reflection_;
  delete CheckIdRequest::default_instance_;
  delete CheckIdRequest_reflection_;
  delete CheckIdResponse::default_instance_;
  delete CheckIdResponse_reflection_;
  delete UpdateRegionRequest::default_instance_;
  delete UpdateRegionRequest_reflection_;
  delete UpdateRegionResponse::default_instance_;
  delete UpdateRegionResponse_reflection_;
  delete CacheStoreRequest::default_instance_;
  delete CacheStoreRequest_reflection_;
  delete CacheKeyResult::default_instance_;
  delete CacheKeyResult_reflection_;
  delete CacheStoreResponse::default_instance_;
  delete CacheStoreResponse_reflection_;
}

void protobuf_AddDesc_controlcentre_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023controlcentre.proto\022\004node\"\023\n\021ControlCe"
    "ntreVoid\"\307\001\n\017RegisterRequest\022\022\n\nserverty"
    "pe\030\001 \002(\005\022\020\n\010endpoint\030\002 \002(\t\022\022\n\nservername"
    "\030\003 \002(\014\022\020\n\010serverid\030\004 \002(\r\022\024\n\014serverregion"
    "\030\005 \002(\r\022\023\n\013projectname\030\006 \001(\014\022\025\n\racceptadd"
    "ress\030\007 \001(\t\022\023\n\013processpath\030\010 \001(\014\022\021\n\tserva"
    "ntid\030\t \001(\r\"I\n\rRemoveRequest\022\022\n\nservernam"
    "e\030\001 \002(\014\022\020\n\010serverid\030\002 \002(\r\022\022\n\nservertype\030"
    "\003 \001(\005\"!\n\017OperateResponse\022\016\n\006result\030\001 \002(\005"
    "\"\240\001\n\023KeepRegisterRequest\022\020\n\010serverid\030\001 \002"
    "(\r\022\022\n\nservername\030\002 \001(\014\022\020\n\010endpoint\030\003 \001(\t"
    "\022\022\n\nservertype\030\004 \001(\005\022\022\n\nserverload\030\005 \001(\r"
    "\022\024\n\014serverstatus\030\006 \001(\005\022\023\n\013serverstate\030\007 "
    "\001(\014\"*\n\024KeepRegisterResponse\022\022\n\nreregiste"
    "r\030\001 \002(\010\"H\n\020UserLoginRequest\022\022\n\nservernam"
    "e\030\001 \002(\014\022\020\n\010serverid\030\002 \002(\r\022\016\n\006userid\030\003 \002("
    "\004\"7\n\021UserLogoutRequest\022\022\n\nservername\030\001 \002"
    "(\014\022\016\n\006userid\030\002 \002(\004\"(\n\022LowLoadNodeRequest"
    "\022\022\n\nservername\030\001 \002(\014\"B\n\023LowLoadNodeRespo"
    "nse\022\025\n\racceptaddress\030\001 \002(\t\022\024\n\014serverregi"
    "on\030\002 \002(\r\"@\n\024RegionLowLoadRequest\022\022\n\nserv"
    "ername\030\001 \002(\014\022\024\n\014serverregion\030\002 \002(\r\".\n\025Re"
    "gionLowLoadResponse\022\025\n\racceptaddress\030\001 \002"
    "(\t\"%\n\017NodeListRequest\022\022\n\nservername\030\001 \002("
    "\014\"M\n\nNodeDetail\022\024\n\014serverregion\030\001 \002(\r\022\025\n"
    "\racceptaddress\030\002 \002(\t\022\022\n\nserverload\030\003 \002(\005"
    "\"3\n\020NodeListResponse\022\037\n\005nodes\030\001 \003(\0132\020.no"
    "de.NodeDetail\"\"\n\017CreateIdRequest\022\017\n\007acco"
    "unt\030\001 \002(\004\"\\\n\020CreateIdResponse\022\016\n\006result\030"
    "\001 \002(\005\022\016\n\006userid\030\002 \001(\004\022\024\n\014serverregion\030\003 "
    "\001(\r\022\022\n\ncreatetime\030\004 \001(\t\"!\n\016CheckIdReques"
    "t\022\017\n\007account\030\001 \002(\004\"h\n\017CheckIdResponse\022\016\n"
    "\006result\030\001 \002(\005\022\016\n\006userid\030\002 \001(\004\022\022\n\ncreatet"
    "ime\030\003 \001(\t\022\024\n\014serverregion\030\004 \001(\r\022\013\n\003cas\030\005"
    " \001(\004\"I\n\023UpdateRegionRequest\022\017\n\007account\030\001"
    " \002(\004\022\024\n\014serverregion\030\002 \002(\r\022\013\n\003cas\030\003 \002(\004\""
    "&\n\024UpdateRegionResponse\022\016\n\006result\030\001 \002(\005\""
    "U\n\021CacheStoreRequest\022\020\n\010serverid\030\001 \002(\r\022\021"
    "\n\troutetype\030\002 \002(\005\022\r\n\005route\030\003 \002(\004\022\014\n\004keys"
    "\030\004 \003(\t\"-\n\016CacheKeyResult\022\013\n\003key\030\001 \002(\t\022\016\n"
    "\006result\030\002 \002(\005\"N\n\022CacheStoreResponse\022\016\n\006r"
    "esult\030\001 \002(\005\022(\n\nkeyresults\030\002 \003(\0132\024.node.C"
    "acheKeyResult2\266\006\n\024ControlCentreService\022>"
    "\n\016RegisterModule\022\025.node.RegisterRequest\032"
    "\025.node.OperateResponse\022:\n\014RemoveModule\022\023"
    ".node.RemoveRequest\032\025.node.OperateRespon"
    "se\022E\n\014KeepRegister\022\031.node.KeepRegisterRe"
    "quest\032\032.node.KeepRegisterResponse\022<\n\tUse"
    "rLogin\022\026.node.UserLoginRequest\032\027.node.Co"
    "ntrolCentreVoid\022>\n\nUserLogout\022\027.node.Use"
    "rLogoutRequest\032\027.node.ControlCentreVoid\022"
    "E\n\016GetLowLoadNode\022\030.node.LowLoadNodeRequ"
    "est\032\031.node.LowLoadNodeResponse\022K\n\020GetReg"
    "ionLowLoad\022\032.node.RegionLowLoadRequest\032\033"
    ".node.RegionLowLoadResponse\022<\n\013GetNodeLi"
    "st\022\025.node.NodeListRequest\032\026.node.NodeLis"
    "tResponse\022=\n\014CreateUserId\022\025.node.CreateI"
    "dRequest\032\026.node.CreateIdResponse\022:\n\013Chec"
    "kUserId\022\024.node.CheckIdRequest\032\025.node.Che"
    "ckIdResponse\022I\n\020UpdateUserRegion\022\031.node."
    "UpdateRegionRequest\032\032.node.UpdateRegionR"
    "esponse\022E\n\020CacheServerStore\022\027.node.Cache"
    "StoreRequest\032\030.node.CacheStoreResponse", 2518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "controlcentre.proto", &protobuf_RegisterTypes);
  ControlCentreVoid::default_instance_ = new ControlCentreVoid();
  RegisterRequest::default_instance_ = new RegisterRequest();
  RemoveRequest::default_instance_ = new RemoveRequest();
  OperateResponse::default_instance_ = new OperateResponse();
  KeepRegisterRequest::default_instance_ = new KeepRegisterRequest();
  KeepRegisterResponse::default_instance_ = new KeepRegisterResponse();
  UserLoginRequest::default_instance_ = new UserLoginRequest();
  UserLogoutRequest::default_instance_ = new UserLogoutRequest();
  LowLoadNodeRequest::default_instance_ = new LowLoadNodeRequest();
  LowLoadNodeResponse::default_instance_ = new LowLoadNodeResponse();
  RegionLowLoadRequest::default_instance_ = new RegionLowLoadRequest();
  RegionLowLoadResponse::default_instance_ = new RegionLowLoadResponse();
  NodeListRequest::default_instance_ = new NodeListRequest();
  NodeDetail::default_instance_ = new NodeDetail();
  NodeListResponse::default_instance_ = new NodeListResponse();
  CreateIdRequest::default_instance_ = new CreateIdRequest();
  CreateIdResponse::default_instance_ = new CreateIdResponse();
  CheckIdRequest::default_instance_ = new CheckIdRequest();
  CheckIdResponse::default_instance_ = new CheckIdResponse();
  UpdateRegionRequest::default_instance_ = new UpdateRegionRequest();
  UpdateRegionResponse::default_instance_ = new UpdateRegionResponse();
  CacheStoreRequest::default_instance_ = new CacheStoreRequest();
  CacheKeyResult::default_instance_ = new CacheKeyResult();
  CacheStoreResponse::default_instance_ = new CacheStoreResponse();
  ControlCentreVoid::default_instance_->InitAsDefaultInstance();
  RegisterRequest::default_instance_->InitAsDefaultInstance();
  RemoveRequest::default_instance_->InitAsDefaultInstance();
  OperateResponse::default_instance_->InitAsDefaultInstance();
  KeepRegisterRequest::default_instance_->InitAsDefaultInstance();
  KeepRegisterResponse::default_instance_->InitAsDefaultInstance();
  UserLoginRequest::default_instance_->InitAsDefaultInstance();
  UserLogoutRequest::default_instance_->InitAsDefaultInstance();
  LowLoadNodeRequest::default_instance_->InitAsDefaultInstance();
  LowLoadNodeResponse::default_instance_->InitAsDefaultInstance();
  RegionLowLoadRequest::default_instance_->InitAsDefaultInstance();
  RegionLowLoadResponse::default_instance_->InitAsDefaultInstance();
  NodeListRequest::default_instance_->InitAsDefaultInstance();
  NodeDetail::default_instance_->InitAsDefaultInstance();
  NodeListResponse::default_instance_->InitAsDefaultInstance();
  CreateIdRequest::default_instance_->InitAsDefaultInstance();
  CreateIdResponse::default_instance_->InitAsDefaultInstance();
  CheckIdRequest::default_instance_->InitAsDefaultInstance();
  CheckIdResponse::default_instance_->InitAsDefaultInstance();
  UpdateRegionRequest::default_instance_->InitAsDefaultInstance();
  UpdateRegionResponse::default_instance_->InitAsDefaultInstance();
  CacheStoreRequest::default_instance_->InitAsDefaultInstance();
  CacheKeyResult::default_instance_->InitAsDefaultInstance();
  CacheStoreResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_controlcentre_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_controlcentre_2eproto {
  StaticDescriptorInitializer_controlcentre_2eproto() {
    protobuf_AddDesc_controlcentre_2eproto();
  }
} static_descriptor_initializer_controlcentre_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ControlCentreVoid::ControlCentreVoid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControlCentreVoid::InitAsDefaultInstance() {
}

ControlCentreVoid::ControlCentreVoid(const ControlCentreVoid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControlCentreVoid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlCentreVoid::~ControlCentreVoid() {
  SharedDtor();
}

void ControlCentreVoid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControlCentreVoid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlCentreVoid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlCentreVoid_descriptor_;
}

const ControlCentreVoid& ControlCentreVoid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

ControlCentreVoid* ControlCentreVoid::default_instance_ = NULL;

ControlCentreVoid* ControlCentreVoid::New() const {
  return new ControlCentreVoid;
}

void ControlCentreVoid::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlCentreVoid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ControlCentreVoid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControlCentreVoid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControlCentreVoid::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlCentreVoid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlCentreVoid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlCentreVoid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlCentreVoid::MergeFrom(const ControlCentreVoid& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlCentreVoid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCentreVoid::CopyFrom(const ControlCentreVoid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCentreVoid::IsInitialized() const {

  return true;
}

void ControlCentreVoid::Swap(ControlCentreVoid* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlCentreVoid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlCentreVoid_descriptor_;
  metadata.reflection = ControlCentreVoid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRequest::kServertypeFieldNumber;
const int RegisterRequest::kEndpointFieldNumber;
const int RegisterRequest::kServernameFieldNumber;
const int RegisterRequest::kServeridFieldNumber;
const int RegisterRequest::kServerregionFieldNumber;
const int RegisterRequest::kProjectnameFieldNumber;
const int RegisterRequest::kAcceptaddressFieldNumber;
const int RegisterRequest::kProcesspathFieldNumber;
const int RegisterRequest::kServantidFieldNumber;
#endif  // !_MSC_VER

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterRequest::InitAsDefaultInstance() {
}

RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  servertype_ = 0;
  endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  serverregion_ = 0u;
  projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servantid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRequest::~RegisterRequest() {
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  if (endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete endpoint_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete acceptaddress_;
  }
  if (processpath_ != &::google::protobuf::internal::kEmptyString) {
    delete processpath_;
  }
  if (this != default_instance_) {
  }
}

void RegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRequest_descriptor_;
}

const RegisterRequest& RegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

RegisterRequest* RegisterRequest::default_instance_ = NULL;

RegisterRequest* RegisterRequest::New() const {
  return new RegisterRequest;
}

void RegisterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertype_ = 0;
    if (has_endpoint()) {
      if (endpoint_ != &::google::protobuf::internal::kEmptyString) {
        endpoint_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    serverid_ = 0u;
    serverregion_ = 0u;
    if (has_projectname()) {
      if (projectname_ != &::google::protobuf::internal::kEmptyString) {
        projectname_->clear();
      }
    }
    if (has_acceptaddress()) {
      if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
        acceptaddress_->clear();
      }
    }
    if (has_processpath()) {
      if (processpath_ != &::google::protobuf::internal::kEmptyString) {
        processpath_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    servantid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 servertype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endpoint;
        break;
      }

      // required string endpoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endpoint().data(), this->endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_servername;
        break;
      }

      // required bytes servername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serverregion;
        break;
      }

      // required uint32 serverregion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverregion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverregion_)));
          set_has_serverregion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_projectname;
        break;
      }

      // optional bytes projectname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_projectname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_projectname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_acceptaddress;
        break;
      }

      // optional string acceptaddress = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceptaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acceptaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acceptaddress().data(), this->acceptaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_processpath;
        break;
      }

      // optional bytes processpath = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_processpath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_servantid;
        break;
      }

      // optional uint32 servantid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servantid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servantid_)));
          set_has_servantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 servertype = 1;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servertype(), output);
  }

  // required string endpoint = 2;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->endpoint(), output);
  }

  // required bytes servername = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->servername(), output);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  // required uint32 serverregion = 5;
  if (has_serverregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverregion(), output);
  }

  // optional bytes projectname = 6;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->projectname(), output);
  }

  // optional string acceptaddress = 7;
  if (has_acceptaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptaddress().data(), this->acceptaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->acceptaddress(), output);
  }

  // optional bytes processpath = 8;
  if (has_processpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->processpath(), output);
  }

  // optional uint32 servantid = 9;
  if (has_servantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->servantid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 servertype = 1;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servertype(), target);
  }

  // required string endpoint = 2;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endpoint(), target);
  }

  // required bytes servername = 3;
  if (has_servername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->servername(), target);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  // required uint32 serverregion = 5;
  if (has_serverregion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverregion(), target);
  }

  // optional bytes projectname = 6;
  if (has_projectname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->projectname(), target);
  }

  // optional string acceptaddress = 7;
  if (has_acceptaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptaddress().data(), this->acceptaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->acceptaddress(), target);
  }

  // optional bytes processpath = 8;
  if (has_processpath()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->processpath(), target);
  }

  // optional uint32 servantid = 9;
  if (has_servantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->servantid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 servertype = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // required string endpoint = 2;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endpoint());
    }

    // required bytes servername = 3;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->servername());
    }

    // required uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 serverregion = 5;
    if (has_serverregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverregion());
    }

    // optional bytes projectname = 6;
    if (has_projectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->projectname());
    }

    // optional string acceptaddress = 7;
    if (has_acceptaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acceptaddress());
    }

    // optional bytes processpath = 8;
    if (has_processpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->processpath());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 servantid = 9;
    if (has_servantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servantid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_endpoint()) {
      set_endpoint(from.endpoint());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_serverregion()) {
      set_serverregion(from.serverregion());
    }
    if (from.has_projectname()) {
      set_projectname(from.projectname());
    }
    if (from.has_acceptaddress()) {
      set_acceptaddress(from.acceptaddress());
    }
    if (from.has_processpath()) {
      set_processpath(from.processpath());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_servantid()) {
      set_servantid(from.servantid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    std::swap(endpoint_, other->endpoint_);
    std::swap(servername_, other->servername_);
    std::swap(serverid_, other->serverid_);
    std::swap(serverregion_, other->serverregion_);
    std::swap(projectname_, other->projectname_);
    std::swap(acceptaddress_, other->acceptaddress_);
    std::swap(processpath_, other->processpath_);
    std::swap(servantid_, other->servantid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRequest_descriptor_;
  metadata.reflection = RegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveRequest::kServernameFieldNumber;
const int RemoveRequest::kServeridFieldNumber;
const int RemoveRequest::kServertypeFieldNumber;
#endif  // !_MSC_VER

RemoveRequest::RemoveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveRequest::InitAsDefaultInstance() {
}

RemoveRequest::RemoveRequest(const RemoveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveRequest::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  servertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRequest::~RemoveRequest() {
  SharedDtor();
}

void RemoveRequest::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void RemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveRequest_descriptor_;
}

const RemoveRequest& RemoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

RemoveRequest* RemoveRequest::default_instance_ = NULL;

RemoveRequest* RemoveRequest::New() const {
  return new RemoveRequest;
}

void RemoveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    serverid_ = 0u;
    servertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes servername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_servertype;
        break;
      }

      // optional int32 servertype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->servername(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // optional int32 servertype = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->servertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes servername = 1;
  if (has_servername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->servername(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // optional int32 servertype = 3;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->servertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes servername = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->servername());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional int32 servertype = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveRequest::MergeFrom(const RemoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RemoveRequest::Swap(RemoveRequest* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(serverid_, other->serverid_);
    std::swap(servertype_, other->servertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveRequest_descriptor_;
  metadata.reflection = RemoveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateResponse::kResultFieldNumber;
#endif  // !_MSC_VER

OperateResponse::OperateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateResponse::InitAsDefaultInstance() {
}

OperateResponse::OperateResponse(const OperateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateResponse::~OperateResponse() {
  SharedDtor();
}

void OperateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateResponse_descriptor_;
}

const OperateResponse& OperateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

OperateResponse* OperateResponse::default_instance_ = NULL;

OperateResponse* OperateResponse::New() const {
  return new OperateResponse;
}

void OperateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateResponse::MergeFrom(const OperateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateResponse::CopyFrom(const OperateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OperateResponse::Swap(OperateResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateResponse_descriptor_;
  metadata.reflection = OperateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeepRegisterRequest::kServeridFieldNumber;
const int KeepRegisterRequest::kServernameFieldNumber;
const int KeepRegisterRequest::kEndpointFieldNumber;
const int KeepRegisterRequest::kServertypeFieldNumber;
const int KeepRegisterRequest::kServerloadFieldNumber;
const int KeepRegisterRequest::kServerstatusFieldNumber;
const int KeepRegisterRequest::kServerstateFieldNumber;
#endif  // !_MSC_VER

KeepRegisterRequest::KeepRegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeepRegisterRequest::InitAsDefaultInstance() {
}

KeepRegisterRequest::KeepRegisterRequest(const KeepRegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeepRegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0u;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servertype_ = 0;
  serverload_ = 0u;
  serverstatus_ = 0;
  serverstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepRegisterRequest::~KeepRegisterRequest() {
  SharedDtor();
}

void KeepRegisterRequest::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete endpoint_;
  }
  if (serverstate_ != &::google::protobuf::internal::kEmptyString) {
    delete serverstate_;
  }
  if (this != default_instance_) {
  }
}

void KeepRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepRegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepRegisterRequest_descriptor_;
}

const KeepRegisterRequest& KeepRegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

KeepRegisterRequest* KeepRegisterRequest::default_instance_ = NULL;

KeepRegisterRequest* KeepRegisterRequest::New() const {
  return new KeepRegisterRequest;
}

void KeepRegisterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0u;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_endpoint()) {
      if (endpoint_ != &::google::protobuf::internal::kEmptyString) {
        endpoint_->clear();
      }
    }
    servertype_ = 0;
    serverload_ = 0u;
    serverstatus_ = 0;
    if (has_serverstate()) {
      if (serverstate_ != &::google::protobuf::internal::kEmptyString) {
        serverstate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeepRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_servername;
        break;
      }

      // optional bytes servername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_endpoint;
        break;
      }

      // optional string endpoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endpoint().data(), this->endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_servertype;
        break;
      }

      // optional int32 servertype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serverload;
        break;
      }

      // optional uint32 serverload = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverload_)));
          set_has_serverload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_serverstatus;
        break;
      }

      // optional int32 serverstatus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverstatus_)));
          set_has_serverstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_serverstate;
        break;
      }

      // optional bytes serverstate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serverstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeepRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverid(), output);
  }

  // optional bytes servername = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->servername(), output);
  }

  // optional string endpoint = 3;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->endpoint(), output);
  }

  // optional int32 servertype = 4;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->servertype(), output);
  }

  // optional uint32 serverload = 5;
  if (has_serverload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverload(), output);
  }

  // optional int32 serverstatus = 6;
  if (has_serverstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->serverstatus(), output);
  }

  // optional bytes serverstate = 7;
  if (has_serverstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->serverstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeepRegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverid(), target);
  }

  // optional bytes servername = 2;
  if (has_servername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->servername(), target);
  }

  // optional string endpoint = 3;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->endpoint(), target);
  }

  // optional int32 servertype = 4;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->servertype(), target);
  }

  // optional uint32 serverload = 5;
  if (has_serverload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverload(), target);
  }

  // optional int32 serverstatus = 6;
  if (has_serverstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->serverstatus(), target);
  }

  // optional bytes serverstate = 7;
  if (has_serverstate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->serverstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeepRegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional bytes servername = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->servername());
    }

    // optional string endpoint = 3;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endpoint());
    }

    // optional int32 servertype = 4;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // optional uint32 serverload = 5;
    if (has_serverload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverload());
    }

    // optional int32 serverstatus = 6;
    if (has_serverstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverstatus());
    }

    // optional bytes serverstate = 7;
    if (has_serverstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serverstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepRegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeepRegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeepRegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepRegisterRequest::MergeFrom(const KeepRegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_endpoint()) {
      set_endpoint(from.endpoint());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_serverload()) {
      set_serverload(from.serverload());
    }
    if (from.has_serverstatus()) {
      set_serverstatus(from.serverstatus());
    }
    if (from.has_serverstate()) {
      set_serverstate(from.serverstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeepRegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepRegisterRequest::CopyFrom(const KeepRegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepRegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeepRegisterRequest::Swap(KeepRegisterRequest* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(endpoint_, other->endpoint_);
    std::swap(servertype_, other->servertype_);
    std::swap(serverload_, other->serverload_);
    std::swap(serverstatus_, other->serverstatus_);
    std::swap(serverstate_, other->serverstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeepRegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepRegisterRequest_descriptor_;
  metadata.reflection = KeepRegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeepRegisterResponse::kReregisterFieldNumber;
#endif  // !_MSC_VER

KeepRegisterResponse::KeepRegisterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeepRegisterResponse::InitAsDefaultInstance() {
}

KeepRegisterResponse::KeepRegisterResponse(const KeepRegisterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeepRegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  reregister_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepRegisterResponse::~KeepRegisterResponse() {
  SharedDtor();
}

void KeepRegisterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeepRegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepRegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepRegisterResponse_descriptor_;
}

const KeepRegisterResponse& KeepRegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

KeepRegisterResponse* KeepRegisterResponse::default_instance_ = NULL;

KeepRegisterResponse* KeepRegisterResponse::New() const {
  return new KeepRegisterResponse;
}

void KeepRegisterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reregister_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeepRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool reregister = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reregister_)));
          set_has_reregister();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeepRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool reregister = 1;
  if (has_reregister()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reregister(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeepRegisterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool reregister = 1;
  if (has_reregister()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reregister(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeepRegisterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool reregister = 1;
    if (has_reregister()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepRegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeepRegisterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeepRegisterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepRegisterResponse::MergeFrom(const KeepRegisterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reregister()) {
      set_reregister(from.reregister());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeepRegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepRegisterResponse::CopyFrom(const KeepRegisterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepRegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeepRegisterResponse::Swap(KeepRegisterResponse* other) {
  if (other != this) {
    std::swap(reregister_, other->reregister_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeepRegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepRegisterResponse_descriptor_;
  metadata.reflection = KeepRegisterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginRequest::kServernameFieldNumber;
const int UserLoginRequest::kServeridFieldNumber;
const int UserLoginRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

UserLoginRequest::UserLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginRequest::InitAsDefaultInstance() {
}

UserLoginRequest::UserLoginRequest(const UserLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginRequest::~UserLoginRequest() {
  SharedDtor();
}

void UserLoginRequest::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginRequest_descriptor_;
}

const UserLoginRequest& UserLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

UserLoginRequest* UserLoginRequest::default_instance_ = NULL;

UserLoginRequest* UserLoginRequest::New() const {
  return new UserLoginRequest;
}

void UserLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    serverid_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes servername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required uint64 userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->servername(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required uint64 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes servername = 1;
  if (has_servername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->servername(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required uint64 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes servername = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->servername());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint64 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginRequest::MergeFrom(const UserLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginRequest::CopyFrom(const UserLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserLoginRequest::Swap(UserLoginRequest* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(serverid_, other->serverid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginRequest_descriptor_;
  metadata.reflection = UserLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLogoutRequest::kServernameFieldNumber;
const int UserLogoutRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

UserLogoutRequest::UserLogoutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLogoutRequest::InitAsDefaultInstance() {
}

UserLogoutRequest::UserLogoutRequest(const UserLogoutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogoutRequest::~UserLogoutRequest() {
  SharedDtor();
}

void UserLogoutRequest::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void UserLogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogoutRequest_descriptor_;
}

const UserLogoutRequest& UserLogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

UserLogoutRequest* UserLogoutRequest::default_instance_ = NULL;

UserLogoutRequest* UserLogoutRequest::New() const {
  return new UserLogoutRequest;
}

void UserLogoutRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes servername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->servername(), output);
  }

  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLogoutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes servername = 1;
  if (has_servername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->servername(), target);
  }

  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLogoutRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes servername = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->servername());
    }

    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLogoutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogoutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogoutRequest::MergeFrom(const UserLogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogoutRequest::CopyFrom(const UserLogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogoutRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserLogoutRequest::Swap(UserLogoutRequest* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogoutRequest_descriptor_;
  metadata.reflection = UserLogoutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LowLoadNodeRequest::kServernameFieldNumber;
#endif  // !_MSC_VER

LowLoadNodeRequest::LowLoadNodeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LowLoadNodeRequest::InitAsDefaultInstance() {
}

LowLoadNodeRequest::LowLoadNodeRequest(const LowLoadNodeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LowLoadNodeRequest::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LowLoadNodeRequest::~LowLoadNodeRequest() {
  SharedDtor();
}

void LowLoadNodeRequest::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void LowLoadNodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LowLoadNodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LowLoadNodeRequest_descriptor_;
}

const LowLoadNodeRequest& LowLoadNodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

LowLoadNodeRequest* LowLoadNodeRequest::default_instance_ = NULL;

LowLoadNodeRequest* LowLoadNodeRequest::New() const {
  return new LowLoadNodeRequest;
}

void LowLoadNodeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LowLoadNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes servername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LowLoadNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LowLoadNodeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes servername = 1;
  if (has_servername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LowLoadNodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes servername = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LowLoadNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LowLoadNodeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LowLoadNodeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LowLoadNodeRequest::MergeFrom(const LowLoadNodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LowLoadNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LowLoadNodeRequest::CopyFrom(const LowLoadNodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LowLoadNodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LowLoadNodeRequest::Swap(LowLoadNodeRequest* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LowLoadNodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LowLoadNodeRequest_descriptor_;
  metadata.reflection = LowLoadNodeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LowLoadNodeResponse::kAcceptaddressFieldNumber;
const int LowLoadNodeResponse::kServerregionFieldNumber;
#endif  // !_MSC_VER

LowLoadNodeResponse::LowLoadNodeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LowLoadNodeResponse::InitAsDefaultInstance() {
}

LowLoadNodeResponse::LowLoadNodeResponse(const LowLoadNodeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LowLoadNodeResponse::SharedCtor() {
  _cached_size_ = 0;
  acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverregion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LowLoadNodeResponse::~LowLoadNodeResponse() {
  SharedDtor();
}

void LowLoadNodeResponse::SharedDtor() {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete acceptaddress_;
  }
  if (this != default_instance_) {
  }
}

void LowLoadNodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LowLoadNodeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LowLoadNodeResponse_descriptor_;
}

const LowLoadNodeResponse& LowLoadNodeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

LowLoadNodeResponse* LowLoadNodeResponse::default_instance_ = NULL;

LowLoadNodeResponse* LowLoadNodeResponse::New() const {
  return new LowLoadNodeResponse;
}

void LowLoadNodeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acceptaddress()) {
      if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
        acceptaddress_->clear();
      }
    }
    serverregion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LowLoadNodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string acceptaddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acceptaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acceptaddress().data(), this->acceptaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverregion;
        break;
      }

      // required uint32 serverregion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverregion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverregion_)));
          set_has_serverregion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LowLoadNodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string acceptaddress = 1;
  if (has_acceptaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptaddress().data(), this->acceptaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->acceptaddress(), output);
  }

  // required uint32 serverregion = 2;
  if (has_serverregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverregion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LowLoadNodeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string acceptaddress = 1;
  if (has_acceptaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptaddress().data(), this->acceptaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acceptaddress(), target);
  }

  // required uint32 serverregion = 2;
  if (has_serverregion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverregion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LowLoadNodeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string acceptaddress = 1;
    if (has_acceptaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acceptaddress());
    }

    // required uint32 serverregion = 2;
    if (has_serverregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverregion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LowLoadNodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LowLoadNodeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LowLoadNodeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LowLoadNodeResponse::MergeFrom(const LowLoadNodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acceptaddress()) {
      set_acceptaddress(from.acceptaddress());
    }
    if (from.has_serverregion()) {
      set_serverregion(from.serverregion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LowLoadNodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LowLoadNodeResponse::CopyFrom(const LowLoadNodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LowLoadNodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LowLoadNodeResponse::Swap(LowLoadNodeResponse* other) {
  if (other != this) {
    std::swap(acceptaddress_, other->acceptaddress_);
    std::swap(serverregion_, other->serverregion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LowLoadNodeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LowLoadNodeResponse_descriptor_;
  metadata.reflection = LowLoadNodeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionLowLoadRequest::kServernameFieldNumber;
const int RegionLowLoadRequest::kServerregionFieldNumber;
#endif  // !_MSC_VER

RegionLowLoadRequest::RegionLowLoadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionLowLoadRequest::InitAsDefaultInstance() {
}

RegionLowLoadRequest::RegionLowLoadRequest(const RegionLowLoadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionLowLoadRequest::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverregion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionLowLoadRequest::~RegionLowLoadRequest() {
  SharedDtor();
}

void RegionLowLoadRequest::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void RegionLowLoadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLowLoadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLowLoadRequest_descriptor_;
}

const RegionLowLoadRequest& RegionLowLoadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

RegionLowLoadRequest* RegionLowLoadRequest::default_instance_ = NULL;

RegionLowLoadRequest* RegionLowLoadRequest::New() const {
  return new RegionLowLoadRequest;
}

void RegionLowLoadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    serverregion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionLowLoadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes servername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverregion;
        break;
      }

      // required uint32 serverregion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverregion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverregion_)));
          set_has_serverregion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionLowLoadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->servername(), output);
  }

  // required uint32 serverregion = 2;
  if (has_serverregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverregion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionLowLoadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes servername = 1;
  if (has_servername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->servername(), target);
  }

  // required uint32 serverregion = 2;
  if (has_serverregion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverregion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionLowLoadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes servername = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->servername());
    }

    // required uint32 serverregion = 2;
    if (has_serverregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverregion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLowLoadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionLowLoadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionLowLoadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionLowLoadRequest::MergeFrom(const RegionLowLoadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverregion()) {
      set_serverregion(from.serverregion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionLowLoadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLowLoadRequest::CopyFrom(const RegionLowLoadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLowLoadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RegionLowLoadRequest::Swap(RegionLowLoadRequest* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(serverregion_, other->serverregion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionLowLoadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLowLoadRequest_descriptor_;
  metadata.reflection = RegionLowLoadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionLowLoadResponse::kAcceptaddressFieldNumber;
#endif  // !_MSC_VER

RegionLowLoadResponse::RegionLowLoadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionLowLoadResponse::InitAsDefaultInstance() {
}

RegionLowLoadResponse::RegionLowLoadResponse(const RegionLowLoadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionLowLoadResponse::SharedCtor() {
  _cached_size_ = 0;
  acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionLowLoadResponse::~RegionLowLoadResponse() {
  SharedDtor();
}

void RegionLowLoadResponse::SharedDtor() {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete acceptaddress_;
  }
  if (this != default_instance_) {
  }
}

void RegionLowLoadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLowLoadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLowLoadResponse_descriptor_;
}

const RegionLowLoadResponse& RegionLowLoadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

RegionLowLoadResponse* RegionLowLoadResponse::default_instance_ = NULL;

RegionLowLoadResponse* RegionLowLoadResponse::New() const {
  return new RegionLowLoadResponse;
}

void RegionLowLoadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acceptaddress()) {
      if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
        acceptaddress_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionLowLoadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string acceptaddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acceptaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acceptaddress().data(), this->acceptaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionLowLoadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string acceptaddress = 1;
  if (has_acceptaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptaddress().data(), this->acceptaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->acceptaddress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionLowLoadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string acceptaddress = 1;
  if (has_acceptaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptaddress().data(), this->acceptaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acceptaddress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionLowLoadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string acceptaddress = 1;
    if (has_acceptaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acceptaddress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLowLoadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionLowLoadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionLowLoadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionLowLoadResponse::MergeFrom(const RegionLowLoadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acceptaddress()) {
      set_acceptaddress(from.acceptaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionLowLoadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLowLoadResponse::CopyFrom(const RegionLowLoadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLowLoadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegionLowLoadResponse::Swap(RegionLowLoadResponse* other) {
  if (other != this) {
    std::swap(acceptaddress_, other->acceptaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionLowLoadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLowLoadResponse_descriptor_;
  metadata.reflection = RegionLowLoadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeListRequest::kServernameFieldNumber;
#endif  // !_MSC_VER

NodeListRequest::NodeListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeListRequest::InitAsDefaultInstance() {
}

NodeListRequest::NodeListRequest(const NodeListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeListRequest::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeListRequest::~NodeListRequest() {
  SharedDtor();
}

void NodeListRequest::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void NodeListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeListRequest_descriptor_;
}

const NodeListRequest& NodeListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

NodeListRequest* NodeListRequest::default_instance_ = NULL;

NodeListRequest* NodeListRequest::New() const {
  return new NodeListRequest;
}

void NodeListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes servername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes servername = 1;
  if (has_servername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes servername = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeListRequest::MergeFrom(const NodeListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeListRequest::CopyFrom(const NodeListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeListRequest::Swap(NodeListRequest* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeListRequest_descriptor_;
  metadata.reflection = NodeListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeDetail::kServerregionFieldNumber;
const int NodeDetail::kAcceptaddressFieldNumber;
const int NodeDetail::kServerloadFieldNumber;
#endif  // !_MSC_VER

NodeDetail::NodeDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeDetail::InitAsDefaultInstance() {
}

NodeDetail::NodeDetail(const NodeDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeDetail::SharedCtor() {
  _cached_size_ = 0;
  serverregion_ = 0u;
  acceptaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverload_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeDetail::~NodeDetail() {
  SharedDtor();
}

void NodeDetail::SharedDtor() {
  if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete acceptaddress_;
  }
  if (this != default_instance_) {
  }
}

void NodeDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeDetail_descriptor_;
}

const NodeDetail& NodeDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

NodeDetail* NodeDetail::default_instance_ = NULL;

NodeDetail* NodeDetail::New() const {
  return new NodeDetail;
}

void NodeDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverregion_ = 0u;
    if (has_acceptaddress()) {
      if (acceptaddress_ != &::google::protobuf::internal::kEmptyString) {
        acceptaddress_->clear();
      }
    }
    serverload_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serverregion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverregion_)));
          set_has_serverregion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acceptaddress;
        break;
      }

      // required string acceptaddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceptaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acceptaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acceptaddress().data(), this->acceptaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverload;
        break;
      }

      // required int32 serverload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverload_)));
          set_has_serverload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serverregion = 1;
  if (has_serverregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverregion(), output);
  }

  // required string acceptaddress = 2;
  if (has_acceptaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptaddress().data(), this->acceptaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acceptaddress(), output);
  }

  // required int32 serverload = 3;
  if (has_serverload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serverregion = 1;
  if (has_serverregion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverregion(), target);
  }

  // required string acceptaddress = 2;
  if (has_acceptaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptaddress().data(), this->acceptaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acceptaddress(), target);
  }

  // required int32 serverload = 3;
  if (has_serverload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serverregion = 1;
    if (has_serverregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverregion());
    }

    // required string acceptaddress = 2;
    if (has_acceptaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acceptaddress());
    }

    // required int32 serverload = 3;
    if (has_serverload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeDetail::MergeFrom(const NodeDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverregion()) {
      set_serverregion(from.serverregion());
    }
    if (from.has_acceptaddress()) {
      set_acceptaddress(from.acceptaddress());
    }
    if (from.has_serverload()) {
      set_serverload(from.serverload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDetail::CopyFrom(const NodeDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NodeDetail::Swap(NodeDetail* other) {
  if (other != this) {
    std::swap(serverregion_, other->serverregion_);
    std::swap(acceptaddress_, other->acceptaddress_);
    std::swap(serverload_, other->serverload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeDetail_descriptor_;
  metadata.reflection = NodeDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeListResponse::kNodesFieldNumber;
#endif  // !_MSC_VER

NodeListResponse::NodeListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeListResponse::InitAsDefaultInstance() {
}

NodeListResponse::NodeListResponse(const NodeListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeListResponse::~NodeListResponse() {
  SharedDtor();
}

void NodeListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeListResponse_descriptor_;
}

const NodeListResponse& NodeListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

NodeListResponse* NodeListResponse::default_instance_ = NULL;

NodeListResponse* NodeListResponse::New() const {
  return new NodeListResponse;
}

void NodeListResponse::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .node.NodeDetail nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .node.NodeDetail nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .node.NodeDetail nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .node.NodeDetail nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeListResponse::MergeFrom(const NodeListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeListResponse::CopyFrom(const NodeListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeListResponse::IsInitialized() const {

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void NodeListResponse::Swap(NodeListResponse* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeListResponse_descriptor_;
  metadata.reflection = NodeListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateIdRequest::kAccountFieldNumber;
#endif  // !_MSC_VER

CreateIdRequest::CreateIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateIdRequest::InitAsDefaultInstance() {
}

CreateIdRequest::CreateIdRequest(const CreateIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateIdRequest::SharedCtor() {
  _cached_size_ = 0;
  account_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateIdRequest::~CreateIdRequest() {
  SharedDtor();
}

void CreateIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateIdRequest_descriptor_;
}

const CreateIdRequest& CreateIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

CreateIdRequest* CreateIdRequest::default_instance_ = NULL;

CreateIdRequest* CreateIdRequest::New() const {
  return new CreateIdRequest;
}

void CreateIdRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateIdRequest::MergeFrom(const CreateIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateIdRequest::CopyFrom(const CreateIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateIdRequest::Swap(CreateIdRequest* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateIdRequest_descriptor_;
  metadata.reflection = CreateIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateIdResponse::kResultFieldNumber;
const int CreateIdResponse::kUseridFieldNumber;
const int CreateIdResponse::kServerregionFieldNumber;
const int CreateIdResponse::kCreatetimeFieldNumber;
#endif  // !_MSC_VER

CreateIdResponse::CreateIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateIdResponse::InitAsDefaultInstance() {
}

CreateIdResponse::CreateIdResponse(const CreateIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateIdResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  serverregion_ = 0u;
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateIdResponse::~CreateIdResponse() {
  SharedDtor();
}

void CreateIdResponse::SharedDtor() {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (this != default_instance_) {
  }
}

void CreateIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateIdResponse_descriptor_;
}

const CreateIdResponse& CreateIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

CreateIdResponse* CreateIdResponse::default_instance_ = NULL;

CreateIdResponse* CreateIdResponse::New() const {
  return new CreateIdResponse;
}

void CreateIdResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    userid_ = GOOGLE_ULONGLONG(0);
    serverregion_ = 0u;
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::kEmptyString) {
        createtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverregion;
        break;
      }

      // optional uint32 serverregion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverregion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverregion_)));
          set_has_serverregion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_createtime;
        break;
      }

      // optional string createtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }

  // optional uint32 serverregion = 3;
  if (has_serverregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverregion(), output);
  }

  // optional string createtime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }

  // optional uint32 serverregion = 3;
  if (has_serverregion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverregion(), target);
  }

  // optional string createtime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateIdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint32 serverregion = 3;
    if (has_serverregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverregion());
    }

    // optional string createtime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateIdResponse::MergeFrom(const CreateIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_serverregion()) {
      set_serverregion(from.serverregion());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateIdResponse::CopyFrom(const CreateIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateIdResponse::Swap(CreateIdResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(userid_, other->userid_);
    std::swap(serverregion_, other->serverregion_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateIdResponse_descriptor_;
  metadata.reflection = CreateIdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckIdRequest::kAccountFieldNumber;
#endif  // !_MSC_VER

CheckIdRequest::CheckIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckIdRequest::InitAsDefaultInstance() {
}

CheckIdRequest::CheckIdRequest(const CheckIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckIdRequest::SharedCtor() {
  _cached_size_ = 0;
  account_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckIdRequest::~CheckIdRequest() {
  SharedDtor();
}

void CheckIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckIdRequest_descriptor_;
}

const CheckIdRequest& CheckIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

CheckIdRequest* CheckIdRequest::default_instance_ = NULL;

CheckIdRequest* CheckIdRequest::New() const {
  return new CheckIdRequest;
}

void CheckIdRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckIdRequest::MergeFrom(const CheckIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckIdRequest::CopyFrom(const CheckIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CheckIdRequest::Swap(CheckIdRequest* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckIdRequest_descriptor_;
  metadata.reflection = CheckIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckIdResponse::kResultFieldNumber;
const int CheckIdResponse::kUseridFieldNumber;
const int CheckIdResponse::kCreatetimeFieldNumber;
const int CheckIdResponse::kServerregionFieldNumber;
const int CheckIdResponse::kCasFieldNumber;
#endif  // !_MSC_VER

CheckIdResponse::CheckIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckIdResponse::InitAsDefaultInstance() {
}

CheckIdResponse::CheckIdResponse(const CheckIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckIdResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverregion_ = 0u;
  cas_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckIdResponse::~CheckIdResponse() {
  SharedDtor();
}

void CheckIdResponse::SharedDtor() {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (this != default_instance_) {
  }
}

void CheckIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckIdResponse_descriptor_;
}

const CheckIdResponse& CheckIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

CheckIdResponse* CheckIdResponse::default_instance_ = NULL;

CheckIdResponse* CheckIdResponse::New() const {
  return new CheckIdResponse;
}

void CheckIdResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::kEmptyString) {
        createtime_->clear();
      }
    }
    serverregion_ = 0u;
    cas_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_createtime;
        break;
      }

      // optional string createtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverregion;
        break;
      }

      // optional uint32 serverregion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverregion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverregion_)));
          set_has_serverregion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cas;
        break;
      }

      // optional uint64 cas = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cas_)));
          set_has_cas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }

  // optional string createtime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->createtime(), output);
  }

  // optional uint32 serverregion = 4;
  if (has_serverregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverregion(), output);
  }

  // optional uint64 cas = 5;
  if (has_cas()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }

  // optional string createtime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->createtime(), target);
  }

  // optional uint32 serverregion = 4;
  if (has_serverregion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverregion(), target);
  }

  // optional uint64 cas = 5;
  if (has_cas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckIdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional string createtime = 3;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

    // optional uint32 serverregion = 4;
    if (has_serverregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverregion());
    }

    // optional uint64 cas = 5;
    if (has_cas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cas());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckIdResponse::MergeFrom(const CheckIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_serverregion()) {
      set_serverregion(from.serverregion());
    }
    if (from.has_cas()) {
      set_cas(from.cas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckIdResponse::CopyFrom(const CheckIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CheckIdResponse::Swap(CheckIdResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(userid_, other->userid_);
    std::swap(createtime_, other->createtime_);
    std::swap(serverregion_, other->serverregion_);
    std::swap(cas_, other->cas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckIdResponse_descriptor_;
  metadata.reflection = CheckIdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRegionRequest::kAccountFieldNumber;
const int UpdateRegionRequest::kServerregionFieldNumber;
const int UpdateRegionRequest::kCasFieldNumber;
#endif  // !_MSC_VER

UpdateRegionRequest::UpdateRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateRegionRequest::InitAsDefaultInstance() {
}

UpdateRegionRequest::UpdateRegionRequest(const UpdateRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  account_ = GOOGLE_ULONGLONG(0);
  serverregion_ = 0u;
  cas_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRegionRequest::~UpdateRegionRequest() {
  SharedDtor();
}

void UpdateRegionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRegionRequest_descriptor_;
}

const UpdateRegionRequest& UpdateRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

UpdateRegionRequest* UpdateRegionRequest::default_instance_ = NULL;

UpdateRegionRequest* UpdateRegionRequest::New() const {
  return new UpdateRegionRequest;
}

void UpdateRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_ = GOOGLE_ULONGLONG(0);
    serverregion_ = 0u;
    cas_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverregion;
        break;
      }

      // required uint32 serverregion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverregion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverregion_)));
          set_has_serverregion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cas;
        break;
      }

      // required uint64 cas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cas_)));
          set_has_cas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  // required uint32 serverregion = 2;
  if (has_serverregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverregion(), output);
  }

  // required uint64 cas = 3;
  if (has_cas()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  // required uint32 serverregion = 2;
  if (has_serverregion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverregion(), target);
  }

  // required uint64 cas = 3;
  if (has_cas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account());
    }

    // required uint32 serverregion = 2;
    if (has_serverregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverregion());
    }

    // required uint64 cas = 3;
    if (has_cas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cas());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRegionRequest::MergeFrom(const UpdateRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_serverregion()) {
      set_serverregion(from.serverregion());
    }
    if (from.has_cas()) {
      set_cas(from.cas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRegionRequest::CopyFrom(const UpdateRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UpdateRegionRequest::Swap(UpdateRegionRequest* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(serverregion_, other->serverregion_);
    std::swap(cas_, other->cas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRegionRequest_descriptor_;
  metadata.reflection = UpdateRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRegionResponse::kResultFieldNumber;
#endif  // !_MSC_VER

UpdateRegionResponse::UpdateRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateRegionResponse::InitAsDefaultInstance() {
}

UpdateRegionResponse::UpdateRegionResponse(const UpdateRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRegionResponse::~UpdateRegionResponse() {
  SharedDtor();
}

void UpdateRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRegionResponse_descriptor_;
}

const UpdateRegionResponse& UpdateRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

UpdateRegionResponse* UpdateRegionResponse::default_instance_ = NULL;

UpdateRegionResponse* UpdateRegionResponse::New() const {
  return new UpdateRegionResponse;
}

void UpdateRegionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateRegionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRegionResponse::MergeFrom(const UpdateRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRegionResponse::CopyFrom(const UpdateRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRegionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateRegionResponse::Swap(UpdateRegionResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRegionResponse_descriptor_;
  metadata.reflection = UpdateRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheStoreRequest::kServeridFieldNumber;
const int CacheStoreRequest::kRoutetypeFieldNumber;
const int CacheStoreRequest::kRouteFieldNumber;
const int CacheStoreRequest::kKeysFieldNumber;
#endif  // !_MSC_VER

CacheStoreRequest::CacheStoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CacheStoreRequest::InitAsDefaultInstance() {
}

CacheStoreRequest::CacheStoreRequest(const CacheStoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CacheStoreRequest::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0u;
  routetype_ = 0;
  route_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheStoreRequest::~CacheStoreRequest() {
  SharedDtor();
}

void CacheStoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheStoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheStoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheStoreRequest_descriptor_;
}

const CacheStoreRequest& CacheStoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

CacheStoreRequest* CacheStoreRequest::default_instance_ = NULL;

CacheStoreRequest* CacheStoreRequest::New() const {
  return new CacheStoreRequest;
}

void CacheStoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0u;
    routetype_ = 0;
    route_ = GOOGLE_ULONGLONG(0);
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_routetype;
        break;
      }

      // required int32 routetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routetype_)));
          set_has_routetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_route;
        break;
      }

      // required uint64 route = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &route_)));
          set_has_route();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keys;
        break;
      }

      // repeated string keys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverid(), output);
  }

  // required int32 routetype = 2;
  if (has_routetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->routetype(), output);
  }

  // required uint64 route = 3;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->route(), output);
  }

  // repeated string keys = 4;
  for (int i = 0; i < this->keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keys(i).data(), this->keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CacheStoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverid(), target);
  }

  // required int32 routetype = 2;
  if (has_routetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->routetype(), target);
  }

  // required uint64 route = 3;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->route(), target);
  }

  // repeated string keys = 4;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CacheStoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required int32 routetype = 2;
    if (has_routetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routetype());
    }

    // required uint64 route = 3;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->route());
    }

  }
  // repeated string keys = 4;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheStoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheStoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheStoreRequest::MergeFrom(const CacheStoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_routetype()) {
      set_routetype(from.routetype());
    }
    if (from.has_route()) {
      set_route(from.route());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheStoreRequest::CopyFrom(const CacheStoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheStoreRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CacheStoreRequest::Swap(CacheStoreRequest* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(routetype_, other->routetype_);
    std::swap(route_, other->route_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheStoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheStoreRequest_descriptor_;
  metadata.reflection = CacheStoreRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheKeyResult::kKeyFieldNumber;
const int CacheKeyResult::kResultFieldNumber;
#endif  // !_MSC_VER

CacheKeyResult::CacheKeyResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CacheKeyResult::InitAsDefaultInstance() {
}

CacheKeyResult::CacheKeyResult(const CacheKeyResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CacheKeyResult::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheKeyResult::~CacheKeyResult() {
  SharedDtor();
}

void CacheKeyResult::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void CacheKeyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheKeyResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheKeyResult_descriptor_;
}

const CacheKeyResult& CacheKeyResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

CacheKeyResult* CacheKeyResult::default_instance_ = NULL;

CacheKeyResult* CacheKeyResult::New() const {
  return new CacheKeyResult;
}

void CacheKeyResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheKeyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheKeyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CacheKeyResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CacheKeyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheKeyResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheKeyResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheKeyResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheKeyResult::MergeFrom(const CacheKeyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheKeyResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheKeyResult::CopyFrom(const CacheKeyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheKeyResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CacheKeyResult::Swap(CacheKeyResult* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheKeyResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheKeyResult_descriptor_;
  metadata.reflection = CacheKeyResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheStoreResponse::kResultFieldNumber;
const int CacheStoreResponse::kKeyresultsFieldNumber;
#endif  // !_MSC_VER

CacheStoreResponse::CacheStoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CacheStoreResponse::InitAsDefaultInstance() {
}

CacheStoreResponse::CacheStoreResponse(const CacheStoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CacheStoreResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheStoreResponse::~CacheStoreResponse() {
  SharedDtor();
}

void CacheStoreResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheStoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheStoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheStoreResponse_descriptor_;
}

const CacheStoreResponse& CacheStoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlcentre_2eproto();
  return *default_instance_;
}

CacheStoreResponse* CacheStoreResponse::default_instance_ = NULL;

CacheStoreResponse* CacheStoreResponse::New() const {
  return new CacheStoreResponse;
}

void CacheStoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  keyresults_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keyresults;
        break;
      }

      // repeated .node.CacheKeyResult keyresults = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyresults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyresults()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keyresults;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .node.CacheKeyResult keyresults = 2;
  for (int i = 0; i < this->keyresults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->keyresults(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CacheStoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .node.CacheKeyResult keyresults = 2;
  for (int i = 0; i < this->keyresults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->keyresults(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CacheStoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .node.CacheKeyResult keyresults = 2;
  total_size += 1 * this->keyresults_size();
  for (int i = 0; i < this->keyresults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyresults(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheStoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheStoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheStoreResponse::MergeFrom(const CacheStoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyresults_.MergeFrom(from.keyresults_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheStoreResponse::CopyFrom(const CacheStoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheStoreResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < keyresults_size(); i++) {
    if (!this->keyresults(i).IsInitialized()) return false;
  }
  return true;
}

void CacheStoreResponse::Swap(CacheStoreResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    keyresults_.Swap(&other->keyresults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheStoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheStoreResponse_descriptor_;
  metadata.reflection = CacheStoreResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace node

// @@protoc_insertion_point(global_scope)
