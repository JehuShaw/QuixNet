// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cache_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cache_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "void_packet.pb.h"
#include "interest_packet.pb.h"
#include "data_packet.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cache_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cache_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cache_2eproto;
namespace node {
class CacheRequest;
class CacheRequestDefaultTypeInternal;
extern CacheRequestDefaultTypeInternal _CacheRequest_default_instance_;
class CacheResponse;
class CacheResponseDefaultTypeInternal;
extern CacheResponseDefaultTypeInternal _CacheResponse_default_instance_;
class MCRequest;
class MCRequestDefaultTypeInternal;
extern MCRequestDefaultTypeInternal _MCRequest_default_instance_;
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> ::node::CacheRequest* Arena::CreateMaybeMessage<::node::CacheRequest>(Arena*);
template<> ::node::CacheResponse* Arena::CreateMaybeMessage<::node::CacheResponse>(Arena*);
template<> ::node::MCRequest* Arena::CreateMaybeMessage<::node::MCRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace node {

// ===================================================================

class MCRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.MCRequest) */ {
 public:
  MCRequest();
  virtual ~MCRequest();

  MCRequest(const MCRequest& from);
  MCRequest(MCRequest&& from) noexcept
    : MCRequest() {
    *this = ::std::move(from);
  }

  inline MCRequest& operator=(const MCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MCRequest& operator=(MCRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MCRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MCRequest* internal_default_instance() {
    return reinterpret_cast<const MCRequest*>(
               &_MCRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MCRequest& a, MCRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MCRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MCRequest* New() const final {
    return CreateMaybeMessage<MCRequest>(nullptr);
  }

  MCRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MCRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MCRequest& from);
  void MergeFrom(const MCRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MCRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.MCRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cache_2eproto);
    return ::descriptor_table_cache_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kExpiryFieldNumber = 4,
    kCasFieldNumber = 5,
    kResultFieldNumber = 6,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiry = 4;
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 cas = 5;
  void clear_cas();
  ::PROTOBUF_NAMESPACE_ID::uint64 cas() const;
  void set_cas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cas() const;
  void _internal_set_cas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 result = 6;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.MCRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cas_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cache_2eproto;
};
// -------------------------------------------------------------------

class CacheRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CacheRequest) */ {
 public:
  CacheRequest();
  virtual ~CacheRequest();

  CacheRequest(const CacheRequest& from);
  CacheRequest(CacheRequest&& from) noexcept
    : CacheRequest() {
    *this = ::std::move(from);
  }

  inline CacheRequest& operator=(const CacheRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheRequest& operator=(CacheRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheRequest* internal_default_instance() {
    return reinterpret_cast<const CacheRequest*>(
               &_CacheRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CacheRequest& a, CacheRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheRequest* New() const final {
    return CreateMaybeMessage<CacheRequest>(nullptr);
  }

  CacheRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheRequest& from);
  void MergeFrom(const CacheRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CacheRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cache_2eproto);
    return ::descriptor_table_cache_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
    kKeyFieldNumber = 2,
    kDataFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kCountFieldNumber = 5,
    kResultFieldNumber = 6,
  };
  // repeated .node.MCRequest values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::node::MCRequest* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::MCRequest >*
      mutable_values();
  private:
  const ::node::MCRequest& _internal_values(int index) const;
  ::node::MCRequest* _internal_add_values();
  public:
  const ::node::MCRequest& values(int index) const;
  ::node::MCRequest* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::MCRequest >&
      values() const;

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 offset = 4;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 5;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 result = 6;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.CacheRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::MCRequest > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cache_2eproto;
};
// -------------------------------------------------------------------

class CacheResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.CacheResponse) */ {
 public:
  CacheResponse();
  virtual ~CacheResponse();

  CacheResponse(const CacheResponse& from);
  CacheResponse(CacheResponse&& from) noexcept
    : CacheResponse() {
    *this = ::std::move(from);
  }

  inline CacheResponse& operator=(const CacheResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheResponse& operator=(CacheResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheResponse* internal_default_instance() {
    return reinterpret_cast<const CacheResponse*>(
               &_CacheResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CacheResponse& a, CacheResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheResponse* New() const final {
    return CreateMaybeMessage<CacheResponse>(nullptr);
  }

  CacheResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheResponse& from);
  void MergeFrom(const CacheResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.CacheResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cache_2eproto);
    return ::descriptor_table_cache_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
    kKeyFieldNumber = 2,
    kDataFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // repeated .node.MCRequest values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::node::MCRequest* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::MCRequest >*
      mutable_values();
  private:
  const ::node::MCRequest& _internal_values(int index) const;
  ::node::MCRequest* _internal_add_values();
  public:
  const ::node::MCRequest& values(int index) const;
  ::node::MCRequest* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::MCRequest >&
      values() const;

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 result = 4;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:node.CacheResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::MCRequest > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cache_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MCRequest

// bytes key = 1;
inline void MCRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MCRequest::key() const {
  // @@protoc_insertion_point(field_get:node.MCRequest.key)
  return _internal_key();
}
inline void MCRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:node.MCRequest.key)
}
inline std::string* MCRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:node.MCRequest.key)
  return _internal_mutable_key();
}
inline const std::string& MCRequest::_internal_key() const {
  return key_.GetNoArena();
}
inline void MCRequest::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MCRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.MCRequest.key)
}
inline void MCRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.MCRequest.key)
}
inline void MCRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.MCRequest.key)
}
inline std::string* MCRequest::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MCRequest::release_key() {
  // @@protoc_insertion_point(field_release:node.MCRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MCRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:node.MCRequest.key)
}

// bytes value = 2;
inline void MCRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MCRequest::value() const {
  // @@protoc_insertion_point(field_get:node.MCRequest.value)
  return _internal_value();
}
inline void MCRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:node.MCRequest.value)
}
inline std::string* MCRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:node.MCRequest.value)
  return _internal_mutable_value();
}
inline const std::string& MCRequest::_internal_value() const {
  return value_.GetNoArena();
}
inline void MCRequest::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MCRequest::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.MCRequest.value)
}
inline void MCRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.MCRequest.value)
}
inline void MCRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.MCRequest.value)
}
inline std::string* MCRequest::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MCRequest::release_value() {
  // @@protoc_insertion_point(field_release:node.MCRequest.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MCRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:node.MCRequest.value)
}

// uint32 flags = 3;
inline void MCRequest::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MCRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MCRequest::flags() const {
  // @@protoc_insertion_point(field_get:node.MCRequest.flags)
  return _internal_flags();
}
inline void MCRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void MCRequest::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:node.MCRequest.flags)
}

// uint32 expiry = 4;
inline void MCRequest::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MCRequest::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MCRequest::expiry() const {
  // @@protoc_insertion_point(field_get:node.MCRequest.expiry)
  return _internal_expiry();
}
inline void MCRequest::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void MCRequest::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:node.MCRequest.expiry)
}

// uint64 cas = 5;
inline void MCRequest::clear_cas() {
  cas_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MCRequest::_internal_cas() const {
  return cas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MCRequest::cas() const {
  // @@protoc_insertion_point(field_get:node.MCRequest.cas)
  return _internal_cas();
}
inline void MCRequest::_internal_set_cas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cas_ = value;
}
inline void MCRequest::set_cas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cas(value);
  // @@protoc_insertion_point(field_set:node.MCRequest.cas)
}

// int32 result = 6;
inline void MCRequest::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MCRequest::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MCRequest::result() const {
  // @@protoc_insertion_point(field_get:node.MCRequest.result)
  return _internal_result();
}
inline void MCRequest::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void MCRequest::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.MCRequest.result)
}

// -------------------------------------------------------------------

// CacheRequest

// repeated .node.MCRequest values = 1;
inline int CacheRequest::_internal_values_size() const {
  return values_.size();
}
inline int CacheRequest::values_size() const {
  return _internal_values_size();
}
inline void CacheRequest::clear_values() {
  values_.Clear();
}
inline ::node::MCRequest* CacheRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:node.CacheRequest.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::MCRequest >*
CacheRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:node.CacheRequest.values)
  return &values_;
}
inline const ::node::MCRequest& CacheRequest::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::node::MCRequest& CacheRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:node.CacheRequest.values)
  return _internal_values(index);
}
inline ::node::MCRequest* CacheRequest::_internal_add_values() {
  return values_.Add();
}
inline ::node::MCRequest* CacheRequest::add_values() {
  // @@protoc_insertion_point(field_add:node.CacheRequest.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::MCRequest >&
CacheRequest::values() const {
  // @@protoc_insertion_point(field_list:node.CacheRequest.values)
  return values_;
}

// bytes key = 2;
inline void CacheRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CacheRequest::key() const {
  // @@protoc_insertion_point(field_get:node.CacheRequest.key)
  return _internal_key();
}
inline void CacheRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:node.CacheRequest.key)
}
inline std::string* CacheRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:node.CacheRequest.key)
  return _internal_mutable_key();
}
inline const std::string& CacheRequest::_internal_key() const {
  return key_.GetNoArena();
}
inline void CacheRequest::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CacheRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.CacheRequest.key)
}
inline void CacheRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.CacheRequest.key)
}
inline void CacheRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.CacheRequest.key)
}
inline std::string* CacheRequest::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CacheRequest::release_key() {
  // @@protoc_insertion_point(field_release:node.CacheRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CacheRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:node.CacheRequest.key)
}

// bytes data = 3;
inline void CacheRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CacheRequest::data() const {
  // @@protoc_insertion_point(field_get:node.CacheRequest.data)
  return _internal_data();
}
inline void CacheRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:node.CacheRequest.data)
}
inline std::string* CacheRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:node.CacheRequest.data)
  return _internal_mutable_data();
}
inline const std::string& CacheRequest::_internal_data() const {
  return data_.GetNoArena();
}
inline void CacheRequest::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CacheRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.CacheRequest.data)
}
inline void CacheRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.CacheRequest.data)
}
inline void CacheRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.CacheRequest.data)
}
inline std::string* CacheRequest::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CacheRequest::release_data() {
  // @@protoc_insertion_point(field_release:node.CacheRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CacheRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:node.CacheRequest.data)
}

// uint32 offset = 4;
inline void CacheRequest::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheRequest::offset() const {
  // @@protoc_insertion_point(field_get:node.CacheRequest.offset)
  return _internal_offset();
}
inline void CacheRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
}
inline void CacheRequest::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:node.CacheRequest.offset)
}

// uint32 count = 5;
inline void CacheRequest::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheRequest::count() const {
  // @@protoc_insertion_point(field_get:node.CacheRequest.count)
  return _internal_count();
}
inline void CacheRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void CacheRequest::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:node.CacheRequest.count)
}

// int32 result = 6;
inline void CacheRequest::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CacheRequest::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CacheRequest::result() const {
  // @@protoc_insertion_point(field_get:node.CacheRequest.result)
  return _internal_result();
}
inline void CacheRequest::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void CacheRequest::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.CacheRequest.result)
}

// -------------------------------------------------------------------

// CacheResponse

// repeated .node.MCRequest values = 1;
inline int CacheResponse::_internal_values_size() const {
  return values_.size();
}
inline int CacheResponse::values_size() const {
  return _internal_values_size();
}
inline void CacheResponse::clear_values() {
  values_.Clear();
}
inline ::node::MCRequest* CacheResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:node.CacheResponse.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::MCRequest >*
CacheResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:node.CacheResponse.values)
  return &values_;
}
inline const ::node::MCRequest& CacheResponse::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::node::MCRequest& CacheResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:node.CacheResponse.values)
  return _internal_values(index);
}
inline ::node::MCRequest* CacheResponse::_internal_add_values() {
  return values_.Add();
}
inline ::node::MCRequest* CacheResponse::add_values() {
  // @@protoc_insertion_point(field_add:node.CacheResponse.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::MCRequest >&
CacheResponse::values() const {
  // @@protoc_insertion_point(field_list:node.CacheResponse.values)
  return values_;
}

// bytes key = 2;
inline void CacheResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CacheResponse::key() const {
  // @@protoc_insertion_point(field_get:node.CacheResponse.key)
  return _internal_key();
}
inline void CacheResponse::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:node.CacheResponse.key)
}
inline std::string* CacheResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable:node.CacheResponse.key)
  return _internal_mutable_key();
}
inline const std::string& CacheResponse::_internal_key() const {
  return key_.GetNoArena();
}
inline void CacheResponse::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CacheResponse::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.CacheResponse.key)
}
inline void CacheResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.CacheResponse.key)
}
inline void CacheResponse::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.CacheResponse.key)
}
inline std::string* CacheResponse::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CacheResponse::release_key() {
  // @@protoc_insertion_point(field_release:node.CacheResponse.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CacheResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:node.CacheResponse.key)
}

// bytes data = 3;
inline void CacheResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CacheResponse::data() const {
  // @@protoc_insertion_point(field_get:node.CacheResponse.data)
  return _internal_data();
}
inline void CacheResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:node.CacheResponse.data)
}
inline std::string* CacheResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:node.CacheResponse.data)
  return _internal_mutable_data();
}
inline const std::string& CacheResponse::_internal_data() const {
  return data_.GetNoArena();
}
inline void CacheResponse::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CacheResponse::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:node.CacheResponse.data)
}
inline void CacheResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:node.CacheResponse.data)
}
inline void CacheResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:node.CacheResponse.data)
}
inline std::string* CacheResponse::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CacheResponse::release_data() {
  // @@protoc_insertion_point(field_release:node.CacheResponse.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CacheResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:node.CacheResponse.data)
}

// int32 result = 4;
inline void CacheResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CacheResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CacheResponse::result() const {
  // @@protoc_insertion_point(field_get:node.CacheResponse.result)
  return _internal_result();
}
inline void CacheResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void CacheResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:node.CacheResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace node

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cache_2eproto
